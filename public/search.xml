<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ArchLinux安装</title>
    <url>/2020/12/15/ArchLinux%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ArchLinux是通用 x86-64 GNU/Linux 发行版，同时也是一个非常简洁的Linux。它将简洁定义为将简洁定义为：避免任何不必要的添加、修改和复杂增加。甚至连vim都不自带！这也给它的安装带来了难度。但与此同时它也提供了非常详细并且更新及时的Wiki（帮助文档），供开发者学习使用。</p>
<h2 id="Arction"><a href="#Arction" class="headerlink" title="Arction:"></a>Arction:</h2><a id="more"></a>

<h3 id="1-下载安装镜像到U盘"><a href="#1-下载安装镜像到U盘" class="headerlink" title="1.下载安装镜像到U盘"></a>1.下载安装镜像到U盘</h3><blockquote>
<p>镜像地址:  <a href="http://mirrors.163.com/archlinux/iso">http://mirrors.163.com/archlinux/iso</a></p>
</blockquote>
<h3 id="2-登入系统给磁盘分区"><a href="#2-登入系统给磁盘分区" class="headerlink" title="2.登入系统给磁盘分区"></a>2.登入系统给磁盘分区</h3><p>同步时间：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] timedatectl set-ntp <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>查看当前磁盘各个分区：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] lsblk</span><br></pre></td></tr></table></figure>
<p>设置分区：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] cfdisk /dev/sdx  <span class="comment">#选gpt设置分区,sdx为你想要安装的那个分区</span></span><br></pre></td></tr></table></figure>
<h4 id="当电脑里面已经有别的系统且也是UEFI引导时："><a href="#当电脑里面已经有别的系统且也是UEFI引导时：" class="headerlink" title="当电脑里面已经有别的系统且也是UEFI引导时："></a>当电脑里面已经有别的系统且也是UEFI引导时：</h4><p>分区方案：<br>sdx1—————1G————–swap分区<br>sdx2—————nG————–主分区</p>
<h4 id="当电脑还是空机时"><a href="#当电脑还是空机时" class="headerlink" title="当电脑还是空机时"></a>当电脑还是空机时</h4><p>分区方案：<br>sdx1—————1G————–swap分区<br>sdx2—————nG————–主分区<br>sdx3—————500M————ESP分区</p>
<h4 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h4><p>对于 root、home 分区等直接使用 ext4 文件系统进行初始化。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] mkfs.ext4 /dev/sdx2</span><br></pre></td></tr></table></figure>
<p>对于交换分区，不能使用上述命令进行格式化，而需要使用 mkswap 将其初始化。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] mkswap /dev/sdx1</span><br><span class="line">[root@archiso~] swapon /dev/sdx1</span><br></pre></td></tr></table></figure>
<p>电脑为空机执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] mkfs.fat -F32 /dev/sda1</span><br></pre></td></tr></table></figure>
<p>(格式化ESP分区)</p>
<h4 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h4><blockquote>
<p>假设系统内的ESP分区为sdxn</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 挂载根分区</span></span><br><span class="line">[root@archiso~] mount /dev/sdx2 /mnt</span><br><span class="line"><span class="comment"># 在根分区下新建boot文件夹</span></span><br><span class="line">[root@archiso~] mkdir /mnt/boot</span><br><span class="line"><span class="comment"># 挂载boot分区</span></span><br><span class="line">[root@archiso~] mount /dev/sdxn /mnt/boot</span><br></pre></td></tr></table></figure>
<h4 id="更换软件源"><a href="#更换软件源" class="headerlink" title="更换软件源"></a>更换软件源</h4><p>使用reflector来获取速度最快的6个镜像，并将地址保存至/etc/pacman.d/mirrorlist</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] reflector -c China -a 6 --sort rate --save /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure>
<h3 id="3-安装系统"><a href="#3-安装系统" class="headerlink" title="3.安装系统"></a>3.安装系统</h3><p>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] pacstrap -i /mnt base base-devel linux linux-firmware</span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装完系统后会在/mnt/boot下生成几个文件。这对下面配置grub引导文件至关重要，下面生成grub配置文件时会扫描这几个文件</p>
</blockquote>
<h3 id="4-配置系统"><a href="#4-配置系统" class="headerlink" title="4.配置系统"></a>4.配置系统</h3><h4 id="1-配置fstab"><a href="#1-配置fstab" class="headerlink" title="(1)配置fstab"></a>(1)配置fstab</h4><p>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure>
<h4 id="2-切换到新系统"><a href="#2-切换到新系统" class="headerlink" title="(2)切换到新系统"></a>(2)切换到新系统</h4><p>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] arch-chroot /mnt</span><br><span class="line">[root@archiso~] pacman -S vim <span class="comment">#安装vim</span></span><br></pre></td></tr></table></figure>
<h4 id="3-进行本地语言设置"><a href="#3-进行本地语言设置" class="headerlink" title="(3)进行本地语言设置"></a>(3)进行本地语言设置</h4><p>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] vim /etc/locale.gen</span><br></pre></td></tr></table></figure>
<p>反注释（删掉前面的#）<br>en_US.UTF-8 UTF-8<br>zh_CN.UTF-8 UTF-8<br>这两个，退出保存<br>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] locale-gen</span><br></pre></td></tr></table></figure>
<p>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] <span class="built_in">echo</span> LANG=en_US.UTF-8 &gt; /etc/locale.conf</span><br></pre></td></tr></table></figure>
<h4 id="4-设置时区"><a href="#4-设置时区" class="headerlink" title="(4)设置时区"></a>(4)设置时区</h4><p>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure>
<p>设置时区。<br>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] hwclock --systohc --utc</span><br></pre></td></tr></table></figure>
<h4 id="5-设置主机名和网络"><a href="#5-设置主机名和网络" class="headerlink" title="(5)设置主机名和网络"></a>(5)设置主机名和网络</h4><p>设置主机名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] vim /etc/hostname</span><br></pre></td></tr></table></figure>
<blockquote>
<p>主机名<br>~<br>~<br>~</p>
</blockquote>
<p>设置网络：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] vim /etc/hosts</span><br></pre></td></tr></table></figure>
<blockquote>
<p>127.0.0.1&emsp;&emsp;localhost<br>::1&emsp;&emsp;&emsp;&emsp;&emsp;localhost<br>127.0.0.1&emsp;&emsp;主机名.localdomain&emsp;&emsp;主机名</p>
</blockquote>
<p>设置网络DNS</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] vim /etc/resolv.conf.head</span><br></pre></td></tr></table></figure>
<blockquote>
<p>nameserver&emsp;&emsp;218.2.2.2&emsp;—江苏电信<br>nameserver&emsp;&emsp;223.5.5.5&emsp;—阿里</p>
</blockquote>
<h4 id="6-安装网络工具"><a href="#6-安装网络工具" class="headerlink" title="(6)安装网络工具"></a>(6)安装网络工具</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] pacman -S dhcpcd</span><br><span class="line">[root@archiso~] systemctl start dhcpcd</span><br><span class="line">[root@archiso~] systemctl <span class="built_in">enable</span> dhcpcd</span><br></pre></td></tr></table></figure>
<h3 id="5-引导系统"><a href="#5-引导系统" class="headerlink" title="5.引导系统"></a>5.引导系统</h3><p>GRUB进行UEFI引导<br>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] pacman -S dosfstools grub efibootmgr</span><br></pre></td></tr></table></figure>
<p>安装引导工具</p>
<p>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] grub-install --target=x86_64-efi --efi-directory=/boot   --bootloader-id=Arch</span><br></pre></td></tr></table></figure>
<p>进行安装grub</p>
<p>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>
<p>进行配置grub</p>
<h3 id="6-用户管理"><a href="#6-用户管理" class="headerlink" title="6.用户管理"></a>6.用户管理</h3><h4 id="（1）设置root密码"><a href="#（1）设置root密码" class="headerlink" title="（1）设置root密码"></a>（1）设置root密码</h4><p>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] passwd</span><br></pre></td></tr></table></figure>
<h4 id="（2）添加用户"><a href="#（2）添加用户" class="headerlink" title="（2）添加用户"></a>（2）添加用户</h4><p>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] useradd -m -G wheel 用户名</span><br></pre></td></tr></table></figure>
<p>（务必添加一个 用户 ，否则后面sddm显示管理器登录的时候无法登录，sddm不会列出root用户）<br>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] passwd 用户名</span><br></pre></td></tr></table></figure>
<p>为刚才添加的用户设置密码</p>
<h4 id="3-给用户添加权限"><a href="#3-给用户添加权限" class="headerlink" title="(3) 给用户添加权限"></a>(3) 给用户添加权限</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] ln -S /usr/bin/vim /usr/bin/vi </span><br><span class="line">[root@archiso~] visudo</span><br></pre></td></tr></table></figure>
<blockquote>
<p>%wheel All=(All)All “去掉这句话前的‘#’符号”</p>
</blockquote>
<h3 id="7-退出chroot重启"><a href="#7-退出chroot重启" class="headerlink" title="7.退出chroot重启"></a>7.退出chroot重启</h3><p>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] <span class="built_in">exit</span></span><br><span class="line">[root@archiso~] reboot</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux学习</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
      </tags>
  </entry>
  <entry>
    <title>Git+Nginx搭建远程Web服务器</title>
    <url>/2021/01/02/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="Git-Nginx搭建远程Web服务器"><a href="#Git-Nginx搭建远程Web服务器" class="headerlink" title="Git+Nginx搭建远程Web服务器"></a>Git+Nginx搭建远程Web服务器</h2><h3 id="一、服务器端配置"><a href="#一、服务器端配置" class="headerlink" title="一、服务器端配置"></a>一、服务器端配置</h3><h4 id="1-创建git文件夹用于存放网站文件"><a href="#1-创建git文件夹用于存放网站文件" class="headerlink" title="1. 创建git文件夹用于存放网站文件"></a>1. 创建git文件夹用于存放网站文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span></span><br><span class="line">$ mkdir .myblog</span><br><span class="line">$ <span class="built_in">cd</span> .myblog/</span><br><span class="line">$ git init --bare</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227082417.png"></p>
<a id="more"></a>
<h4 id="2-在服务器选择一个放置网站的目录，假设这个目录为-var-www-myblog"><a href="#2-在服务器选择一个放置网站的目录，假设这个目录为-var-www-myblog" class="headerlink" title="2. 在服务器选择一个放置网站的目录，假设这个目录为/var/www/myblog"></a>2. 在服务器选择一个放置网站的目录，假设这个目录为/var/www/myblog</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /var/www/myblog</span><br><span class="line">$ <span class="built_in">cd</span> /var/www/</span><br><span class="line">$ git <span class="built_in">clone</span> ~/.myblog myblog</span><br></pre></td></tr></table></figure>
<h4 id="3-自动部署"><a href="#3-自动部署" class="headerlink" title="3. 自动部署"></a>3. 自动部署</h4><p>git 有个功能叫做hook，也就是说在我们提交代码的时候会触发一些操作，这就是hook Git的挂钩（Hook）主要包含：</p>
<p>applypatch-msg post-update pre-rebase commit-msg pre-applypatch update post-commit pre-commit post-receive prepare-commit-msg</p>
<p>我们要用到的是post-update这个hook 进入到我们的git服务器的文件夹~/.myblog/hooks 进入到hook文件夹 使用ls命令可以看到许多hook脚本的sample<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227082438.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.myblog/hooks</span><br><span class="line">$ vim post-update</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227082449.png"><br>新建一个post-update脚本 输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">cd</span> /var/www/myblog</span><br><span class="line">env -i git pull</span><br></pre></td></tr></table></figure>
<p>给新建的post-update赋予权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chmod +x post-update</span><br></pre></td></tr></table></figure>
<h4 id="4-配置nginx"><a href="#4-配置nginx" class="headerlink" title="4..配置nginx"></a>4..配置nginx</h4><p>编辑nginx的配置文件/etc/nginx/sites-available</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vim /etc/nginx/sites-available/default</span><br><span class="line"></span><br><span class="line"><span class="comment">###### 编辑以下内容:</span></span><br><span class="line">server &#123;</span><br><span class="line">	listen 80 default_server;</span><br><span class="line">	listen [::]:80 default_server;</span><br><span class="line"></span><br><span class="line">	<span class="comment"># SSL configuration</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="comment"># listen 443 ssl default_server;</span></span><br><span class="line">	<span class="comment"># listen [::]:443 ssl default_server;</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="comment"># Note: You should disable gzip for SSL traffic.</span></span><br><span class="line">	<span class="comment"># See: https://bugs.debian.org/773332</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="comment"># Read up on ssl_ciphers to ensure a secure configuration.</span></span><br><span class="line">	<span class="comment"># See: https://bugs.debian.org/765782</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="comment"># Self signed certs generated by the ssl-cert package</span></span><br><span class="line">	<span class="comment"># Don&#x27;t use them in a production server!</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="comment"># include snippets/snakeoil.conf;</span></span><br><span class="line"></span><br><span class="line">	root /var/www/myblog;</span><br><span class="line"></span><br><span class="line">	<span class="comment"># Add index.php to the list if you are using PHP</span></span><br><span class="line">	index index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">	server_name _;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">		<span class="comment"># First attempt to serve request as file, then</span></span><br><span class="line">		<span class="comment"># as directory, then fall back to displaying a 404.</span></span><br><span class="line">		try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227082509.png"><br>这里主要修改server_name为你的域名 修改root目录为hexo静态文件的目录,以上面目录举例/var/www/myblog要注意nginx需要有该目录的文件读取权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo chown -R pi:pi /var/www</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227082518.png"><br>重启nginx:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo nginx -s reload</span><br></pre></td></tr></table></figure>
<h4 id="服务端配置完成！！！"><a href="#服务端配置完成！！！" class="headerlink" title="服务端配置完成！！！"></a>服务端配置完成！！！</h4><h3 id="二、客户端配置"><a href="#二、客户端配置" class="headerlink" title="二、客户端配置"></a>二、客户端配置</h3><h4 id="1-通过ssh秘钥和树莓派建立连接"><a href="#1-通过ssh秘钥和树莓派建立连接" class="headerlink" title="1. 通过ssh秘钥和树莓派建立连接"></a>1. 通过ssh秘钥和树莓派建立连接</h4><p><a href="./2020/../../../public/2020/12/31/SSH%E7%A7%98%E9%92%A5%E5%AE%89%E8%A3%85%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/index.html">SSH秘钥连接到服务器</a></p>
<h4 id="2-配置public推送"><a href="#2-配置public推送" class="headerlink" title="2. 配置public推送"></a>2. 配置public推送</h4><p>由于树莓派性能不强劲，所以采用在本机用hexo生成public文件夹。用git提交生成好的public文件夹到树莓派。具体提交方法采用hexo的hexo-deployer-git插件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> myblog</span><br><span class="line">$ vim _config.yml</span><br></pre></td></tr></table></figure>
<p>将deploy配置下的repo参数改为刚刚在树莓派上新建的.myblog路径。<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227082532.png"><br>每次维护完项目后输入: hexo d 即可完成推送。<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227082545.png"></p>
<h5 id="大功告成！！！"><a href="#大功告成！！！" class="headerlink" title="大功告成！！！"></a>大功告成！！！</h5><p>最后附上成果图:<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227082553.png"></p>
]]></content>
      <categories>
        <category>树莓派的反击</category>
      </categories>
      <tags>
        <tag>树莓派服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Git基操</title>
    <url>/2021/01/23/Git%E5%9F%BA%E6%93%8D/</url>
    <content><![CDATA[<h2 id="Git-—-必须得懂的版本管理工具"><a href="#Git-—-必须得懂的版本管理工具" class="headerlink" title="Git — 必须得懂的版本管理工具"></a>Git — 必须得懂的版本管理工具</h2><h3 id="一、-Git最基本操作"><a href="#一、-Git最基本操作" class="headerlink" title="一、 Git最基本操作"></a>一、 Git最基本操作</h3><h4 id="1-初始化git文件夹-—-git-init"><a href="#1-初始化git文件夹-—-git-init" class="headerlink" title="1. 初始化git文件夹 — git init"></a>1. 初始化git文件夹 — git init</h4><p>设项目文件夹为gittest</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> gittest        <span class="comment">#cd到项目文件夹</span></span><br><span class="line">$ git init          <span class="comment">#初始化git文件夹</span></span><br></pre></td></tr></table></figure>
<h4 id="2-查看当前仓库状态-—-git-status"><a href="#2-查看当前仓库状态-—-git-status" class="headerlink" title="2. 查看当前仓库状态 — git status"></a>2. 查看当前仓库状态 — git status</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Git%E5%9F%BA%E6%93%8D/20210227082934.png"></p>
<h4 id="3-添加更改（追踪）-—-git-add"><a href="#3-添加更改（追踪）-—-git-add" class="headerlink" title="3. 添加更改（追踪） — git add ."></a>3. 添加更改（追踪） — git add .</h4><a id="more"></a>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Git%E5%9F%BA%E6%93%8D/20210227083004.png"></p>
<h4 id="4-查看更改内容-—-git-diff"><a href="#4-查看更改内容-—-git-diff" class="headerlink" title="4. 查看更改内容 — git diff"></a>4. 查看更改内容 — git diff</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Git%E5%9F%BA%E6%93%8D/20210227083138.png"><br>按q退出</p>
<h4 id="5-撤回追踪-—-git-reset"><a href="#5-撤回追踪-—-git-reset" class="headerlink" title="5. 撤回追踪 — git reset"></a>5. 撤回追踪 — git reset</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Git%E5%9F%BA%E6%93%8D/20210227083155.png"></p>
<h4 id="6-提交更改-—-git-commit"><a href="#6-提交更改-—-git-commit" class="headerlink" title="6. 提交更改 — git commit"></a>6. 提交更改 — git commit</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;本次提交的描述&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -a     <span class="comment">#自动添加并提交已追踪的修改</span></span><br></pre></td></tr></table></figure>
<h4 id="7-设置一些不提交的文件-—-创建-gitignore"><a href="#7-设置一些不提交的文件-—-创建-gitignore" class="headerlink" title="7. 设置一些不提交的文件 — 创建.gitignore"></a>7. 设置一些不提交的文件 — 创建.gitignore</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rm --cached 文件名        <span class="comment">#删除已经存在的追踪</span></span><br><span class="line">$ vim .gitignore        <span class="comment">#在该文件下写入不想提交的文件名称</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Git%E5%9F%BA%E6%93%8D/20210227083210.png"><br>在.gitignore文件中写入不想提交的文件名<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Git%E5%9F%BA%E6%93%8D/20210227083218.png"><br>git status 查看追踪列表中少了 “nocommit.md”<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Git%E5%9F%BA%E6%93%8D/20210227083233.png"></p>
<h4 id="8-删除已经存在的追踪"><a href="#8-删除已经存在的追踪" class="headerlink" title="8. 删除已经存在的追踪"></a>8. 删除已经存在的追踪</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rm --cached 文件名        <span class="comment">#删除已经存在的追踪</span></span><br></pre></td></tr></table></figure>
<p>从git系统中删除该文件，但依旧存在项目文件夹中，只是停止追踪而已。</p>
<h3 id="二、Git分支-—-不同的时间线"><a href="#二、Git分支-—-不同的时间线" class="headerlink" title="二、Git分支 — 不同的时间线"></a>二、Git分支 — 不同的时间线</h3><p>设新分支名为: newbranch</p>
<h4 id="1-添加新的分支"><a href="#1-添加新的分支" class="headerlink" title="1. 添加新的分支"></a>1. 添加新的分支</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch newbranch</span><br></pre></td></tr></table></figure>
<h4 id="2-查看分支"><a href="#2-查看分支" class="headerlink" title="2. 查看分支"></a>2. 查看分支</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch        <span class="comment">#查看当前项目分支有哪些</span></span><br></pre></td></tr></table></figure>
<h4 id="3-切换分支"><a href="#3-切换分支" class="headerlink" title="3. 切换分支"></a>3. 切换分支</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout newbranch</span><br></pre></td></tr></table></figure>
<h4 id="4-合并分支"><a href="#4-合并分支" class="headerlink" title="4. 合并分支"></a>4. 合并分支</h4><p>在当前分支执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git merge 另一个分支名称</span><br></pre></td></tr></table></figure>
<h4 id="5-删除分支"><a href="#5-删除分支" class="headerlink" title="5. 删除分支"></a>5. 删除分支</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -d newbranch       <span class="comment">#删除已经合并或提交的分支</span></span><br><span class="line">$ git branch -D newbranch2      <span class="comment">#强制删除分支</span></span><br></pre></td></tr></table></figure>
<h3 id="三、Git的提交"><a href="#三、Git的提交" class="headerlink" title="三、Git的提交"></a>三、Git的提交</h3><h4 id="1-指定远程仓库"><a href="#1-指定远程仓库" class="headerlink" title="1. 指定远程仓库"></a>1. 指定远程仓库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add origin https://github......       </span><br></pre></td></tr></table></figure>
<h4 id="2-推送到远程端"><a href="#2-推送到远程端" class="headerlink" title="2. 推送到远程端"></a>2. 推送到远程端</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push --set-upstream origin master</span><br></pre></td></tr></table></figure>
<h4 id="3-下载更新远程端的项目"><a href="#3-下载更新远程端的项目" class="headerlink" title="3. 下载更新远程端的项目"></a>3. 下载更新远程端的项目</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>是基操啦</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo框架搭建个人博客</title>
    <url>/2021/01/02/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="Hexo框架搭建个人博客"><a href="#Hexo框架搭建个人博客" class="headerlink" title="Hexo框架搭建个人博客"></a>Hexo框架搭建个人博客</h2><h3 id="一、安装Hexo"><a href="#一、安装Hexo" class="headerlink" title="一、安装Hexo"></a>一、安装Hexo</h3><h4 id="使用cnpm切换到淘宝源安装"><a href="#使用cnpm切换到淘宝源安装" class="headerlink" title="使用cnpm切换到淘宝源安装"></a>使用cnpm切换到淘宝源安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">安装cnpm并切换到淘宝源:</span><br><span class="line">sudo npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083441.png"></p>
<a id="more"></a>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">用cnpm安装hexo:</span><br><span class="line">sudo cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083456.png"></p>
<h6 id="至此hexo安装完成"><a href="#至此hexo安装完成" class="headerlink" title="至此hexo安装完成"></a>至此hexo安装完成</h6><h3 id="二、Hexo框架的基本使用"><a href="#二、Hexo框架的基本使用" class="headerlink" title="二、Hexo框架的基本使用"></a>二、Hexo框架的基本使用</h3><h5 id="1-新建或打开项目文件夹"><a href="#1-新建或打开项目文件夹" class="headerlink" title="1. 新建或打开项目文件夹"></a>1. 新建或打开项目文件夹</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span></span><br><span class="line">$ mkdir blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure>
<h5 id="2-初始化项目"><a href="#2-初始化项目" class="headerlink" title="2. 初始化项目"></a>2. 初始化项目</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo hexo init</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083506.png"></p>
<h5 id="3-创建文章"><a href="#3-创建文章" class="headerlink" title="3. 创建文章"></a>3. 创建文章</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo hexo n <span class="string">&quot;文章名称&quot;</span>  <span class="comment">#其中的n表示new</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083516.png"></p>
<h5 id="4-启动博客-本地展示预览"><a href="#4-启动博客-本地展示预览" class="headerlink" title="4. 启动博客(本地展示预览)"></a>4. 启动博客(本地展示预览)</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s            <span class="comment">#其中的s表示server</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083527.png"></p>
<h6 id="可以打开浏览器进入-http-localhost-4000-进行预览"><a href="#可以打开浏览器进入-http-localhost-4000-进行预览" class="headerlink" title="可以打开浏览器进入 http://localhost:4000 进行预览"></a>可以打开浏览器进入 <a href="http://localhost:4000/">http://localhost:4000</a> 进行预览</h6><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083537.png"></p>
<h5 id="5-文章路径（位置）"><a href="#5-文章路径（位置）" class="headerlink" title="5. 文章路径（位置）"></a>5. 文章路径（位置）</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls ~/blog/<span class="built_in">source</span>/_posts/</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083551.png"></p>
<h5 id="6-生成文章（generate）"><a href="#6-生成文章（generate）" class="headerlink" title="6. 生成文章（generate）"></a>6. 生成文章（generate）</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083600.png"></p>
<h5 id="7-清理缓存"><a href="#7-清理缓存" class="headerlink" title="7. 清理缓存"></a>7. 清理缓存</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/blog</span><br><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083611.png"></p>
<h3 id="三、Hexo的一些插件"><a href="#三、Hexo的一些插件" class="headerlink" title="三、Hexo的一些插件"></a>三、Hexo的一些插件</h3><h4 id="插入图片插件"><a href="#插入图片插件" class="headerlink" title="插入图片插件"></a>插入图片插件</h4><h5 id="1-安装插件，在hexo根目录打开Git-Bash-执行"><a href="#1-安装插件，在hexo根目录打开Git-Bash-执行" class="headerlink" title="1.安装插件，在hexo根目录打开Git Bash,执行"></a>1.安装插件，在hexo根目录打开Git Bash,执行</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<h5 id="2-打开hexo的配置文件-config-yml找到-post-asset-folder，把这个选项从false改成true"><a href="#2-打开hexo的配置文件-config-yml找到-post-asset-folder，把这个选项从false改成true" class="headerlink" title="2. 打开hexo的配置文件_config.yml找到 post_asset_folder，把这个选项从false改成true"></a>2. 打开hexo的配置文件_config.yml找到 post_asset_folder，把这个选项从false改成true</h5><h5 id="3-打开"><a href="#3-打开" class="headerlink" title="3.打开"></a>3.打开</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/node_modules/hexo-asset-image/index.js</span><br></pre></td></tr></table></figure>
<p>将内容更换为下面的代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">var cheerio = require(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line"><span class="keyword">function</span> getPosition(str, m, i) &#123;</span><br><span class="line">  <span class="built_in">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version = String(hexo.version).split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span>(data)&#123;</span><br><span class="line">  var config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">        var link = data.permalink;</span><br><span class="line">    <span class="keyword">if</span>(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</span><br><span class="line">       var beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, 1) + 1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       var beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, 3) + 1;</span><br><span class="line">    // In hexo 3.1.1, the permalink of <span class="string">&quot;about&quot;</span> page is like <span class="string">&quot;.../about/index.html&quot;</span>.</span><br><span class="line">    var endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + 1;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(var i = 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      var $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(this).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">            // For windows style path, we replace <span class="string">&#x27;\&#x27;</span> to <span class="string">&#x27;/&#x27;</span>.</span><br><span class="line">            var src = $(this).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!/http[s]*.*|\/\/.*/.<span class="built_in">test</span>(src) &amp;&amp;</span><br><span class="line">               !/^\s*\//.<span class="built_in">test</span>(src)) &#123;</span><br><span class="line">              // For <span class="string">&quot;about&quot;</span> page, the first part of <span class="string">&quot;src&quot;</span> can<span class="string">&#x27;t be removed.</span></span><br><span class="line"><span class="string">              // In addition, to support multi-level local directory.</span></span><br><span class="line"><span class="string">              var linkArray = link.split(&#x27;</span>/<span class="string">&#x27;).filter(function(elem)&#123;</span></span><br><span class="line"><span class="string">                return elem != &#x27;</span><span class="string">&#x27;;</span></span><br><span class="line"><span class="string">              &#125;);</span></span><br><span class="line"><span class="string">              var srcArray = src.split(&#x27;</span>/<span class="string">&#x27;).filter(function(elem)&#123;</span></span><br><span class="line"><span class="string">                return elem != &#x27;</span><span class="string">&#x27; &amp;&amp; elem != &#x27;</span>.<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">              &#125;);</span></span><br><span class="line"><span class="string">              if(srcArray.length &gt; 1)</span></span><br><span class="line"><span class="string">                srcArray.shift();</span></span><br><span class="line"><span class="string">              src = srcArray.join(&#x27;</span>/<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">              $(this).attr(&#x27;</span>src<span class="string">&#x27;, config.root + link + src);</span></span><br><span class="line"><span class="string">              console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;else&#123;</span></span><br><span class="line"><span class="string">            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span></span><br><span class="line"><span class="string">            console.info&amp;&amp;console.info($(this));</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">      data[key] = $.html();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure>
<h5 id="4-现在就可以插入图片了，比如hexo-new-post-photo之后就在source-posts生成photo-md文件和photo文件夹，我们把要插入的图片复制到photo文件夹内就好了。"><a href="#4-现在就可以插入图片了，比如hexo-new-post-photo之后就在source-posts生成photo-md文件和photo文件夹，我们把要插入的图片复制到photo文件夹内就好了。" class="headerlink" title="4.现在就可以插入图片了，比如hexo new post photo之后就在source/_posts生成photo.md文件和photo文件夹，我们把要插入的图片复制到photo文件夹内就好了。"></a>4.现在就可以插入图片了，比如hexo new post photo之后就在source/_posts生成photo.md文件和photo文件夹，我们把要插入的图片复制到photo文件夹内就好了。</h5><h4 id="Hexo下Git代码提交插件-–-hexo-deployer-git"><a href="#Hexo下Git代码提交插件-–-hexo-deployer-git" class="headerlink" title="Hexo下Git代码提交插件 – hexo-deployer-git"></a>Hexo下Git代码提交插件 – hexo-deployer-git</h4><ol>
<li>输入以下命令安装插件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
<li>修改配置：_config.yml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: &lt;repository url&gt; <span class="comment">#仓库地址</span></span><br><span class="line">  branch: [branch]       <span class="comment">#分支</span></span><br><span class="line">  message: [message]     <span class="comment">#描述</span></span><br></pre></td></tr></table></figure>
<img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083633.png"></li>
<li>生成站点文件并推送至远程库。执行 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure></li>
<li>登入 Github/BitBucket/Gitlab，请在库设置（Repository Settings）中将默认分支设置为_config.yml配置中的分支名称。稍等片刻，您的站点就会显示在您的Github Pages中。<h5 id="这一切是如何发生的？"><a href="#这一切是如何发生的？" class="headerlink" title="这一切是如何发生的？"></a>这一切是如何发生的？</h5>当执行 hexo deploy 时，Hexo 会将 public 目录中的文件和目录推送至 _config.yml 中指定的远端仓库和分支中，并且完全覆盖该分支下的已有内容。<h4 id="Hexo主题安装"><a href="#Hexo主题安装" class="headerlink" title="Hexo主题安装"></a>Hexo主题安装</h4></li>
<li>进入博客所在的文件夹<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> myblog  <span class="comment">#我的博客项目名称为myblog</span></span><br></pre></td></tr></table></figure></li>
<li>从我的gitee仓库中下载主题(gitee快)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://gitee.com/Haikez/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083647.png"></li>
<li>将blog目录下_config.yml里theme的名称由landscape修改为next<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083657.png"></li>
<li>清除hexo缓存使用命令：hexo clear，生成项目文件命令:hexo g,验证主题是否正确启用，命令为：hexo s –debug<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083706.png"><h5 id="大功告成！！！"><a href="#大功告成！！！" class="headerlink" title="大功告成！！！"></a>大功告成！！！</h5></li>
</ol>
]]></content>
      <categories>
        <category>搭建个人博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaDoc生成文档</title>
    <url>/2021/04/16/JavaDoc%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h1 id="JavaDoc生成文档"><a href="#JavaDoc生成文档" class="headerlink" title="JavaDoc生成文档"></a>JavaDoc生成文档</h1><h2 id="JavaDoc可以为类创建文档，生成效果类似于JavaSE-API和开发文档"><a href="#JavaDoc可以为类创建文档，生成效果类似于JavaSE-API和开发文档" class="headerlink" title="JavaDoc可以为类创建文档，生成效果类似于JavaSE API和开发文档"></a>JavaDoc可以为类创建文档，生成效果类似于<a href="https://docs.oracle.com/javase/8/docs/api/">JavaSE API和开发文档</a></h2><h2 id="生成步骤"><a href="#生成步骤" class="headerlink" title="生成步骤"></a>生成步骤</h2><h3 id="1-在类中写入注释"><a href="#1-在类中写入注释" class="headerlink" title="1.在类中写入注释"></a>1.在类中写入注释</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Haikez</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Haikez</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中@后面的内容:<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210416142327.png"></p>
</blockquote>
<a id="more"></a>
<h3 id="2-打开类文件所在位置"><a href="#2-打开类文件所在位置" class="headerlink" title="2.打开类文件所在位置"></a>2.打开类文件所在位置</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210416142520.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210416142824.png"></p>
<h3 id="3-用命令行在当前目录中输入"><a href="#3-用命令行在当前目录中输入" class="headerlink" title="3.用命令行在当前目录中输入"></a>3.用命令行在当前目录中输入</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ javadoc -encoding UTF-8 -charset UTF-8 文件名</span><br></pre></td></tr></table></figure>
<h3 id="4-生成如下的"><a href="#4-生成如下的" class="headerlink" title="4.生成如下的"></a>4.生成如下的</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210416143141.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210416143148.png"></p>
<h3 id="打开index-html就可看到"><a href="#打开index-html就可看到" class="headerlink" title="打开index.html就可看到"></a>打开index.html就可看到</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210416143322.png"></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java方法的定义与调用</title>
    <url>/2021/04/17/Java%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Java方法的定义与调用"><a href="#Java方法的定义与调用" class="headerlink" title="Java方法的定义与调用"></a>Java方法的定义与调用</h1><h2 id="一、方法的定义"><a href="#一、方法的定义" class="headerlink" title="一、方法的定义:"></a>一、方法的定义:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">修饰符 返回值类型 方法名(参数列表) 抛出异常&#123;</span></span><br><span class="line"><span class="comment">    方法体</span></span><br><span class="line"><span class="comment">    return 返回值;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello,world&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="二、方法的调用"><a href="#二、方法的调用" class="headerlink" title="二、方法的调用"></a>二、方法的调用</h2><h3 id="1-如果是静态方法（被static关键字修饰的方法），则可以用类名-方法名直接调用。"><a href="#1-如果是静态方法（被static关键字修饰的方法），则可以用类名-方法名直接调用。" class="headerlink" title="1.如果是静态方法（被static关键字修饰的方法），则可以用类名.方法名直接调用。"></a>1.如果是静态方法（被static关键字修饰的方法），则可以用类名.方法名直接调用。</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Student.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-如果是非静态方法，则需要先实例化类，再进行调用"><a href="#2-如果是非静态方法，则需要先实例化类，再进行调用" class="headerlink" title="2.如果是非静态方法，则需要先实例化类，再进行调用"></a>2.如果是非静态方法，则需要先实例化类，再进行调用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//实例化这个类</span></span><br><span class="line">        <span class="comment">//方法一</span></span><br><span class="line">        <span class="keyword">new</span> Student.say();</span><br><span class="line">        <span class="comment">//方法二</span></span><br><span class="line">        <span class="comment">//对象类型 对象名 = 对象值</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-static关键字"><a href="#3-static关键字" class="headerlink" title="3.static关键字"></a>3.static关键字</h3><h4 id="1-注意点-静态方法和类一起加载的，非静态方法只有在类的实例化之后才存在。"><a href="#1-注意点-静态方法和类一起加载的，非静态方法只有在类的实例化之后才存在。" class="headerlink" title="1. 注意点:静态方法和类一起加载的，非静态方法只有在类的实例化之后才存在。"></a>1. 注意点:静态方法和类一起加载的，非静态方法只有在类的实例化之后才存在。</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417142537.png"></p>
<blockquote>
<p>因此当类中的方法<strong>相互调用</strong>时，只有当这两种方法<strong>都加</strong>或者<strong>都不加</strong> <strong><em>static</em></strong> 修饰， 程序才能通过。</p>
</blockquote>
<h4 id="2-static静态代码块-类的实例化时首先执行静态代码块中的内容，其次是匿名代码块最后是构造方法。但是静态代码块只执行一次，对类再次实例化时不执行。而匿名代码块和构造方法会一直执行。"><a href="#2-static静态代码块-类的实例化时首先执行静态代码块中的内容，其次是匿名代码块最后是构造方法。但是静态代码块只执行一次，对类再次实例化时不执行。而匿名代码块和构造方法会一直执行。" class="headerlink" title="2. static静态代码块:类的实例化时首先执行静态代码块中的内容，其次是匿名代码块最后是构造方法。但是静态代码块只执行一次，对类再次实例化时不执行。而匿名代码块和构造方法会一直执行。"></a>2. static静态代码块:类的实例化时首先执行<em>静态代码块</em>中的内容，其次是<em>匿名代码</em>块最后是<em>构造方法</em>。但是<em>静态代码块只执行一次</em>，对类再次实例化时不执行。而匿名代码块和构造方法会一直执行。</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210419170704.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210419170712.png"></p>
<h4 id="3-static静态导入包"><a href="#3-static静态导入包" class="headerlink" title="3. static静态导入包"></a>3. static静态导入包</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210419170815.png"></p>
<h3 id="4-参数的传递"><a href="#4-参数的传递" class="headerlink" title="4.参数的传递"></a>4.参数的传递</h3><h4 id="1-值传递"><a href="#1-值传递" class="headerlink" title="1.值传递"></a>1.值传递</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417144057.png"></p>
<blockquote>
<p>值传递时方法不改变传入参数的值</p>
</blockquote>
<h4 id="2-引用传递"><a href="#2-引用传递" class="headerlink" title="2.引用传递"></a>2.引用传递</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417144107.png"></p>
<blockquote>
<p>类似于C语言的指针，方法会改变引用类型所指的值。 </p>
</blockquote>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java构造方法</title>
    <url>/2021/04/17/Java%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Java构造方法"><a href="#Java构造方法" class="headerlink" title="Java构造方法"></a>Java构造方法</h1><h2 id="定义-构造方法是在类的实例化时自动调用的方法。"><a href="#定义-构造方法是在类的实例化时自动调用的方法。" class="headerlink" title="定义: 构造方法是在类的实例化时自动调用的方法。"></a>定义: 构造方法是在类的实例化时自动调用的方法。</h2><h2 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h2><h3 id="1-必须与类的名字相同"><a href="#1-必须与类的名字相同" class="headerlink" title="1.必须与类的名字相同"></a>1.必须与类的名字相同</h3><h3 id="2-必须没有返回值类型，也不能写void"><a href="#2-必须没有返回值类型，也不能写void" class="headerlink" title="2.必须没有返回值类型，也不能写void"></a>2.必须没有返回值类型，也不能写void</h3><h2 id="一、无参构造方法"><a href="#一、无参构造方法" class="headerlink" title="一、无参构造方法"></a>一、无参构造方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个类即使什么都不写也会存在一个无参构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="二、有参构造（在定义了一个有参构造方法时，无参构造必须得写！！！）"><a href="#二、有参构造（在定义了一个有参构造方法时，无参构造必须得写！！！）" class="headerlink" title="二、有参构造（在定义了一个有参构造方法时，无参构造必须得写！！！）"></a>二、有参构造（在定义了一个有参构造方法时，无参构造必须得写！！！）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在定义了一个有参构造方法时，无参构造必须得写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="comment">//1.使用new关键字，本质就是在调用构造方法</span></span><br><span class="line">        <span class="comment">//2.构造方法主要是用于初始化值 </span></span><br><span class="line">    &#125; </span><br><span class="line">    System.out.println(person.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三、IDEA快捷生成有-无参构造方法"><a href="#三、IDEA快捷生成有-无参构造方法" class="headerlink" title="三、IDEA快捷生成有/无参构造方法"></a>三、IDEA快捷生成有/无参构造方法</h2><h3 id="Mac下的快捷键-ctrl-enter"><a href="#Mac下的快捷键-ctrl-enter" class="headerlink" title="Mac下的快捷键 ctrl+enter"></a>Mac下的快捷键 <strong><em>ctrl+enter</em></strong></h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417153510.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417153519.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417153525.png"></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java的多态</title>
    <url>/2021/04/19/Java%E7%9A%84%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<h1 id="Java的多态"><a href="#Java的多态" class="headerlink" title="Java的多态"></a>Java的多态</h1><h2 id="一、定义-同一种方法根据发送对象的不同二采取多种不同的行为方式。"><a href="#一、定义-同一种方法根据发送对象的不同二采取多种不同的行为方式。" class="headerlink" title="一、定义:同一种方法根据发送对象的不同二采取多种不同的行为方式。"></a>一、定义:同一种方法根据发送对象的不同二采取多种不同的行为方式。</h2><h2 id="二、一个对象的实际类型是确定的，但可以指向对象的引用类型有很多（父类、有关系的类）。"><a href="#二、一个对象的实际类型是确定的，但可以指向对象的引用类型有很多（父类、有关系的类）。" class="headerlink" title="二、一个对象的实际类型是确定的，但可以指向对象的引用类型有很多（父类、有关系的类）。"></a>二、一个对象的实际类型是确定的，但可以指向对象的引用类型有很多（父类、有关系的类）。</h2><a id="more"></a>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210419152826.png"></p>
<h2 id="三、多态存在的条件"><a href="#三、多态存在的条件" class="headerlink" title="三、多态存在的条件:"></a>三、多态存在的条件:</h2><h3 id="1-有继承关系。"><a href="#1-有继承关系。" class="headerlink" title="1. 有继承关系。"></a>1. 有继承关系。</h3><h3 id="2-子类重写父类方法。"><a href="#2-子类重写父类方法。" class="headerlink" title="2. 子类重写父类方法。"></a>2. 子类重写父类方法。</h3><h3 id="3-父类引用指向子类对象。"><a href="#3-父类引用指向子类对象。" class="headerlink" title="3. 父类引用指向子类对象。"></a>3. 父类引用指向子类对象。</h3><h2 id="父类引用指向子类，实例化产生的对象-Person-s1-new-Student"><a href="#父类引用指向子类，实例化产生的对象-Person-s1-new-Student" class="headerlink" title="父类引用指向子类，实例化产生的对象:Person s1 = new Student();"></a>父类引用指向子类，实例化产生的对象:<em>Person s1 = new Student();</em></h2><h3 id="1-该对象-s1-拥有父类的所有方法（若方法被子类重写，则该方法变成重写后的方法）。"><a href="#1-该对象-s1-拥有父类的所有方法（若方法被子类重写，则该方法变成重写后的方法）。" class="headerlink" title="1. 该对象(s1)拥有父类的所有方法（若方法被子类重写，则该方法变成重写后的方法）。"></a>1. 该对象(<em>s1</em>)拥有父类的所有方法（若方法被子类重写，则该方法变成重写后的方法）。</h3><h3 id="2-该对象-s1-拥有子类重写的父类的方法。"><a href="#2-该对象-s1-拥有子类重写的父类的方法。" class="headerlink" title="2. 该对象(s1)拥有子类重写的父类的方法。"></a>2. 该对象(<em>s1</em>)拥有子类重写的父类的方法。</h3><h3 id="3-该对象-s1-没有子类新增加的方法。"><a href="#3-该对象-s1-没有子类新增加的方法。" class="headerlink" title="3. 该对象(s1)没有子类新增加的方法。"></a>3. 该对象(<em>s1</em>)没有子类新增加的方法。</h3><h3 id="4-父类如果想用子类新增的方法可以用强制类型转换将将其转换为子类引用的类型。"><a href="#4-父类如果想用子类新增的方法可以用强制类型转换将将其转换为子类引用的类型。" class="headerlink" title="4. 父类如果想用子类新增的方法可以用强制类型转换将将其转换为子类引用的类型。"></a>4. 父类如果想用子类<em>新增的方法</em>可以用强制类型转换将将其转换为子类引用的类型。</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210419153910.png"></p>
<h2 id="四、多态的注意事项"><a href="#四、多态的注意事项" class="headerlink" title="四、多态的注意事项:"></a>四、多态的注意事项:</h2><h3 id="1-多态是方法的多态，属性没有多态-！！！"><a href="#1-多态是方法的多态，属性没有多态-！！！" class="headerlink" title="1. 多态是方法的多态，属性没有多态 ！！！"></a>1. 多态是方法的多态，属性没有多态 ！！！</h3><h3 id="2-多态必须是父类和子类或者有联系的类之间的关系，否则会类型转换异常（ClassCastException-）"><a href="#2-多态必须是父类和子类或者有联系的类之间的关系，否则会类型转换异常（ClassCastException-）" class="headerlink" title="2. 多态必须是父类和子类或者有联系的类之间的关系，否则会类型转换异常（ClassCastException!）"></a>2. 多态必须是父类和子类或者有联系的类之间的关系，否则会类型转换异常（ClassCastException!）</h3><h3 id="3-多态存在的条件"><a href="#3-多态存在的条件" class="headerlink" title="3. 多态存在的条件:"></a>3. 多态存在的条件:</h3><ul>
<li>必须要有继承关系</li>
<li>方法需要重写</li>
<li>父类引用指向子类 <strong><em>Father f = new Son();</em></strong></li>
</ul>
<h2 id="五、instanceof关键字-Object-instanceof-Class"><a href="#五、instanceof关键字-Object-instanceof-Class" class="headerlink" title="五、instanceof关键字:Object instanceof Class"></a>五、instanceof关键字:<em>Object instanceof Class</em></h2><h3 id="1-instanceof返回值-（X-instanceof-Y）如果X指向的实际类型是Y的子类或者本身，返回True，否则返回False"><a href="#1-instanceof返回值-（X-instanceof-Y）如果X指向的实际类型是Y的子类或者本身，返回True，否则返回False" class="headerlink" title="1. instanceof返回值:（X instanceof Y）如果X指向的实际类型是Y的子类或者本身，返回True，否则返回False"></a>1. instanceof返回值:（X instanceof Y）如果X指向的实际类型是Y的<em>子类或者本身</em>，返回True，否则返回False</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210419163317.png"> </p>
<h3 id="2-instanceof报错情况-（X-instanceof-Y）如果X的引用类和Y类之间没有父子关系，编译器报错"><a href="#2-instanceof报错情况-（X-instanceof-Y）如果X的引用类和Y类之间没有父子关系，编译器报错" class="headerlink" title="2. instanceof报错情况: （X instanceof Y）如果X的引用类和Y类之间没有父子关系，编译器报错"></a>2. instanceof报错情况: （X instanceof Y）如果X的<em>引用类</em>和Y类之间没有父子关系，编译器报错</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210419162822.png"></p>
<h2 id="六、类型转换-（高类型–-gt-父类，低类型–-gt-子类）"><a href="#六、类型转换-（高类型–-gt-父类，低类型–-gt-子类）" class="headerlink" title="六、类型转换 （高类型–&gt;父类，低类型–&gt;子类）"></a>六、类型转换 （高类型–&gt;父类，低类型–&gt;子类）</h2><h3 id="1-高类型转换为低类型需要强制类型转换"><a href="#1-高类型转换为低类型需要强制类型转换" class="headerlink" title="1. 高类型转换为低类型需要强制类型转换"></a>1. 高类型转换为低类型需要强制类型转换</h3><ul>
<li><h4 id="格式-Student-person"><a href="#格式-Student-person" class="headerlink" title="格式:(Student) person;"></a>格式:(Student) person;</h4></li>
<li><h4 id="高类型转换为低类型会获得子类的新增的方法。"><a href="#高类型转换为低类型会获得子类的新增的方法。" class="headerlink" title="高类型转换为低类型会获得子类的新增的方法。"></a>高类型转换为低类型会获得子类的新增的方法。</h4><h3 id="2-低类型转换为高类型可直接转换"><a href="#2-低类型转换为高类型可直接转换" class="headerlink" title="2. 低类型转换为高类型可直接转换"></a>2. 低类型转换为高类型可直接转换</h3></li>
<li><h4 id="Person-person-new-Student"><a href="#Person-person-new-Student" class="headerlink" title="Person person = new Student();"></a>Person person = new Student();</h4></li>
<li><h4 id="低类型转换为高类型会丢失子类新增-的一些方法。"><a href="#低类型转换为高类型会丢失子类新增-的一些方法。" class="headerlink" title="低类型转换为高类型会丢失子类新增 的一些方法。"></a>低类型转换为高类型会丢失子类新增 的一些方法。</h4><h3 id="3-类型转换的意义-方便方法的调用，减少重复的代码，简洁！"><a href="#3-类型转换的意义-方便方法的调用，减少重复的代码，简洁！" class="headerlink" title="3. 类型转换的意义:方便方法的调用，减少重复的代码，简洁！"></a>3. 类型转换的意义:方便方法的调用，减少重复的代码，简洁！</h3></li>
</ul>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java的封装</title>
    <url>/2021/04/17/Java%E7%9A%84%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h1 id="Java的封装"><a href="#Java的封装" class="headerlink" title="Java的封装"></a>Java的封装</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417212632.png"></p>
<h2 id="重点记住-属性私有，get-set"><a href="#重点记住-属性私有，get-set" class="headerlink" title="重点记住:属性私有，get/set"></a>重点记住:属性私有，get/set</h2><a id="more"></a>
<h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作:"></a>具体操作:</h2><h3 id="1-用private关键字对类中的属性进行修饰，被修饰的属性不能直接被调用。"><a href="#1-用private关键字对类中的属性进行修饰，被修饰的属性不能直接被调用。" class="headerlink" title="1. 用private关键字对类中的属性进行修饰，被修饰的属性不能直接被调用。"></a>1. 用private关键字对类中的属性进行修饰，被修饰的属性不能直接被调用。</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417213825.png"></p>
<h3 id="2-在本类中提供一些set、get方法可以操作该属性。"><a href="#2-在本类中提供一些set、get方法可以操作该属性。" class="headerlink" title="2. 在本类中提供一些set、get方法可以操作该属性。"></a>2. 在本类中提供一些set、get方法可以操作该属性。</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417214414.png"></p>
<h3 id="3-IDEA一键生成get-set方法。"><a href="#3-IDEA一键生成get-set方法。" class="headerlink" title="3.IDEA一键生成get/set方法。"></a>3.IDEA一键生成get/set方法。</h3><h4 id="Mac下按ctrl-enter"><a href="#Mac下按ctrl-enter" class="headerlink" title="Mac下按ctrl+enter"></a>Mac下按ctrl+enter</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417214718.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417214841.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417214851.png"></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java的抽象类和接口</title>
    <url>/2021/04/20/Java%E7%9A%84%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="一、Java的抽象类"><a href="#一、Java的抽象类" class="headerlink" title="一、Java的抽象类"></a>一、Java的抽象类</h1><h2 id="抽象类的知识点"><a href="#抽象类的知识点" class="headerlink" title="抽象类的知识点:"></a>抽象类的知识点:</h2><ol>
<li>public <strong>abstract</strong> class 类名 {} 。</li>
<li>抽象类里可以写<strong>普通方法</strong>和<strong>抽象方法</strong>。</li>
<li>抽象类<strong>不能被实例化</strong>！！！</li>
<li>抽象类的使用：通过别的类<strong>继承</strong>抽像类并<strong>必须</strong>对类中的<strong>抽象方法</strong>进行<strong>重写</strong>。</li>
<li>抽象类的抽象方法在本类中<strong>不一定要实现</strong>。</li>
<li>抽象类是一种<strong>约束</strong>，规定本类中必须要有的一些方法。<h2 id="抽象类的定义-abstract关键字"><a href="#抽象类的定义-abstract关键字" class="headerlink" title="抽象类的定义(abstract关键字):"></a>抽象类的定义(abstract关键字):</h2><a id="more"></a>
<h3 id="abstract关键字"><a href="#abstract关键字" class="headerlink" title="abstract关键字:"></a>abstract关键字:</h3><h4 id="1-定义一个类："><a href="#1-定义一个类：" class="headerlink" title="1. 定义一个类："></a>1. 定义一个类：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123; </span><br><span class="line">&#125; <span class="comment">/*被abstract关键字修饰的类不能被实例化，</span></span><br><span class="line"><span class="comment">只能作为父类被别的类继承使用*/</span></span><br></pre></td></tr></table></figure>
<h4 id="2-通过abstract关键字定义抽象方法"><a href="#2-通过abstract关键字定义抽象方法" class="headerlink" title="2. 通过abstract关键字定义抽象方法:"></a>2. 通过abstract关键字定义抽象方法:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">/*被abstract关键字修饰的方法无需写方法体，</span></span><br><span class="line"><span class="comment">因为当别的类继承本类时，该方法一定要被重写。*/</span></span><br></pre></td></tr></table></figure>
<h2 id="抽象类的使用：因为抽象类不能被实例化为对象，因此只能作为父类被别的类继承。并且子类必须重写父类的所有抽象方法！！！"><a href="#抽象类的使用：因为抽象类不能被实例化为对象，因此只能作为父类被别的类继承。并且子类必须重写父类的所有抽象方法！！！" class="headerlink" title="抽象类的使用：因为抽象类不能被实例化为对象，因此只能作为父类被别的类继承。并且子类必须重写父类的所有抽象方法！！！"></a>抽象类的使用：因为抽象类不能被实例化为对象，因此只能作为父类被别的类继承。并且子类必须重写父类的所有抽象方法！！！</h2><h2 id="抽象类与抽象方法："><a href="#抽象类与抽象方法：" class="headerlink" title="抽象类与抽象方法："></a>抽象类与抽象方法：</h2><h3 id="1-抽象类中可以写一些普通方法，并且子类继承抽象类后这些普通方法无需重写"><a href="#1-抽象类中可以写一些普通方法，并且子类继承抽象类后这些普通方法无需重写" class="headerlink" title="1. 抽象类中可以写一些普通方法，并且子类继承抽象类后这些普通方法无需重写"></a>1. 抽象类中可以写一些普通方法，并且子类继承抽象类后这些普通方法<em>无需重写</em></h3><h3 id="2-抽象类中可以没有抽象方法，但是有抽象方法的类一定是抽象类。"><a href="#2-抽象类中可以没有抽象方法，但是有抽象方法的类一定是抽象类。" class="headerlink" title="2. 抽象类中可以没有抽象方法，但是有抽象方法的类一定是抽象类。"></a>2. 抽象类中可以没有抽象方法，但是有抽象方法的类一定是抽象类。</h3><h1 id="二、Java的接口"><a href="#二、Java的接口" class="headerlink" title="二、Java的接口"></a>二、Java的接口</h1><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210420155818.png"><h2 id="接口的知识点"><a href="#接口的知识点" class="headerlink" title="接口的知识点:"></a>接口的知识点:</h2></li>
<li>public interface 接口名 {}</li>
<li>接口完全只是约束。接口中的所有方法都无需具体实现。</li>
<li>接口<strong>不能被实例化</strong>！！！</li>
<li>接口中的所有方法默认都用 <strong><em>public abstract</em></strong> 修饰。</li>
<li>接口都要有<strong>实现类</strong>来实现，实现接口的关键字 <strong><em>implements</em></strong> 。</li>
<li>接口的实现类本质就是对接口中<strong>所有方法的重写</strong>。</li>
<li><em>接口中定义的变量都是常量（ **</em>public static final*** ）<h2 id="接口的定义-public-interface-接口名"><a href="#接口的定义-public-interface-接口名" class="headerlink" title="接口的定义: public interface 接口名{}"></a>接口的定义: public interface 接口名{}</h2><h3 id="interface关键字"><a href="#interface关键字" class="headerlink" title="interface关键字"></a>interface关键字</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名</span>&#123;</span><br><span class="line">&#125; <span class="comment">//通过interface关键字定义接口</span></span><br></pre></td></tr></table></figure>
<h2 id="接口的使用"><a href="#接口的使用" class="headerlink" title="接口的使用"></a>接口的使用</h2><h3 id="implements关键字"><a href="#implements关键字" class="headerlink" title="implements关键字"></a>implements关键字</h3><h4 id="1-implements实现接口"><a href="#1-implements实现接口" class="headerlink" title="1. implements实现接口"></a>1. implements实现接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 实现类 <span class="keyword">implements</span> 接口1,接口2</span>&#123;</span><br><span class="line">&#125; <span class="comment">/*实现类通过implements关键字实现接口。</span></span><br><span class="line"><span class="comment">接口的实现类必须对接口中的所有方法的重写!!!*/</span></span><br></pre></td></tr></table></figure>
<h4 id="2-implements可以同时实现多个接口"><a href="#2-implements可以同时实现多个接口" class="headerlink" title="2. implements可以同时实现多个接口"></a>2. implements可以同时实现多个接口</h4></li>
</ol>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java的继承</title>
    <url>/2021/04/17/Java%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h1 id="一、Java的继承"><a href="#一、Java的继承" class="headerlink" title="一、Java的继承"></a>一、Java的继承</h1><h2 id="1-继承的本质是对某一批类的抽象，从而实现对世界更好的建模。"><a href="#1-继承的本质是对某一批类的抽象，从而实现对世界更好的建模。" class="headerlink" title="1. 继承的本质是对某一批类的抽象，从而实现对世界更好的建模。"></a>1. 继承的本质是对某一批类的抽象，从而实现对世界更好的建模。</h2><h2 id="2-子类继承父类，子类可拥有父类中所有的属性和方法。"><a href="#2-子类继承父类，子类可拥有父类中所有的属性和方法。" class="headerlink" title="2. 子类继承父类，子类可拥有父类中所有的属性和方法。"></a>2. 子类继承父类，子类可拥有父类中所有的属性和方法。</h2><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417221138.png"></p>
<a id="more"></a>
<h2 id="3-父类中的属性也可以用private关键字修复，从而达到封装的效果。"><a href="#3-父类中的属性也可以用private关键字修复，从而达到封装的效果。" class="headerlink" title="3. 父类中的属性也可以用private关键字修复，从而达到封装的效果。"></a>3. 父类中的属性也可以用private关键字修复，从而达到封装的效果。</h2><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417221441.png"></p>
<h2 id="4-IDEA中按ctrl-h可以快速查看继承列表。"><a href="#4-IDEA中按ctrl-h可以快速查看继承列表。" class="headerlink" title="4. IDEA中按ctrl+h可以快速查看继承列表。"></a>4. IDEA中按ctrl+h可以快速查看继承列表。</h2><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417221729.png"></p>
<h2 id="5-父类可以不写无参构造但是子类必须调用父类的有参构造"><a href="#5-父类可以不写无参构造但是子类必须调用父类的有参构造" class="headerlink" title="5. 父类可以不写无参构造但是子类必须调用父类的有参构造"></a>5. 父类可以不写无参构造但是子类必须调用父类的有参构造</h2><h2 id="6-this关键-amp-super关键字"><a href="#6-this关键-amp-super关键字" class="headerlink" title="6. this关键&amp;super关键字"></a>6. this关键&amp;super关键字</h2><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字:"></a>this关键字:</h3><ol>
<li>通过 <strong><em>this.</em></strong> 的方式可以访问<strong>本类中</strong>的成员变量和成员方法</li>
<li><strong><em>this();</em></strong> 方法是调用<strong>本类</strong>的 <strong><em>构造方法</em></strong><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字:"></a>super关键字:</h3></li>
<li>在<strong>子类中</strong>通过 <strong><em>super.</em></strong> 的方式会调用父类中的成员变量和成员方法。</li>
<li><strong><em>super();</em></strong> 方法是调用<strong>父类</strong>的 <strong><em>构造方法</em></strong> ，必须在方法的第一个执行。</li>
<li>super不能访问父类中的私有属性。<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210419105757.png"></li>
<li>super();和this();不能同时调用！！！<h2 id="7-子类的实例化时会优先执行父类的构造方法。"><a href="#7-子类的实例化时会优先执行父类的构造方法。" class="headerlink" title="7. 子类的实例化时会优先执行父类的构造方法。"></a>7. 子类的实例化时会优先执行父类的构造方法。</h2><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210419110035.png"><h1 id="二、-方法的重写"><a href="#二、-方法的重写" class="headerlink" title="二、 方法的重写"></a>二、 方法的重写</h1><h2 id="重写：需要有继承关系，子类重写父类的方法！"><a href="#重写：需要有继承关系，子类重写父类的方法！" class="headerlink" title="重写：需要有继承关系，子类重写父类的方法！"></a>重写：需要有继承关系，子类重写父类的方法！</h2><h2 id="重写的要求-（子类和父类的方法一致，方法体不同！）"><a href="#重写的要求-（子类和父类的方法一致，方法体不同！）" class="headerlink" title="重写的要求:（子类和父类的方法一致，方法体不同！）"></a>重写的要求:（子类和父类的方法一致，方法体不同！）</h2><h3 id="1-方法名必须相同"><a href="#1-方法名必须相同" class="headerlink" title="1. 方法名必须相同"></a>1. 方法名必须相同</h3><h3 id="2-参数列表必须相同（否则就成了方法重载，方法重载针对的是当前方法）"><a href="#2-参数列表必须相同（否则就成了方法重载，方法重载针对的是当前方法）" class="headerlink" title="2. 参数列表必须相同（否则就成了方法重载，方法重载针对的是当前方法）"></a>2. 参数列表必须相同（否则就成了方法重载，方法重载针对的是当前方法）</h3><h3 id="3-修饰符-范围可以扩大-但不能缩小-public-gt-protected-gt-default-gt-private"><a href="#3-修饰符-范围可以扩大-但不能缩小-public-gt-protected-gt-default-gt-private" class="headerlink" title="3. 修饰符:范围可以扩大,但不能缩小:public&gt;protected&gt;default&gt;private"></a>3. 修饰符:范围可以扩大,但不能缩小:public&gt;protected&gt;default&gt;private</h3><h3 id="4-抛出的异常-范围可以被缩小，但不能扩大"><a href="#4-抛出的异常-范围可以被缩小，但不能扩大" class="headerlink" title="4. 抛出的异常:范围可以被缩小，但不能扩大"></a>4. 抛出的异常:范围可以被缩小，但不能扩大</h3><h2 id="重写的意义"><a href="#重写的意义" class="headerlink" title="重写的意义:"></a>重写的意义:</h2><h3 id="1-父类的功能，子类不一定需要。"><a href="#1-父类的功能，子类不一定需要。" class="headerlink" title="1. 父类的功能，子类不一定需要。"></a>1. 父类的功能，子类不一定需要。</h3></li>
</ol>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Lazygit基操</title>
    <url>/2021/01/23/Lazygit%E5%9F%BA%E6%93%8D/</url>
    <content><![CDATA[<h2 id="Lazygit-—-懒人必备的Git客户端"><a href="#Lazygit-—-懒人必备的Git客户端" class="headerlink" title="Lazygit — 懒人必备的Git客户端"></a>Lazygit — 懒人必备的Git客户端</h2><p>! ! ! (用 x 查看各个面板帮助)</p>
<h3 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h3><h4 id="1-Lazygit下载"><a href="#1-Lazygit下载" class="headerlink" title="1. Lazygit下载"></a>1. Lazygit下载</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">下载地址：</span><br><span class="line">https://github.com/jesseduffield/lazygit</span><br></pre></td></tr></table></figure>
<h4 id="2-打开"><a href="#2-打开" class="headerlink" title="2. 打开"></a>2. 打开</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lazygit</span><br></pre></td></tr></table></figure>
<h3 id="二、-Stage-操作"><a href="#二、-Stage-操作" class="headerlink" title="二、 Stage 操作"></a>二、 Stage 操作</h3><h4 id="1-全部-stage-unstage-—-a"><a href="#1-全部-stage-unstage-—-a" class="headerlink" title="1. 全部 stage/unstage — a"></a>1. 全部 stage/unstage — a</h4><h4 id="相当于git-add"><a href="#相当于git-add" class="headerlink" title="(相当于git add .)"></a>(相当于git add .)</h4><p><img src="/2021/01/23/Lazygit%E5%9F%BA%E6%93%8D/Jan-24-2021%2013-20-15.gif"></p>
<a id="more"></a>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084430.png"></p>
<h4 id="2-可以用空格逐个stage"><a href="#2-可以用空格逐个stage" class="headerlink" title="2. 可以用空格逐个stage"></a>2. 可以用空格逐个stage</h4><p><img src="/2021/01/23/Lazygit%E5%9F%BA%E6%93%8D/Jan-24-2021%2013-23-31.gif"></p>
<h4 id="3-H和L键可以实现左侧面板间的切换"><a href="#3-H和L键可以实现左侧面板间的切换" class="headerlink" title="3. H和L键可以实现左侧面板间的切换"></a>3. H和L键可以实现左侧面板间的切换</h4><p><img src="/2021/01/23/Lazygit%E5%9F%BA%E6%93%8D/Jan-26-2021%2020-30-36.gif"></p>
<h4 id="4-J和K键可以实现面板内文件的选择"><a href="#4-J和K键可以实现面板内文件的选择" class="headerlink" title="4. J和K键可以实现面板内文件的选择"></a>4. J和K键可以实现面板内文件的选择</h4><p><img src="/2021/01/23/Lazygit%E5%9F%BA%E6%93%8D/Jan-26-2021%2020-36-31.gif"></p>
<h5 id="按回车可以进入到选中的文件（按esc可以退回到主面板）"><a href="#按回车可以进入到选中的文件（按esc可以退回到主面板）" class="headerlink" title="按回车可以进入到选中的文件（按esc可以退回到主面板）"></a>按回车可以进入到选中的文件（按esc可以退回到主面板）</h5><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084524.png"></p>
<h5 id="按Tab键可以切换Stage-Unstage面板"><a href="#按Tab键可以切换Stage-Unstage面板" class="headerlink" title="按Tab键可以切换Stage/Unstage面板"></a>按Tab键可以切换Stage/Unstage面板</h5><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084531.gif"></p>
<h5 id="按d可以彻底删除Unstage中的修改内容"><a href="#按d可以彻底删除Unstage中的修改内容" class="headerlink" title="按d可以彻底删除Unstage中的修改内容"></a>按d可以彻底删除Unstage中的修改内容</h5><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084542.png"></p>
<h3 id="三、-Branch-操作"><a href="#三、-Branch-操作" class="headerlink" title="三、 Branch 操作"></a>三、 Branch 操作</h3><h4 id="1-创建分支-—-n"><a href="#1-创建分支-—-n" class="headerlink" title="1. 创建分支 — n"></a>1. 创建分支 — n</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084616.png"></p>
<h4 id="2-选中分支-—-空格"><a href="#2-选中分支-—-空格" class="headerlink" title="2. 选中分支 — 空格"></a>2. 选中分支 — 空格</h4><h4 id="3-弱删除当前分支-—-d"><a href="#3-弱删除当前分支-—-d" class="headerlink" title="3. 弱删除当前分支 — d"></a>3. 弱删除当前分支 — d</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084635.png"><br>（强删除未保存的分支 — D）</p>
<h4 id="4-重命名当前分支-—-R"><a href="#4-重命名当前分支-—-R" class="headerlink" title="4. 重命名当前分支 — R"></a>4. 重命名当前分支 — R</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084650.png"></p>
<h4 id="5-选择分支合并到当前分支-—-M"><a href="#5-选择分支合并到当前分支-—-M" class="headerlink" title="5.选择分支合并到当前分支 — M"></a>5.选择分支合并到当前分支 — M</h4><ol>
<li>将光标选中子分支<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084704.png"></li>
<li>按M将子分支合并到当前分支<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084715.png"><h4 id="6-切换管理远程仓库-—"><a href="#6-切换管理远程仓库-—" class="headerlink" title="6. 切换管理远程仓库 — [ ]"></a>6. 切换管理远程仓库 — [ ]</h4><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084724.png"><h3 id="四、-Commit-操作"><a href="#四、-Commit-操作" class="headerlink" title="四、 Commit 操作"></a>四、 Commit 操作</h3>Commit 面板 :<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084735.png"></li>
</ol>
<h4 id="1-按c可以提交本次更改"><a href="#1-按c可以提交本次更改" class="headerlink" title="1. 按c可以提交本次更改"></a>1. 按c可以提交本次更改</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084755.png"></p>
<h4 id="2-提交回滚-—-空格"><a href="#2-提交回滚-—-空格" class="headerlink" title="2. 提交回滚 — 空格"></a>2. 提交回滚 — 空格</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084828.png"><br>lazygit回跳转到对应的提交，并新建一个新分支缓存，新建分支并合并即可保存。<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084841.png"></p>
<h4 id="3-重置提交-—-g"><a href="#3-重置提交-—-g" class="headerlink" title="3. 重置提交 — g"></a>3. 重置提交 — g</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084850.png"></p>
<h4 id="4-多分支间复制粘贴提交"><a href="#4-多分支间复制粘贴提交" class="headerlink" title="4. 多分支间复制粘贴提交"></a>4. 多分支间复制粘贴提交</h4><p>复制 — c<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084858.png"><br>粘贴 — v<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084904.png"></p>
<h4 id="5-批量操作commit-—-e"><a href="#5-批量操作commit-—-e" class="headerlink" title="5. 批量操作commit — e"></a>5. 批量操作commit — e</h4><ol>
<li><p>选中一个 commit 按 e 可以对上方几个commit进行批量管理<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084927.png"></p>
<table>
<thead>
<tr>
<th align="center">功能</th>
<th align="center">含义</th>
<th align="center">按键</th>
</tr>
</thead>
<tbody><tr>
<td align="center">pick</td>
<td align="center">无操作</td>
<td align="center">p</td>
</tr>
<tr>
<td align="center">drop</td>
<td align="center">删除</td>
<td align="center">d</td>
</tr>
<tr>
<td align="center">squash</td>
<td align="center">向下合并提交</td>
<td align="center">s</td>
</tr>
</tbody></table>
</li>
<li><p>按 m 执行操作<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084937.png"></p>
<h4 id="6-Reflog-面板（历史记录面板）"><a href="#6-Reflog-面板（历史记录面板）" class="headerlink" title="6. Reflog 面板（历史记录面板）"></a>6. Reflog 面板（历史记录面板）</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084946.png"><br>基本操作如下:<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084954.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>是基操啦</category>
      </categories>
      <tags>
        <tag>Lazygit</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown基本操作</title>
    <url>/2021/04/16/Markdown%E5%9F%BA%E6%93%8D%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="#这是一级标题"></a>#这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="##这是二级标题"></a>##这是二级标题</h2><h2 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="###这是三级标题"></a>###这是三级标题</h2><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>** <strong>Hello,World(粗体)</strong> **<br><strong>* *</strong>Hello,World(斜体加粗)<strong>* *</strong><br>*<em>Hello,World(斜体)</em> *<br>~~ <del>Hello,World(删除线)</del> ~~</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote>
<p>这是一段引用</p>
</blockquote>
<a id="more"></a>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr>
<p>(—)</p>
<hr>
<p>(***)</p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol>
<li>A</li>
<li>B</li>
<li>C</li>
</ol>
<ul>
<li>A</li>
<li>B</li>
<li>C<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><a href="https://www.baidu.com/">超链接</a></li>
</ul>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table>
<thead>
<tr>
<th>姓名</th>
<th>性别</th>
<th>生日</th>
</tr>
</thead>
<tbody><tr>
<td>张三</td>
<td>男</td>
<td>2001</td>
</tr>
</tbody></table>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>是基操啦</category>
      </categories>
      <tags>
        <tag>Markdown基操</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo+Github白嫖图床</title>
    <url>/2021/02/17/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h2 id="PicGo-Github白嫖图床"><a href="#PicGo-Github白嫖图床" class="headerlink" title="PicGo+Github白嫖图床"></a>PicGo+Github白嫖图床</h2><h3 id="一、简介："><a href="#一、简介：" class="headerlink" title="一、简介："></a>一、简介：</h3><h4 id="图床就是个人云图库，我们可以把照片放到图床里，图床就会为照片生成超链接，我们通过浏览器就能访问到里面的照片，非常方便！所以图床几乎成了各大博主开发个人博客的必备工具。但这样的云服务几乎都是收费的。然而Github这个开源的云仓库为免费图床的搭建提供了平台。"><a href="#图床就是个人云图库，我们可以把照片放到图床里，图床就会为照片生成超链接，我们通过浏览器就能访问到里面的照片，非常方便！所以图床几乎成了各大博主开发个人博客的必备工具。但这样的云服务几乎都是收费的。然而Github这个开源的云仓库为免费图床的搭建提供了平台。" class="headerlink" title="图床就是个人云图库，我们可以把照片放到图床里，图床就会为照片生成超链接，我们通过浏览器就能访问到里面的照片，非常方便！所以图床几乎成了各大博主开发个人博客的必备工具。但这样的云服务几乎都是收费的。然而Github这个开源的云仓库为免费图床的搭建提供了平台。"></a>图床就是个人云图库，我们可以把照片放到图床里，图床就会为照片生成超链接，我们通过浏览器就能访问到里面的照片，非常方便！所以图床几乎成了各大博主开发个人博客的必备工具。但这样的云服务几乎都是收费的。然而Github这个开源的云仓库为免费图床的搭建提供了平台。</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085305.jpg"></p>
<a id="more"></a>
<h3 id="二、Github图床的搭建"><a href="#二、Github图床的搭建" class="headerlink" title="二、Github图床的搭建"></a>二、Github图床的搭建</h3><h4 id="大体思路："><a href="#大体思路：" class="headerlink" title="大体思路："></a>大体思路：</h4><h5 id="新建一个Github仓库当做图床的上传空间，创建一个github的token-私人领牌-用于PicGo登录设置。解决github访问异常的问题。"><a href="#新建一个Github仓库当做图床的上传空间，创建一个github的token-私人领牌-用于PicGo登录设置。解决github访问异常的问题。" class="headerlink" title="新建一个Github仓库当做图床的上传空间，创建一个github的token(私人领牌)用于PicGo登录设置。解决github访问异常的问题。"></a>新建一个Github仓库当做图床的上传空间，创建一个github的token(私人领牌)用于PicGo登录设置。解决github访问异常的问题。</h5><h4 id="1-新建一个github仓库"><a href="#1-新建一个github仓库" class="headerlink" title="1. 新建一个github仓库"></a>1. 新建一个github仓库</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085319.png"></p>
<h4 id="2-创建私人令牌"><a href="#2-创建私人令牌" class="headerlink" title="2. 创建私人令牌"></a>2. 创建私人令牌</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085337.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085346.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085354.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085404.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085413.png"></p>
<h4 id="3-复制创建好的私人令牌"><a href="#3-复制创建好的私人令牌" class="headerlink" title="3. 复制创建好的私人令牌"></a>3. 复制创建好的私人令牌</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085421.png"></p>
<h4 id="4-下载并安装PicGo"><a href="#4-下载并安装PicGo" class="headerlink" title="4. 下载并安装PicGo"></a>4. 下载并安装PicGo</h4><h4 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a><a href="https://picgo.github.io/PicGo-Doc/zh/guide/">PicGo</a></h4><h4 id="5-配置PicGo"><a href="#5-配置PicGo" class="headerlink" title="5. 配置PicGo"></a>5. 配置PicGo</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085430.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085437.png"></p>
<h4 id="6-配置完成"><a href="#6-配置完成" class="headerlink" title="6. 配置完成"></a>6. 配置完成</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085448.gif"></p>
<h4 id="7-解决raw-githubusercontent-com访问不了的问题"><a href="#7-解决raw-githubusercontent-com访问不了的问题" class="headerlink" title="7. 解决raw.githubusercontent.com访问不了的问题"></a>7. 解决<code>raw.githubusercontent.com</code>访问不了的问题</h4><ul>
<li>打开<br><a href="https://site.ip138.com/raw.Githubusercontent.com/">https://site.ip138.com/raw.Githubusercontent.com/</a></li>
<li>输入<code>raw.githubusercontent.com</code></li>
<li>查询IP地址</li>
</ul>
<p>修改hosts Ubuntu，CentOS及macOS直接在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/hosts</span><br></pre></td></tr></table></figure>
<p>在最后一行加入:<br><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085510.png"><br>保存退出并重启</p>
<h3 id="三、-Gitee图床的搭建"><a href="#三、-Gitee图床的搭建" class="headerlink" title="三、 Gitee图床的搭建"></a>三、 Gitee图床的搭建</h3><h4 id="Gitee也可以搭建图床，搭建步骤和Github雷同。并相比于Github，Gitee速度更快并且没有类似github被墙的问题。因此本人更青睐于使用Gitee图床。"><a href="#Gitee也可以搭建图床，搭建步骤和Github雷同。并相比于Github，Gitee速度更快并且没有类似github被墙的问题。因此本人更青睐于使用Gitee图床。" class="headerlink" title="Gitee也可以搭建图床，搭建步骤和Github雷同。并相比于Github，Gitee速度更快并且没有类似github被墙的问题。因此本人更青睐于使用Gitee图床。"></a>Gitee也可以搭建图床，搭建步骤和Github雷同。并相比于Github，Gitee速度更快并且没有类似github被墙的问题。因此本人更青睐于使用Gitee图床。</h4><h4 id="1-创建Gitee仓库"><a href="#1-创建Gitee仓库" class="headerlink" title="1. 创建Gitee仓库"></a>1. 创建Gitee仓库</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085519.png"></p>
<h4 id="2-创建Gitee私人令牌"><a href="#2-创建Gitee私人令牌" class="headerlink" title="2. 创建Gitee私人令牌"></a>2. 创建Gitee私人令牌</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085534.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085604.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085612.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085612.png"></p>
<h4 id="3-配置PicGo"><a href="#3-配置PicGo" class="headerlink" title="3. 配置PicGo"></a>3. 配置PicGo</h4><ul>
<li>安装插件<br><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085628.png"></li>
<li>配置<br><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085635.png"></li>
</ul>
]]></content>
      <categories>
        <category>搭建个人博客</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH秘钥安装到服务器</title>
    <url>/2020/12/31/SSH%E7%A7%98%E9%92%A5%E5%AE%89%E8%A3%85%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="SSH秘钥安装到服务器"><a href="#SSH秘钥安装到服务器" class="headerlink" title="SSH秘钥安装到服务器"></a>SSH秘钥安装到服务器</h2><h3 id="一、本机秘钥生成"><a href="#一、本机秘钥生成" class="headerlink" title="一、本机秘钥生成"></a>一、本机秘钥生成</h3><p>终端输入:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen </span><br></pre></td></tr></table></figure>
<p>执行这条命令后会在宿主目录内生成.ssh文件夹里面包含公钥和私钥<br><img src="https://gitee.com/Haikez/images_bed/raw/master/SSH%E7%A7%98%E9%92%A5%E5%AE%89%E8%A3%85%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227085743.png"></p>
<a id="more"></a>

<p>输入:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>将显示的结果拷贝下来<br><img src="https://gitee.com/Haikez/images_bed/raw/master/SSH%E7%A7%98%E9%92%A5%E5%AE%89%E8%A3%85%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227085728.png"></p>
<h3 id="二、在服务器上安装秘钥"><a href="#二、在服务器上安装秘钥" class="headerlink" title="二、在服务器上安装秘钥"></a>二、在服务器上安装秘钥</h3><p>键入以下命令，在服务器上安装公钥：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> .ssh <span class="comment">#如没有.ssh文件夹请新建</span></span><br><span class="line">$ vim authorized_keys <span class="comment">#把刚刚拷贝的公钥粘贴到里面</span></span><br></pre></td></tr></table></figure>
<p>如此便完成了公钥的安装。为了确保连接成功，请保证以下文件权限正确：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chmod 600 authorized_keys</span><br><span class="line">$ chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure>
<h3 id="三、设置-SSH，打开密钥登录功能"><a href="#三、设置-SSH，打开密钥登录功能" class="headerlink" title="三、设置 SSH，打开密钥登录功能"></a>三、设置 SSH，打开密钥登录功能</h3><p>编辑 /etc/ssh/sshd_config 文件，进行如下设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br></pre></td></tr></table></figure>
<p>另外，请留意 root 用户能否通过 SSH 登录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure>
<p>当你完成全部设置，并以密钥方式登录成功后，再禁用密码登录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PasswordAuthentication no <span class="comment">#可不设置</span></span><br></pre></td></tr></table></figure>
<p>最后，重启 SSH 服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ service sshd restart</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux学习</category>
      </categories>
      <tags>
        <tag>SSH秘钥管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Termux牛X的安卓终端</title>
    <url>/2021/02/06/Termux%E7%89%9BX%E7%9A%84%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AF/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>Termux</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派系统安装和基本配置</title>
    <url>/2020/12/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="树莓派系统安装、"><a href="#树莓派系统安装、" class="headerlink" title="树莓派系统安装、"></a>树莓派系统安装、</h2><h3 id="需要的工具："><a href="#需要的工具：" class="headerlink" title="需要的工具："></a>需要的工具：</h3><ol>
<li>树莓派一个</li>
<li>8G以上SD卡一张</li>
<li>读卡器</li>
<li>电脑<h3 id="1-树莓派系统下载"><a href="#1-树莓派系统下载" class="headerlink" title="1. 树莓派系统下载:"></a>1. 树莓派系统下载:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">系统下载地址:https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;raspberry-pi-os-images&#x2F;raspios_armhf&#x2F;images&#x2F;raspios_armhf-2020-12-04&#x2F;2020-12-02-raspios-buster-armhf.zip</span><br></pre></td></tr></table></figure>
<img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/20210227081725.png"><a id="more"></a>

</li>
</ol>
<h3 id="2-烧录树莓派系统"><a href="#2-烧录树莓派系统" class="headerlink" title="2. 烧录树莓派系统"></a>2. 烧录树莓派系统</h3><h4 id="需要的软件"><a href="#需要的软件" class="headerlink" title="需要的软件:"></a>需要的软件:</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/20210227081637.png"></p>
<h4 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址:"></a>下载地址:</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>www.balena.io<span class="regexp">/etcher/</span></span><br></pre></td></tr></table></figure>
<h4 id="烧录镜像"><a href="#烧录镜像" class="headerlink" title="烧录镜像:"></a>烧录镜像:</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/20210227081652.png"></p>
<h4 id="烧录完成后重新插拔读卡器"><a href="#烧录完成后重新插拔读卡器" class="headerlink" title="烧录完成后重新插拔读卡器"></a>烧录完成后重新插拔读卡器</h4><h3 id="3-开启ssh服务"><a href="#3-开启ssh服务" class="headerlink" title="3. 开启ssh服务"></a>3. 开启ssh服务</h3><h4 id="新建文件名为ssh的文件。"><a href="#新建文件名为ssh的文件。" class="headerlink" title="新建文件名为ssh的文件。"></a>新建文件名为ssh的文件。</h4><h4 id="将ssh文件拖入SD卡的boot分区。"><a href="#将ssh文件拖入SD卡的boot分区。" class="headerlink" title="将ssh文件拖入SD卡的boot分区。"></a>将ssh文件拖入SD卡的boot分区。</h4><h3 id="4-使树莓派开机自动连接Wi-Fi"><a href="#4-使树莓派开机自动连接Wi-Fi" class="headerlink" title="4. 使树莓派开机自动连接Wi-Fi"></a>4. 使树莓派开机自动连接Wi-Fi</h3><h4 id="新建名为wpa-supplicant-conf的文件。"><a href="#新建名为wpa-supplicant-conf的文件。" class="headerlink" title="新建名为wpa_supplicant.conf的文件。"></a>新建名为wpa_supplicant.conf的文件。</h4><h4 id="编辑文件内容为"><a href="#编辑文件内容为" class="headerlink" title="编辑文件内容为"></a>编辑文件内容为</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/20210227081703.png"></p>
<h4 id="将文件wpa-supplicant-conf拖入SD卡的boot分区。"><a href="#将文件wpa-supplicant-conf拖入SD卡的boot分区。" class="headerlink" title="将文件wpa_supplicant.conf拖入SD卡的boot分区。"></a>将文件wpa_supplicant.conf拖入SD卡的boot分区。</h4><h3 id="5-将SD卡插入树莓派开机即可"><a href="#5-将SD卡插入树莓派开机即可" class="headerlink" title="5. 将SD卡插入树莓派开机即可"></a>5. 将SD卡插入树莓派开机即可</h3>]]></content>
      <categories>
        <category>树莓派的反击</category>
      </categories>
      <tags>
        <tag>树莓派历练</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派配置花生壳内网穿透</title>
    <url>/2020/12/31/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<h2 id="树莓派配置花生壳内网穿透"><a href="#树莓派配置花生壳内网穿透" class="headerlink" title="树莓派配置花生壳内网穿透"></a>树莓派配置花生壳内网穿透</h2><h3 id="一、工具包下载"><a href="#一、工具包下载" class="headerlink" title="一、工具包下载"></a>一、工具包下载</h3><h4 id="下载工具包到树莓派"><a href="#下载工具包到树莓派" class="headerlink" title="下载工具包到树莓派:"></a>下载工具包到树莓派:</h4><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">下载地址<span class="symbol">:https</span><span class="symbol">://dl-cdn</span>.oray.com/hsk/linux/phtunnel_5_0_rapi_aarch64.deb</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080648.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080704.png"></p>
<h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><p>注意：安装花生壳前，需输入命令：sudo -s 切换到管理员权限。</p>
<a id="more"></a>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080726.png"></p>
<h4 id="1、使用cd命令进入安装包所在的文件路径，输入安装命令：dpkg-i-安装包名称。回车，等待安装完成。"><a href="#1、使用cd命令进入安装包所在的文件路径，输入安装命令：dpkg-i-安装包名称。回车，等待安装完成。" class="headerlink" title="1、使用cd命令进入安装包所在的文件路径，输入安装命令：dpkg -i 安装包名称。回车，等待安装完成。"></a>1、使用cd命令进入安装包所在的文件路径，输入安装命令：dpkg -i 安装包名称。回车，等待安装完成。</h4><p>如:dpkg -i phtunnel_5_0_rapi_aarch64.deb<br>安装成功后，将显示花生壳的SN码、默认密码（admin）及远程管理地址<a href="http://b.oray.com./">http://b.oray.com。</a><br><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080757.png"></p>
<h3 id="三、操作功能"><a href="#三、操作功能" class="headerlink" title="三、操作功能"></a>三、操作功能</h3><h4 id="1、输入命令：phddns回车，可以看到扩展功能。phddns-start（启动）-status（状态）-stop（停止）-restart（重启）-reset（重置）-enable（开机自启动）-disable（关闭开机自启动）-version（版本）"><a href="#1、输入命令：phddns回车，可以看到扩展功能。phddns-start（启动）-status（状态）-stop（停止）-restart（重启）-reset（重置）-enable（开机自启动）-disable（关闭开机自启动）-version（版本）" class="headerlink" title="1、输入命令：phddns回车，可以看到扩展功能。phddns start（启动）| status（状态）| stop（停止）|restart（重启）| reset（重置）|enable（开机自启动）|disable（关闭开机自启动）|version（版本）"></a>1、输入命令：phddns回车，可以看到扩展功能。phddns start（启动）| status（状态）| stop（停止）|restart（重启）| reset（重置）|enable（开机自启动）|disable（关闭开机自启动）|version（版本）</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080812.png"></p>
<h4 id="2、具体命令操作如下："><a href="#2、具体命令操作如下：" class="headerlink" title="2、具体命令操作如下："></a>2、具体命令操作如下：</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080854.png"></p>
<h4 id="3、日志文件存放路径：-var-log-phddns"><a href="#3、日志文件存放路径：-var-log-phddns" class="headerlink" title="3、日志文件存放路径：/var/log/phddns"></a>3、日志文件存放路径：/var/log/phddns</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080903.png"></p>
<h4 id="4、卸载命令：dpkg-r-phddns"><a href="#4、卸载命令：dpkg-r-phddns" class="headerlink" title="4、卸载命令：dpkg -r phddns"></a>4、卸载命令：dpkg -r phddns</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080930.png"></p>
<h3 id="四、添加内网穿透映射"><a href="#四、添加内网穿透映射" class="headerlink" title="四、添加内网穿透映射"></a>四、添加内网穿透映射</h3><h4 id="1、树莓派中的花生壳安装完成后，先复制生成的SN码。然后在浏览器中访问远程管理地址http-b-oray-com-，在登录页面中输入SN码与默认密码（admin）登录。"><a href="#1、树莓派中的花生壳安装完成后，先复制生成的SN码。然后在浏览器中访问远程管理地址http-b-oray-com-，在登录页面中输入SN码与默认密码（admin）登录。" class="headerlink" title="1、树莓派中的花生壳安装完成后，先复制生成的SN码。然后在浏览器中访问远程管理地址http://b.oray.com ，在登录页面中输入SN码与默认密码（admin）登录。"></a>1、树莓派中的花生壳安装完成后，先复制生成的SN码。然后在浏览器中访问远程管理地址<a href="http://b.oray.com/">http://b.oray.com</a> ，在登录页面中输入SN码与默认密码（admin）登录。</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080943.png"></p>
<h4 id="2、首次登录，需先激活。提供扫码激活和密码激活两种方式，可灵活选择。"><a href="#2、首次登录，需先激活。提供扫码激活和密码激活两种方式，可灵活选择。" class="headerlink" title="2、首次登录，需先激活。提供扫码激活和密码激活两种方式，可灵活选择。"></a>2、首次登录，需先激活。提供扫码激活和密码激活两种方式，可灵活选择。</h4><p>①扫码激活：需使用花生壳管理APP或微信进行扫码激活；<br>②密码激活：输入已注册的Oray帐号密码激活。<br><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080953.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227081008.png"></p>
<h4 id="3、激活成功后，进入花生壳管理平台。若绑定SN码的帐号只有动态域名解析功能，需使用内网穿透功能时，可点击“免费开通”，或直接将帐号升级到带内网穿透功能的服务版本。"><a href="#3、激活成功后，进入花生壳管理平台。若绑定SN码的帐号只有动态域名解析功能，需使用内网穿透功能时，可点击“免费开通”，或直接将帐号升级到带内网穿透功能的服务版本。" class="headerlink" title="3、激活成功后，进入花生壳管理平台。若绑定SN码的帐号只有动态域名解析功能，需使用内网穿透功能时，可点击“免费开通”，或直接将帐号升级到带内网穿透功能的服务版本。"></a>3、激活成功后，进入花生壳管理平台。若绑定SN码的帐号只有动态域名解析功能，需使用内网穿透功能时，可点击“免费开通”，或直接将帐号升级到带内网穿透功能的服务版本。</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227081027.png"></p>
<h4 id="4、还可把鼠标移动到页面右上角帐号处，点击“切换帐号”更换带内网穿透功能的帐号登录使用。"><a href="#4、还可把鼠标移动到页面右上角帐号处，点击“切换帐号”更换带内网穿透功能的帐号登录使用。" class="headerlink" title="4、还可把鼠标移动到页面右上角帐号处，点击“切换帐号”更换带内网穿透功能的帐号登录使用。"></a>4、还可把鼠标移动到页面右上角帐号处，点击“切换帐号”更换带内网穿透功能的帐号登录使用。</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227081041.png"></p>
<h4 id="5、添加内网穿透映射时，点击页面上的“增加映射”按钮。"><a href="#5、添加内网穿透映射时，点击页面上的“增加映射”按钮。" class="headerlink" title="5、添加内网穿透映射时，点击页面上的“增加映射”按钮。"></a>5、添加内网穿透映射时，点击页面上的“增加映射”按钮。</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227081050.png"></p>
<h4 id="6、根据页面提示填写映射所需的信息，这里以映射树莓派的SSH服务"><a href="#6、根据页面提示填写映射所需的信息，这里以映射树莓派的SSH服务" class="headerlink" title="6、根据页面提示填写映射所需的信息，这里以映射树莓派的SSH服务"></a>6、根据页面提示填写映射所需的信息，这里以映射树莓派的SSH服务</h4><p>（10022端口）为例：<br>①应用名称：自定义<br>②应用图标：自行选择<br>③映射类型：选择TCP<br>④映射模板：暂不选择模板<br>⑤外网域名：选择用作外网访问的域名<br>⑥外网端口：选择动态端口<br>⑦内网主机：树莓派设备的内网IP地址<br>⑧内网端口：映射的服务类型对应端口10022<br>⑨带宽：购买映射带宽后，可支持给映射分配额外带宽，这里保存默认。<br>确认映射内容无误后，点击“确定”。<br><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227081206.png"></p>
<h4 id="7、映射添加完成，生成格式为：域名-5位数端口号的外网访问地址。"><a href="#7、映射添加完成，生成格式为：域名-5位数端口号的外网访问地址。" class="headerlink" title="7、映射添加完成，生成格式为：域名+5位数端口号的外网访问地址。"></a>7、映射添加完成，生成格式为：域名+5位数端口号的外网访问地址。</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227081132.png"></p>
<h4 id="8、在外网的电脑上，打开连接SSH服务的工具程序，输入域名与5位数端口号。"><a href="#8、在外网的电脑上，打开连接SSH服务的工具程序，输入域名与5位数端口号。" class="headerlink" title="8、在外网的电脑上，打开连接SSH服务的工具程序，输入域名与5位数端口号。"></a>8、在外网的电脑上，打开连接SSH服务的工具程序，输入域名与5位数端口号。</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227081150.png"></p>
<h4 id="9、远程访问树莓派的SSH服务成功，此时只要保持树莓派上安装的花生壳程序在线即可。"><a href="#9、远程访问树莓派的SSH服务成功，此时只要保持树莓派上安装的花生壳程序在线即可。" class="headerlink" title="9、远程访问树莓派的SSH服务成功，此时只要保持树莓派上安装的花生壳程序在线即可。"></a>9、远程访问树莓派的SSH服务成功，此时只要保持树莓派上安装的花生壳程序在线即可。</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227081222.png"></p>
<h4 id="五、如果重装了系统"><a href="#五、如果重装了系统" class="headerlink" title="五、如果重装了系统"></a>五、如果重装了系统</h4><h4 id="用树莓派的SN码登陆花生壳，绑定原有的账号。然后删除原来账号的端口，新建新端口。即可生效。"><a href="#用树莓派的SN码登陆花生壳，绑定原有的账号。然后删除原来账号的端口，新建新端口。即可生效。" class="headerlink" title="用树莓派的SN码登陆花生壳，绑定原有的账号。然后删除原来账号的端口，新建新端口。即可生效。"></a>用树莓派的SN码登陆花生壳，绑定原有的账号。然后删除原来账号的端口，新建新端口。即可生效。</h4>]]></content>
      <categories>
        <category>树莓派的反击</category>
      </categories>
      <tags>
        <tag>内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title>通过钓鱼网页获取GPS定位 --Seeker</title>
    <url>/2021/02/18/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<h2 id="通过钓鱼网页获取GPS定位-–Seeker"><a href="#通过钓鱼网页获取GPS定位-–Seeker" class="headerlink" title="通过钓鱼网页获取GPS定位 –Seeker"></a>通过钓鱼网页获取GPS定位 –Seeker</h2><h5 id="在互联网的世界里，最不缺少的就是信息，最容易获取的也是信息，在这个信息交互的时代里，你真能独善其身？没错，你的安全只是相对的，而漏洞的存在则是绝对的！！！"><a href="#在互联网的世界里，最不缺少的就是信息，最容易获取的也是信息，在这个信息交互的时代里，你真能独善其身？没错，你的安全只是相对的，而漏洞的存在则是绝对的！！！" class="headerlink" title="在互联网的世界里，最不缺少的就是信息，最容易获取的也是信息，在这个信息交互的时代里，你真能独善其身？没错，你的安全只是相对的，而漏洞的存在则是绝对的！！！"></a>在互联网的世界里，最不缺少的就是信息，最容易获取的也是信息，在这个信息交互的时代里，你真能独善其身？没错，你的安全只是相对的，而漏洞的存在则是绝对的！！！</h5><h3 id="Seeker-–-WEB嗅探器"><a href="#Seeker-–-WEB嗅探器" class="headerlink" title="Seeker – WEB嗅探器"></a>Seeker – WEB嗅探器</h3><p><img src="https://camo.githubusercontent.com/dd9d27c5b2f6fa423e80a12a71504ae87b299a7fad435352f96a9e96815fd0ea/68747470733a2f2f692e696d6775722e636f6d2f444970754e54492e6a7067"><br><strong>它可以帮你获取来访者的GPS位置信息</strong> </p>
<a id="more"></a>

<h3 id="本文章记录一个钓鱼网站的搭建和测试，旨在让大家明白当我们浏览网页时你个人信息的一些流向。从而提高大家网络安全意识，让坏人没有可乘之机。科学技术是把双刃剑，因此，在个人技术得到提高后请善待他人，永远不要突破道德的底线！！！-下面让我们进入正题。"><a href="#本文章记录一个钓鱼网站的搭建和测试，旨在让大家明白当我们浏览网页时你个人信息的一些流向。从而提高大家网络安全意识，让坏人没有可乘之机。科学技术是把双刃剑，因此，在个人技术得到提高后请善待他人，永远不要突破道德的底线！！！-下面让我们进入正题。" class="headerlink" title="本文章记录一个钓鱼网站的搭建和测试，旨在让大家明白当我们浏览网页时你个人信息的一些流向。从而提高大家网络安全意识，让坏人没有可乘之机。科学技术是把双刃剑，因此，在个人技术得到提高后请善待他人，永远不要突破道德的底线！！！ 下面让我们进入正题。"></a>本文章记录一个钓鱼网站的搭建和测试，旨在让大家明白当我们浏览网页时你个人信息的一些流向。从而提高大家网络安全意识，让坏人没有可乘之机。科学技术是把双刃剑，因此，在个人技术得到提高后请善待他人，永远不要突破道德的底线！！！ 下面让我们进入正题。</h3><h3 id="大体思路："><a href="#大体思路：" class="headerlink" title="大体思路："></a>大体思路：</h3><h4 id="通过Seeker在本机架设Web服务项目，然后用Ngrok开辟外网访问隧道（内网穿透），当外网访问时，Seeker即可探测到访问者的一些信息。"><a href="#通过Seeker在本机架设Web服务项目，然后用Ngrok开辟外网访问隧道（内网穿透），当外网访问时，Seeker即可探测到访问者的一些信息。" class="headerlink" title="通过Seeker在本机架设Web服务项目，然后用Ngrok开辟外网访问隧道（内网穿透），当外网访问时，Seeker即可探测到访问者的一些信息。"></a>通过Seeker在本机架设Web服务项目，然后用Ngrok开辟外网访问隧道（内网穿透），当外网访问时，Seeker即可探测到访问者的一些信息。</h4><h3 id="一、Seeker的安装"><a href="#一、Seeker的安装" class="headerlink" title="一、Seeker的安装"></a>一、Seeker的安装</h3><p><strong>项目地址:</strong><br><a href="https://github.com/thewhiteh4t/seeker.git">https://github.com/thewhiteh4t/seeker.git</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开命令行输入</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/thewhiteh4t/seeker.git</span><br><span class="line">$ <span class="built_in">cd</span> seeker/</span><br><span class="line">$ apt update</span><br><span class="line">$ apt install python3 python3-pip php</span><br><span class="line">$ pip3 install requests</span><br><span class="line">$ chmod +x install.sh</span><br></pre></td></tr></table></figure>
<h3 id="二、下载安装Ngrok"><a href="#二、下载安装Ngrok" class="headerlink" title="二、下载安装Ngrok"></a>二、下载安装Ngrok</h3><h4 id="1-注册Ngrok账号"><a href="#1-注册Ngrok账号" class="headerlink" title="1. 注册Ngrok账号"></a>1. 注册Ngrok账号</h4><p><strong>网站地址</strong><br><a href="https://ngrok.com/">https://ngrok.com/</a></p>
<h4 id="2-根据电脑型号下载对应的安装包"><a href="#2-根据电脑型号下载对应的安装包" class="headerlink" title="2. 根据电脑型号下载对应的安装包"></a>2. 根据电脑型号下载对应的安装包</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082037.png"><br><strong>解压下载好的安装包</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ unzip /path/to/ngrok.zip</span><br></pre></td></tr></table></figure>
<h4 id="3-配置Ngrok"><a href="#3-配置Ngrok" class="headerlink" title="3. 配置Ngrok"></a>3. 配置Ngrok</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082056.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打开终端输入</span></span><br><span class="line">./ngrok authtoken + 秘钥</span><br></pre></td></tr></table></figure>
<h3 id="三、开始搭建"><a href="#三、开始搭建" class="headerlink" title="三、开始搭建"></a>三、开始搭建</h3><h4 id="1-cd打开到Seeker项目下启动Seeker"><a href="#1-cd打开到Seeker项目下启动Seeker" class="headerlink" title="1. cd打开到Seeker项目下启动Seeker"></a>1. cd打开到Seeker项目下启动Seeker</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> seeker/</span><br><span class="line">$ python3 seeker.py -t manual <span class="comment">#启动项目</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082108.png"></p>
<h4 id="2-输入1选中Google-Drive"><a href="#2-输入1选中Google-Drive" class="headerlink" title="2. 输入1选中Google Drive"></a>2. 输入1选中Google Drive</h4><p><strong>回车后输入任意一个URL</strong><br><img src="https://gitee.com/Haikez/images_bed/raw/master/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082117.png"><br><strong>至此Seeker启动完成</strong><br><img src="https://gitee.com/Haikez/images_bed/raw/master/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082131.png"></p>
<h4 id="3-启动Ngrok"><a href="#3-启动Ngrok" class="headerlink" title="3. 启动Ngrok"></a>3. 启动Ngrok</h4><p><strong>cd打开到Ngrok项目下启动ngrok</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ngrok http 8080 <span class="comment">#端口号要与Seeker监听的端口号一致</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082143.png"><br>红色框框内随机生成的链接就是钓鱼链接，可将它发给目标用户访问。</p>
<h3 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h3><h4 id="1-打开钓鱼链接"><a href="#1-打开钓鱼链接" class="headerlink" title="1. 打开钓鱼链接"></a>1. 打开钓鱼链接</h4><p><strong>ngrok页面内的HTTP Requests会有响应</strong><br><img src="https://gitee.com/Haikez/images_bed/raw/master/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082152.png"><br><strong>此时客户端的页面如下</strong><br><img src="https://gitee.com/Haikez/images_bed/raw/master/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082203.PNG"><br><strong>当用户点击<code>Request access</code>时会弹出</strong><br><img src="https://gitee.com/Haikez/images_bed/raw/master/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082227.PNG"><br><strong>此时如果点击允许位置信息就会暴露</strong><br><strong>此时Seeker端的画面为</strong><br><img src="https://gitee.com/Haikez/images_bed/raw/master/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082217.png"><br>图中红框部分为目标经纬度</p>
<h3 id="五、最后贴上Seeker原项目说明，不懂的地方可以查。"><a href="#五、最后贴上Seeker原项目说明，不懂的地方可以查。" class="headerlink" title="五、最后贴上Seeker原项目说明，不懂的地方可以查。"></a>五、最后贴上Seeker原项目说明，不懂的地方可以查。</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">python3 seeker.py -h</span><br><span class="line"></span><br><span class="line">usage: seeker.py [-h] [-s SUBDOMAIN]</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -k KML, --kml         Provide KML Filename ( Optional )</span><br><span class="line">  -p PORT, --port       Port for Web Server [ Default : 8080 ]</span><br><span class="line">  -t TUNNEL, --tunnel   Specify Tunnel Mode [ Available : manual ]</span><br><span class="line"></span><br><span class="line"><span class="section">##################</span></span><br><span class="line"><span class="section"># Usage Examples #</span></span><br><span class="line"><span class="section">##################</span></span><br><span class="line"></span><br><span class="line"><span class="section"># Step 1 : In first terminal</span></span><br><span class="line">$ python3 seeker.py -t manual</span><br><span class="line"></span><br><span class="line"><span class="section"># Step 2 : In second terminal start a tunnel service such as ngrok</span></span><br><span class="line">$ ./ngrok http 8080</span><br><span class="line"></span><br><span class="line"><span class="section">###########</span></span><br><span class="line"><span class="section"># Options #</span></span><br><span class="line"><span class="section">###########</span></span><br><span class="line"></span><br><span class="line"><span class="section"># Ouput KML File for Google Earth</span></span><br><span class="line">$ python3 seeker.py -t manual -k <span class="xml"><span class="tag">&lt;<span class="name">filename</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section"># Use Custom Port</span></span><br><span class="line">$ python3 seeker.py -t manual -p 1337</span><br><span class="line">$ ./ngrok http 1337</span><br><span class="line"></span><br><span class="line"><span class="section">################</span></span><br><span class="line"><span class="section"># Docker Usage #</span></span><br><span class="line"><span class="section">################</span></span><br><span class="line"></span><br><span class="line"><span class="section"># Step 1</span></span><br><span class="line">$ docker network create ngroknet</span><br><span class="line"></span><br><span class="line"><span class="section"># Step 2</span></span><br><span class="line">$ docker run --rm -it --net ngroknet --name seeker thewhiteh4t/seeker python3 seeker.py -t manual</span><br><span class="line"></span><br><span class="line"><span class="section"># Step 3</span></span><br><span class="line">$ docker run --rm -it --net ngroknet --name ngrok wernight/ngrok ngrok http seeker:8080</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux学习</category>
      </categories>
      <tags>
        <tag>Seeker嗅探定位</tag>
      </tags>
  </entry>
  <entry>
    <title>链表</title>
    <url>/2020/12/15/%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="离散存储–链表"><a href="#离散存储–链表" class="headerlink" title="离散存储–链表"></a>离散存储–链表</h1><h3 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h3><ol>
<li>n 个结点离散分配</li>
<li> 彼此通过指针相连</li>
<li>   每个结点只有一个前驱结点，每个结点只有一个后继结点。</li>
<li>   首结点没有前驱结点，尾结点没有后继结点<h3 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语:"></a>专业术语:</h3></li>
<li>首结点<blockquote>
<p>第一个有效结点</p>
</blockquote>
</li>
<li>尾结点<blockquote>
<p>最后一个有效结点</p>
</blockquote>
</li>
<li>头结点<blockquote>
<p>第一个有效结点前的那个结点<br> 头结点不存放有效数据<br> 加头结点的目的主要是为了方便对链表的操作</p>
</blockquote>
</li>
<li>头指针<blockquote>
<p>指向头结点的指针变量</p>
</blockquote>
</li>
<li>尾指针<blockquote>
<p>指向尾结点的指针变量</p>
</blockquote>
<h4 id="如果希望通过一个函数来对链表进行处理，我们至少需要接收链表的哪些参数"><a href="#如果希望通过一个函数来对链表进行处理，我们至少需要接收链表的哪些参数" class="headerlink" title="如果希望通过一个函数来对链表进行处理，我们至少需要接收链表的哪些参数:"></a>如果希望通过一个函数来对链表进行处理，我们至少需要接收链表的哪些参数:</h4> 只需要一个参数：头指针<br> 因为我们通过头指针可以推算出链表的其他所有信息。<h4 id="构建一个结点"><a href="#构建一个结点" class="headerlink" title="构建一个结点:"></a>构建一个结点:</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data; <span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">pNext</span>;</span> <span class="comment">//指针域</span></span><br><span class="line">&#125;* PNODE,NODE; <span class="comment">//NODE等价于struct Node,  </span></span><br><span class="line"><span class="comment">//PNODE等价于struct Node *</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类:"></a>分类:</h3></li>
<li>单链表</li>
<li>双链表:<blockquote>
<p>每个结点有两个指针域</p>
</blockquote>
</li>
<li>循环链表:<blockquote>
<p> 能通过任何一个结点找到其他所有结点</p>
</blockquote>
</li>
<li>非循环链表  <h3 id="单链表算法"><a href="#单链表算法" class="headerlink" title="单链表算法:"></a>单链表算法:</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">定义链表结点:</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType <span class="comment">//不一定是int型,ElemType是需求类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;       <span class="comment">//存放元素值</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNose</span> * <span class="title">next</span>;</span> <span class="comment">//指向后继结点</span></span><br><span class="line">&#125;LinkNode;               <span class="comment">//单链表结点类型</span></span><br></pre></td></tr></table></figure>
<details> <summary>初始化 InitList(&L)</summary>
<pre><code>
void InitList(LinkNode *&L)
&#123;
 L = (LinkNode *)malloc(sizeof(LinkNode));
 L->next s= NULL;
&#125;
</code></pre>
</details>
<details> <summary>销毁 DestroyList(&L)</summary>
<pre><code>
void DestoryList(LinkNode *&L)
&#123;
 LinkNode * pre = L,*p = L->next;
 while(p != NULL)
 &#123;
     free(pre);
     pre = p;
     p = pre->next;
 &#125;
 free(pre);
&#125;
</code></pre>
</details>
<details> <summary>判空 ListEmpty(L)</summary>
<pre><code>
bool ListEmpty(LinkNode * L)
&#123;
 return(L->next = NULL);
&#125;
</code></pre>
</details>
<details> <summary>求长度 ListLength(L)</summary>
<pre><code>
int ListLength(LinkNode * L)
&#123;
 LinkNode * p = L;
 int n=0;
 while(p->next != NULL)
 &#123;
     n++;
     p = p->next;
 &#125;
 return(n);
&#125;

</code></pre></details></li>
</ol>
<p></p>

<details> <summary>输出 DispList(L)</summary>
<pre><code>
void DispList(LinkNode * L)
&#123;
    LinkNode *p = L->next;
    while(p != NULL)
    &#123;
        printf("%d\n",p->data);
        p = p->next;
    &#125;
    printf("\n");
&#125;
</code></pre>
</details>
<details> <summary>按位求值 GetElem(L,i,&e)</summary>
<pre><code>
bool GetElem(LinkNode *L,int i, ElemType &e)
&#123;
    int j = 0;
    LinkNode *p = L;
    if (i <= 0) return false; while(j < i && p !="NULL)" &#123; j++;>next;
    &#125;
    if(p == NULL)
        return false;
    else
    &#123;   
        e = p->data;
        return true;
    &#125;
&#125;
</=></code></pre>
</details>
<details> <summary>按值查找 LocateElem(L,e)</summary>
<pre><code>
int LocateElem(LinkNode *L,ElemType e)
&#123;
    int i = 1;
    LinkNode *p = L-> next;
    while(p != NULL && p->data != e)
    &#123;
        p = p-> next;
        i++;
    &#125;
    if(p == NULL)
        return 0;
    else
        return (i);
&#125;
</code></pre>
</details>
<details> <summary>插入数据 ListInsert(&L,i,e)</summary>
<pre><code>
bool ListInsert(LinkNode *&L,int i,ElemType e)
&#123;
    int j = 0;
    LinkNode *p = L,*s;
    if(i <= 0) return false; while(j < i-1 && p !="NULL)" &#123; j++;>next;
    &#125;
    if(p == NULL)
        return false;
    else
    &#123;
        s = (LinkNode *)malloc(sizeof(LinkNode));
        s->data =e ;
        s->next = p->next;
        p->next = s;
        return true;
    &#125;
&#125;
</=></code></pre>
</details>
<details> <summary>删除数据 ListDelete(&L,i,&e)</summary>
<pre><code>
bool ListDelete(LinkNode *&L,int i,ElemType &e)
&#123;
    int j = 0;
    LinkNode *p = L,*q;
    if (i <= 0) return false; while (j < i-1 && p !="NULL" ) &#123; j++;>next;
    &#125;
    if (p == NULL)
        return false;
    else
    &#123;
        q = p->next;
        if(q == NULL)
            return false;
        e = q->data;
        p->next = q->next;
        free(q);
        return true;
    &#125;
&#125;
</=></code></pre>
</details>
]]></content>
      <categories>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>Java的多种内部类</title>
    <url>/2021/04/20/Java%E7%9A%84%E5%A4%9A%E7%A7%8D%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="Java的多种内部类"><a href="#Java的多种内部类" class="headerlink" title="Java的多种内部类"></a>Java的多种内部类</h1><h2 id="1-成员内部类"><a href="#1-成员内部类" class="headerlink" title="1.成员内部类"></a>1.成员内部类</h2><h3 id="1-通过外部类实例化成员内部类"><a href="#1-通过外部类实例化成员内部类" class="headerlink" title="1. 通过外部类实例化成员内部类"></a>1. 通过外部类实例化成员内部类</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210420162757.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210420163344.png"></p>
<a id="more"></a>
<h3 id="2-成员内部类可以获得外部类的-私有属性"><a href="#2-成员内部类可以获得外部类的-私有属性" class="headerlink" title="2. 成员内部类可以获得外部类的 私有属性"></a>2. 成员内部类可以获得外部类的 <strong><em>私有属性</em></strong></h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210420163242.png"></p>
<h2 id="2-静态内部类"><a href="#2-静态内部类" class="headerlink" title="2. 静态内部类"></a>2. 静态内部类</h2><h3 id="用static关键字修饰的内部类"><a href="#用static关键字修饰的内部类" class="headerlink" title="用static关键字修饰的内部类"></a>用static关键字修饰的内部类</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210420164620.png"></p>
<h2 id="3-局部内部类"><a href="#3-局部内部类" class="headerlink" title="3. 局部内部类"></a>3. 局部内部类</h2><h3 id="写在方法区的内部类"><a href="#写在方法区的内部类" class="headerlink" title="写在方法区的内部类"></a>写在方法区的内部类</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210420164801.png"></p>
<h2 id="4-匿名内部类"><a href="#4-匿名内部类" class="headerlink" title="4. 匿名内部类"></a>4. 匿名内部类</h2><h3 id="没有名字初始化类，不用将实例保存到变量中"><a href="#没有名字初始化类，不用将实例保存到变量中" class="headerlink" title="没有名字初始化类，不用将实例保存到变量中"></a>没有名字初始化类，不用将实例保存到变量中</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210420164318.png"></p>
<h3 id="可以用匿名内部类实现接口"><a href="#可以用匿名内部类实现接口" class="headerlink" title="可以用匿名内部类实现接口"></a>可以用匿名内部类实现接口</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210420164406.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210420164417.png"></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java的异常机制</title>
    <url>/2021/04/20/Java%E7%9A%84%E5%BC%82%E5%B8%B8%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="Java的异常机制"><a href="#Java的异常机制" class="headerlink" title="Java的异常机制"></a>Java的异常机制</h1><h2 id="异常（Exception）与错误（Error）"><a href="#异常（Exception）与错误（Error）" class="headerlink" title="异常（Exception）与错误（Error）"></a>异常（Exception）与错误（Error）</h2><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210421153629.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210421153636.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210421153643.png"></p>
<h2 id="五大关键字（try、catch、finally、throw、throws）"><a href="#五大关键字（try、catch、finally、throw、throws）" class="headerlink" title="五大关键字（try、catch、finally、throw、throws）"></a>五大关键字（try、catch、finally、throw、throws）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123; </span><br><span class="line">    <span class="comment">//监控区域。</span></span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">0</span>;</span><br><span class="line">    System.out.println(a/b);</span><br><span class="line">&#125;<span class="keyword">catch</span>(ArithmeticException e)&#123;</span><br><span class="line">    <span class="comment">//捕获区域，如果捕捉到括号内指明的异常，执行代码块中的内容。</span></span><br><span class="line">    System.out.println(<span class="string">&quot;发现异常&quot;</span>);</span><br><span class="line">    e.printStackTrace();<span class="comment">//打印错误的栈信息。</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//无论是否出现异常，都会执行代码块中的内容。</span></span><br><span class="line">    System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-try关键字：用来监控代码块是否发生异常"><a href="#1-try关键字：用来监控代码块是否发生异常" class="headerlink" title="1. try关键字：用来监控代码块是否发生异常"></a>1. try关键字：用来监控代码块是否发生异常</h3><h3 id="2-catch-捕获异常，如果捕捉到括号内指明的异常，执行代码块中的内容"><a href="#2-catch-捕获异常，如果捕捉到括号内指明的异常，执行代码块中的内容" class="headerlink" title="2. catch( )捕获异常，如果捕捉到括号内指明的异常，执行代码块中的内容."></a>2. catch( )捕获异常，如果捕捉到括号内指明的异常，执行代码块中的内容.</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210421154825.png"></p>
<blockquote>
<p>上图是catch()中异常的范围。如果填Throwable那么catch就能捕获任何异常和错误。</p>
</blockquote>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210421155331.png"></p>
<blockquote>
<p>可以使用catch对异常进行层层拦截，**<em>拦截到即停止继续捕获**</em>。 </p>
</blockquote>
<h3 id="3-finally关键字：无论是否出现异常，都会执行代码块中的内容。"><a href="#3-finally关键字：无论是否出现异常，都会执行代码块中的内容。" class="headerlink" title="3. finally关键字：无论是否出现异常，都会执行代码块中的内容。"></a>3. finally关键字：无论是否出现异常，都会执行代码块中的内容。</h3><h3 id="4-throw关键字：主动抛出异常语句"><a href="#4-throw关键字：主动抛出异常语句" class="headerlink" title="4. throw关键字：主动抛出异常语句"></a>4. throw关键字：主动抛出异常语句</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210421160251.png"></p>
<blockquote>
<p>每个异常都是一个类，需要用new关键字创建后抛出。</p>
</blockquote>
<h3 id="5-throws关键字：方法抛出异常"><a href="#5-throws关键字：方法抛出异常" class="headerlink" title="5. throws关键字：方法抛出异常"></a>5. throws关键字：方法抛出异常</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> <span class="keyword">throws</span> 异常名 </span>&#123;</span><br><span class="line">    <span class="comment">//当方法出现异常时会抛出异常,由外界进行捕获</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
</search>
