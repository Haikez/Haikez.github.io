<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ArchLinux安装</title>
    <url>/2020/12/15/ArchLinux%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ArchLinux是通用 x86-64 GNU/Linux 发行版，同时也是一个非常简洁的Linux。它将简洁定义为将简洁定义为：避免任何不必要的添加、修改和复杂增加。甚至连vim都不自带！这也给它的安装带来了难度。但与此同时它也提供了非常详细并且更新及时的Wiki（帮助文档），供开发者学习使用。</p>
<h2 id="Arction"><a href="#Arction" class="headerlink" title="Arction:"></a>Arction:</h2><a id="more"></a>

<h3 id="1-下载安装镜像到U盘"><a href="#1-下载安装镜像到U盘" class="headerlink" title="1.下载安装镜像到U盘"></a>1.下载安装镜像到U盘</h3><blockquote>
<p>镜像地址:  <a href="http://mirrors.163.com/archlinux/iso">http://mirrors.163.com/archlinux/iso</a></p>
</blockquote>
<h3 id="2-登入系统给磁盘分区"><a href="#2-登入系统给磁盘分区" class="headerlink" title="2.登入系统给磁盘分区"></a>2.登入系统给磁盘分区</h3><p>同步时间：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] timedatectl set-ntp <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>查看当前磁盘各个分区：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] lsblk</span><br></pre></td></tr></table></figure>
<p>设置分区：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] cfdisk /dev/sdx  <span class="comment">#选gpt设置分区,sdx为你想要安装的那个分区</span></span><br></pre></td></tr></table></figure>
<h4 id="当电脑里面已经有别的系统且也是UEFI引导时："><a href="#当电脑里面已经有别的系统且也是UEFI引导时：" class="headerlink" title="当电脑里面已经有别的系统且也是UEFI引导时："></a>当电脑里面已经有别的系统且也是UEFI引导时：</h4><p>分区方案：<br>sdx1—————1G————–swap分区<br>sdx2—————nG————–主分区</p>
<h4 id="当电脑还是空机时"><a href="#当电脑还是空机时" class="headerlink" title="当电脑还是空机时"></a>当电脑还是空机时</h4><p>分区方案：<br>sdx1—————1G————–swap分区<br>sdx2—————nG————–主分区<br>sdx3—————500M————ESP分区</p>
<h4 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h4><p>对于 root、home 分区等直接使用 ext4 文件系统进行初始化。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] mkfs.ext4 /dev/sdx2</span><br></pre></td></tr></table></figure>
<p>对于交换分区，不能使用上述命令进行格式化，而需要使用 mkswap 将其初始化。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] mkswap /dev/sdx1</span><br><span class="line">[root@archiso~] swapon /dev/sdx1</span><br></pre></td></tr></table></figure>
<p>电脑为空机执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] mkfs.fat -F32 /dev/sda1</span><br></pre></td></tr></table></figure>
<p>(格式化ESP分区)</p>
<h4 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h4><blockquote>
<p>假设系统内的ESP分区为sdxn</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 挂载根分区</span></span><br><span class="line">[root@archiso~] mount /dev/sdx2 /mnt</span><br><span class="line"><span class="comment"># 在根分区下新建boot文件夹</span></span><br><span class="line">[root@archiso~] mkdir /mnt/boot</span><br><span class="line"><span class="comment"># 挂载boot分区</span></span><br><span class="line">[root@archiso~] mount /dev/sdxn /mnt/boot</span><br></pre></td></tr></table></figure>
<h4 id="更换软件源"><a href="#更换软件源" class="headerlink" title="更换软件源"></a>更换软件源</h4><p>使用reflector来获取速度最快的6个镜像，并将地址保存至/etc/pacman.d/mirrorlist</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] reflector -c China -a 6 --sort rate --save /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure>
<h3 id="3-安装系统"><a href="#3-安装系统" class="headerlink" title="3.安装系统"></a>3.安装系统</h3><p>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] pacstrap -i /mnt base base-devel linux linux-firmware</span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装完系统后会在/mnt/boot下生成几个文件。这对下面配置grub引导文件至关重要，下面生成grub配置文件时会扫描这几个文件</p>
</blockquote>
<h3 id="4-配置系统"><a href="#4-配置系统" class="headerlink" title="4.配置系统"></a>4.配置系统</h3><h4 id="1-配置fstab"><a href="#1-配置fstab" class="headerlink" title="(1)配置fstab"></a>(1)配置fstab</h4><p>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure>
<h4 id="2-切换到新系统"><a href="#2-切换到新系统" class="headerlink" title="(2)切换到新系统"></a>(2)切换到新系统</h4><p>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] arch-chroot /mnt</span><br><span class="line">[root@archiso~] pacman -S vim <span class="comment">#安装vim</span></span><br></pre></td></tr></table></figure>
<h4 id="3-进行本地语言设置"><a href="#3-进行本地语言设置" class="headerlink" title="(3)进行本地语言设置"></a>(3)进行本地语言设置</h4><p>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] vim /etc/locale.gen</span><br></pre></td></tr></table></figure>
<p>反注释（删掉前面的#）<br>en_US.UTF-8 UTF-8<br>zh_CN.UTF-8 UTF-8<br>这两个，退出保存<br>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] locale-gen</span><br></pre></td></tr></table></figure>
<p>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] <span class="built_in">echo</span> LANG=en_US.UTF-8 &gt; /etc/locale.conf</span><br></pre></td></tr></table></figure>
<h4 id="4-设置时区"><a href="#4-设置时区" class="headerlink" title="(4)设置时区"></a>(4)设置时区</h4><p>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure>
<p>设置时区。<br>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] hwclock --systohc --utc</span><br></pre></td></tr></table></figure>
<h4 id="5-设置主机名和网络"><a href="#5-设置主机名和网络" class="headerlink" title="(5)设置主机名和网络"></a>(5)设置主机名和网络</h4><p>设置主机名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] vim /etc/hostname</span><br></pre></td></tr></table></figure>
<blockquote>
<p>主机名<br>~<br>~<br>~</p>
</blockquote>
<p>设置网络：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] vim /etc/hosts</span><br></pre></td></tr></table></figure>
<blockquote>
<p>127.0.0.1&emsp;&emsp;localhost<br>::1&emsp;&emsp;&emsp;&emsp;&emsp;localhost<br>127.0.0.1&emsp;&emsp;主机名.localdomain&emsp;&emsp;主机名</p>
</blockquote>
<p>设置网络DNS</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] vim /etc/resolv.conf.head</span><br></pre></td></tr></table></figure>
<blockquote>
<p>nameserver&emsp;&emsp;218.2.2.2&emsp;—江苏电信<br>nameserver&emsp;&emsp;223.5.5.5&emsp;—阿里</p>
</blockquote>
<h4 id="6-安装网络工具"><a href="#6-安装网络工具" class="headerlink" title="(6)安装网络工具"></a>(6)安装网络工具</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] pacman -S dhcpcd</span><br><span class="line">[root@archiso~] systemctl start dhcpcd</span><br><span class="line">[root@archiso~] systemctl <span class="built_in">enable</span> dhcpcd</span><br></pre></td></tr></table></figure>
<h3 id="5-引导系统"><a href="#5-引导系统" class="headerlink" title="5.引导系统"></a>5.引导系统</h3><p>GRUB进行UEFI引导<br>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] pacman -S dosfstools grub efibootmgr</span><br></pre></td></tr></table></figure>
<p>安装引导工具</p>
<p>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] grub-install --target=x86_64-efi --efi-directory=/boot   --bootloader-id=Arch</span><br></pre></td></tr></table></figure>
<p>进行安装grub</p>
<p>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>
<p>进行配置grub</p>
<h3 id="6-用户管理"><a href="#6-用户管理" class="headerlink" title="6.用户管理"></a>6.用户管理</h3><h4 id="（1）设置root密码"><a href="#（1）设置root密码" class="headerlink" title="（1）设置root密码"></a>（1）设置root密码</h4><p>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] passwd</span><br></pre></td></tr></table></figure>
<h4 id="（2）添加用户"><a href="#（2）添加用户" class="headerlink" title="（2）添加用户"></a>（2）添加用户</h4><p>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] useradd -m -G wheel 用户名</span><br></pre></td></tr></table></figure>
<p>（务必添加一个 用户 ，否则后面sddm显示管理器登录的时候无法登录，sddm不会列出root用户）<br>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] passwd 用户名</span><br></pre></td></tr></table></figure>
<p>为刚才添加的用户设置密码</p>
<h4 id="3-给用户添加权限"><a href="#3-给用户添加权限" class="headerlink" title="(3) 给用户添加权限"></a>(3) 给用户添加权限</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] ln -S /usr/bin/vim /usr/bin/vi </span><br><span class="line">[root@archiso~] visudo</span><br></pre></td></tr></table></figure>
<blockquote>
<p>%wheel All=(All)All “去掉这句话前的‘#’符号”</p>
</blockquote>
<h3 id="7-退出chroot重启"><a href="#7-退出chroot重启" class="headerlink" title="7.退出chroot重启"></a>7.退出chroot重启</h3><p>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] <span class="built_in">exit</span></span><br><span class="line">[root@archiso~] reboot</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux学习</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie和Session</title>
    <url>/2021/05/09/Cookie%E5%92%8CSession/</url>
    <content><![CDATA[<h1 id="Cookie和Session"><a href="#Cookie和Session" class="headerlink" title="Cookie和Session"></a>Cookie和Session</h1><h2 id="一、会话"><a href="#一、会话" class="headerlink" title="一、会话"></a>一、会话</h2><h3 id="1-会话：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；"><a href="#1-会话：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；" class="headerlink" title="1. 会话：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；"></a>1. 会话：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；</h3><h3 id="2-有状态会话：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；"><a href="#2-有状态会话：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；" class="headerlink" title="2. 有状态会话：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；"></a>2. 有状态会话：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；</h3><h2 id="二、保存会话的两种技术"><a href="#二、保存会话的两种技术" class="headerlink" title="二、保存会话的两种技术"></a>二、保存会话的两种技术</h2><p><strong>cookie</strong></p>
<ul>
<li>客户端技术（响应、请求）</li>
</ul>
<p><strong>session</strong></p>
<ul>
<li>服务器技术，利用这个技术，可以保存用户的会话信息？ 我们可以把信息或者数据放在Session中！<a id="more"></a>
<h2 id="三、Cookie"><a href="#三、Cookie" class="headerlink" title="三、Cookie"></a>三、Cookie</h2><h3 id="cookie：一般会保存在本地的-用户目录下-appdata；"><a href="#cookie：一般会保存在本地的-用户目录下-appdata；" class="headerlink" title="cookie：一般会保存在本地的 用户目录下 appdata；"></a>cookie：一般会保存在本地的 用户目录下 appdata；</h3></li>
</ul>
<p>一个网站cookie是否存在上限！聊聊细节问题</p>
<ul>
<li>一个Cookie只能保存一个信息；</li>
<li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie；</li>
<li>Cookie大小有限制4kb；</li>
<li>300个cookie浏览器上限</li>
</ul>
<h3 id="删除Cookie；"><a href="#删除Cookie；" class="headerlink" title="删除Cookie；"></a>删除Cookie；</h3><ul>
<li>不设置有效期，关闭浏览器，自动失效；（默认）</li>
<li>设置有效期时间为 0 ；</li>
</ul>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li>cookie默认有效期是在浏览器关闭后失效，如果设置了有效期就在过期后失效</li>
</ul>
<h3 id="Cookie的使用"><a href="#Cookie的使用" class="headerlink" title="Cookie的使用:"></a>Cookie的使用:</h3><ol>
<li>从请求中拿到cookie信息<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = req.getCookies(); <span class="comment">//从请求中获得Cookie</span></span><br><span class="line">Cookie cookie=cookies[i];</span><br><span class="line">cookie.getName(); <span class="comment">//获得cookie的key</span></span><br><span class="line">cookie.getValue();<span class="comment">//获得cookie的value</span></span><br></pre></td></tr></table></figure></li>
<li>服务器响应给客户端cookie<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;倪矗&quot;</span>);<span class="comment">//创建一个cookie</span></span><br><span class="line">resp.addCookie(cookie); <span class="comment">//向响应中添加cookie</span></span><br></pre></td></tr></table></figure></li>
<li>设置cookie的有效期<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);<span class="comment">//以秒为单位</span></span><br><span class="line"><span class="comment">//将cookie的有效期设置为0，cookie立马失效</span></span><br><span class="line">cookies[i].setMaxAge(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<h3 id="一个cookie案例：获得用户访问时间"><a href="#一个cookie案例：获得用户访问时间" class="headerlink" title="一个cookie案例：获得用户访问时间"></a>一个cookie案例：获得用户访问时间</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//服务器，告诉你你来的时间，把这个时间封装成为一个 信件，你下次带来我就知道你来了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//解决乱码问题</span></span><br><span class="line">    resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">    req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    PrintWriter out = resp.getWriter();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Cookie服务器端从客户端获取,从请求里面拿到Cookie</span></span><br><span class="line">    Cookie[] cookies = req.getCookies();<span class="comment">//这里返回数组说明Cookie可能存在多个</span></span><br><span class="line">    <span class="comment">//判断Cookie是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (cookies!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//如果存在怎么办</span></span><br><span class="line">        out.write(<span class="string">&quot;你上一次访问的时间是：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cookies.length; i++) &#123;</span><br><span class="line">            Cookie cookie=cookies[i];</span><br><span class="line">            <span class="comment">//获得cookie的名字</span></span><br><span class="line">            <span class="keyword">if</span> (cookie.getName().equals(<span class="string">&quot;LastLoginTime&quot;</span>))&#123;</span><br><span class="line">                <span class="comment">//获取value的值并转化为长整型</span></span><br><span class="line">                <span class="keyword">long</span> LastLoginTime = Long.parseLong(cookie.getValue());</span><br><span class="line">                <span class="comment">//将时间戳转化并输出</span></span><br><span class="line">                Date date = <span class="keyword">new</span> Date(LastLoginTime);</span><br><span class="line">                out.write(date.toLocaleString());</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        out.println(<span class="string">&quot;这是您第一次访问本站&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//服务器给客户端响应一个Cookie</span></span><br><span class="line">    Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;LastLoginTime&quot;</span>, System.currentTimeMillis()+<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置Cookie有效期为</span></span><br><span class="line">    cookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);<span class="comment">//以秒为单位</span></span><br><span class="line">    resp.addCookie(cookie);     <span class="comment">//添加cookie</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieDemo02</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cookies.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cookies[i].getName().equals(<span class="string">&quot;LastLoginTime&quot;</span>))&#123;</span><br><span class="line">                <span class="comment">//将cookie的生命周期设置为0，cookie立马失效</span></span><br><span class="line">                cookies[i].setMaxAge(<span class="number">0</span>);</span><br><span class="line">                resp.addCookie(cookies[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编码与解码"><a href="#编码与解码" class="headerlink" title="编码与解码"></a>编码与解码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编码</span></span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;name&quot;</span>, URLEncoder.encode(<span class="string">&quot;筱语&quot;</span>,<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line"><span class="comment">//解码</span></span><br><span class="line">out.write(URLDecoder.decode(cookie.getValue(),<span class="string">&quot;utf-8&quot;</span>) );</span><br></pre></td></tr></table></figure>
<h2 id="四、Session-重点"><a href="#四、Session-重点" class="headerlink" title="四、Session(重点)"></a>四、Session(重点)</h2><h3 id="1-什么是session"><a href="#1-什么是session" class="headerlink" title="1. 什么是session"></a>1. 什么是session</h3></li>
</ol>
<ul>
<li>服务器会给<strong>每一个用户</strong>（浏览器）创建一个session对象</li>
<li>一个session独占一个浏览器，主要浏览器没有关闭，这个session就存在</li>
<li>用户登录后，整个网站它都可以房屋——&gt;保存用户的信息，保存购物车的信息。</li>
<li>就像一个用户登录b站后，他的信息在一段时间内可以在b站的各个网页保存。</li>
</ul>
<p><img src="https://gitee.com/xiaoyu-98/blogImage/raw/master/img/image-20210323084508377.png"></p>
<h3 id="2-给session中存用户信息"><a href="#2-给session中存用户信息" class="headerlink" title="2. 给session中存用户信息"></a>2. 给session中存用户信息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionDemo01</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//解决乱码问题</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html；charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//得到一个Session</span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        <span class="comment">//给session中存数据</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;倪矗&quot;</span>);</span><br><span class="line">        <span class="comment">//获取Session的ID</span></span><br><span class="line">        String id = session.getId();</span><br><span class="line">        <span class="comment">//判断是不是新的Session</span></span><br><span class="line">        <span class="keyword">if</span> (session.isNew())&#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;Session创建成功，ID:&quot;</span>+id);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;Session已经在服务器中存在&quot;</span>+id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Session创建的时候会把SessionID放到Cookie里，并且把Cookie响应回去了</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-获取session中存储的用户信息"><a href="#3-获取session中存储的用户信息" class="headerlink" title="3. 获取session中存储的用户信息"></a>3. 获取session中存储的用户信息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Session02</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//获取session</span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        <span class="comment">//获取session的id</span></span><br><span class="line">        resp.getWriter().write(session.getAttribute(<span class="string">&quot;name&quot;</span>).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>每次新打开一个浏览器访问地址，都会新建一个session会话，也会向客户端存储一个值为sessionId的cookie。</p>
</blockquote>
<h3 id="4-手动注销session"><a href="#4-手动注销session" class="headerlink" title="4. 手动注销session"></a>4. 手动注销session</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/s2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Session03</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//获取session</span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        <span class="comment">//清除session中的属性</span></span><br><span class="line">        session.removeAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//手动注销Session</span></span><br><span class="line">        session.invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>设置session的失效时间，在web.xml中</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置Session默认的失效时间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--15分钟后Session自动失效，以分钟为单位--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
  </entry>
  <entry>
    <title>Git+Nginx搭建远程Web服务器</title>
    <url>/2021/01/02/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="Git-Nginx搭建远程Web服务器"><a href="#Git-Nginx搭建远程Web服务器" class="headerlink" title="Git+Nginx搭建远程Web服务器"></a>Git+Nginx搭建远程Web服务器</h2><h3 id="一、服务器端配置"><a href="#一、服务器端配置" class="headerlink" title="一、服务器端配置"></a>一、服务器端配置</h3><h4 id="1-创建git文件夹用于存放网站文件"><a href="#1-创建git文件夹用于存放网站文件" class="headerlink" title="1. 创建git文件夹用于存放网站文件"></a>1. 创建git文件夹用于存放网站文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span></span><br><span class="line">$ mkdir .myblog</span><br><span class="line">$ <span class="built_in">cd</span> .myblog/</span><br><span class="line">$ git init --bare</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227082417.png"></p>
<a id="more"></a>
<h4 id="2-在服务器选择一个放置网站的目录，假设这个目录为-var-www-myblog"><a href="#2-在服务器选择一个放置网站的目录，假设这个目录为-var-www-myblog" class="headerlink" title="2. 在服务器选择一个放置网站的目录，假设这个目录为/var/www/myblog"></a>2. 在服务器选择一个放置网站的目录，假设这个目录为/var/www/myblog</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /var/www/myblog</span><br><span class="line">$ <span class="built_in">cd</span> /var/www/</span><br><span class="line">$ git <span class="built_in">clone</span> ~/.myblog myblog</span><br></pre></td></tr></table></figure>
<h4 id="3-自动部署"><a href="#3-自动部署" class="headerlink" title="3. 自动部署"></a>3. 自动部署</h4><p>git 有个功能叫做hook，也就是说在我们提交代码的时候会触发一些操作，这就是hook Git的挂钩（Hook）主要包含：</p>
<p>applypatch-msg post-update pre-rebase commit-msg pre-applypatch update post-commit pre-commit post-receive prepare-commit-msg</p>
<p>我们要用到的是post-update这个hook 进入到我们的git服务器的文件夹~/.myblog/hooks 进入到hook文件夹 使用ls命令可以看到许多hook脚本的sample<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227082438.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.myblog/hooks</span><br><span class="line">$ vim post-update</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227082449.png"><br>新建一个post-update脚本 输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">cd</span> /var/www/myblog</span><br><span class="line">env -i git pull</span><br></pre></td></tr></table></figure>
<p>给新建的post-update赋予权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chmod +x post-update</span><br></pre></td></tr></table></figure>
<h4 id="4-配置nginx"><a href="#4-配置nginx" class="headerlink" title="4..配置nginx"></a>4..配置nginx</h4><p>编辑nginx的配置文件/etc/nginx/sites-available</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vim /etc/nginx/sites-available/default</span><br><span class="line"></span><br><span class="line"><span class="comment">###### 编辑以下内容:</span></span><br><span class="line">server &#123;</span><br><span class="line">	listen 80 default_server;</span><br><span class="line">	listen [::]:80 default_server;</span><br><span class="line"></span><br><span class="line">	<span class="comment"># SSL configuration</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="comment"># listen 443 ssl default_server;</span></span><br><span class="line">	<span class="comment"># listen [::]:443 ssl default_server;</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="comment"># Note: You should disable gzip for SSL traffic.</span></span><br><span class="line">	<span class="comment"># See: https://bugs.debian.org/773332</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="comment"># Read up on ssl_ciphers to ensure a secure configuration.</span></span><br><span class="line">	<span class="comment"># See: https://bugs.debian.org/765782</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="comment"># Self signed certs generated by the ssl-cert package</span></span><br><span class="line">	<span class="comment"># Don&#x27;t use them in a production server!</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="comment"># include snippets/snakeoil.conf;</span></span><br><span class="line"></span><br><span class="line">	root /var/www/myblog;</span><br><span class="line"></span><br><span class="line">	<span class="comment"># Add index.php to the list if you are using PHP</span></span><br><span class="line">	index index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">	server_name _;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">		<span class="comment"># First attempt to serve request as file, then</span></span><br><span class="line">		<span class="comment"># as directory, then fall back to displaying a 404.</span></span><br><span class="line">		try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227082509.png"><br>这里主要修改server_name为你的域名 修改root目录为hexo静态文件的目录,以上面目录举例/var/www/myblog要注意nginx需要有该目录的文件读取权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo chown -R pi:pi /var/www</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227082518.png"><br>重启nginx:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo nginx -s reload</span><br></pre></td></tr></table></figure>
<h4 id="服务端配置完成！！！"><a href="#服务端配置完成！！！" class="headerlink" title="服务端配置完成！！！"></a>服务端配置完成！！！</h4><h3 id="二、客户端配置"><a href="#二、客户端配置" class="headerlink" title="二、客户端配置"></a>二、客户端配置</h3><h4 id="1-通过ssh秘钥和树莓派建立连接"><a href="#1-通过ssh秘钥和树莓派建立连接" class="headerlink" title="1. 通过ssh秘钥和树莓派建立连接"></a>1. 通过ssh秘钥和树莓派建立连接</h4><p><a href="./2020/../../../public/2020/12/31/SSH%E7%A7%98%E9%92%A5%E5%AE%89%E8%A3%85%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/index.html">SSH秘钥连接到服务器</a></p>
<h4 id="2-配置public推送"><a href="#2-配置public推送" class="headerlink" title="2. 配置public推送"></a>2. 配置public推送</h4><p>由于树莓派性能不强劲，所以采用在本机用hexo生成public文件夹。用git提交生成好的public文件夹到树莓派。具体提交方法采用hexo的hexo-deployer-git插件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> myblog</span><br><span class="line">$ vim _config.yml</span><br></pre></td></tr></table></figure>
<p>将deploy配置下的repo参数改为刚刚在树莓派上新建的.myblog路径。<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227082532.png"><br>每次维护完项目后输入: hexo d 即可完成推送。<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227082545.png"></p>
<h5 id="大功告成！！！"><a href="#大功告成！！！" class="headerlink" title="大功告成！！！"></a>大功告成！！！</h5><p>最后附上成果图:<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227082553.png"></p>
]]></content>
      <categories>
        <category>树莓派的反击</category>
      </categories>
      <tags>
        <tag>树莓派服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Git基操</title>
    <url>/2021/01/23/Git%E5%9F%BA%E6%93%8D/</url>
    <content><![CDATA[<h2 id="Git-—-必须得懂的版本管理工具"><a href="#Git-—-必须得懂的版本管理工具" class="headerlink" title="Git — 必须得懂的版本管理工具"></a>Git — 必须得懂的版本管理工具</h2><h3 id="一、-Git最基本操作"><a href="#一、-Git最基本操作" class="headerlink" title="一、 Git最基本操作"></a>一、 Git最基本操作</h3><h4 id="1-初始化git文件夹-—-git-init"><a href="#1-初始化git文件夹-—-git-init" class="headerlink" title="1. 初始化git文件夹 — git init"></a>1. 初始化git文件夹 — git init</h4><p>设项目文件夹为gittest</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> gittest        <span class="comment">#cd到项目文件夹</span></span><br><span class="line">$ git init          <span class="comment">#初始化git文件夹</span></span><br></pre></td></tr></table></figure>
<h4 id="2-查看当前仓库状态-—-git-status"><a href="#2-查看当前仓库状态-—-git-status" class="headerlink" title="2. 查看当前仓库状态 — git status"></a>2. 查看当前仓库状态 — git status</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Git%E5%9F%BA%E6%93%8D/20210227082934.png"></p>
<h4 id="3-添加更改（追踪）-—-git-add"><a href="#3-添加更改（追踪）-—-git-add" class="headerlink" title="3. 添加更改（追踪） — git add ."></a>3. 添加更改（追踪） — git add .</h4><a id="more"></a>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Git%E5%9F%BA%E6%93%8D/20210227083004.png"></p>
<h4 id="4-查看更改内容-—-git-diff"><a href="#4-查看更改内容-—-git-diff" class="headerlink" title="4. 查看更改内容 — git diff"></a>4. 查看更改内容 — git diff</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Git%E5%9F%BA%E6%93%8D/20210227083138.png"><br>按q退出</p>
<h4 id="5-撤回追踪-—-git-reset"><a href="#5-撤回追踪-—-git-reset" class="headerlink" title="5. 撤回追踪 — git reset"></a>5. 撤回追踪 — git reset</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Git%E5%9F%BA%E6%93%8D/20210227083155.png"></p>
<h4 id="6-提交更改-—-git-commit"><a href="#6-提交更改-—-git-commit" class="headerlink" title="6. 提交更改 — git commit"></a>6. 提交更改 — git commit</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;本次提交的描述&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -a     <span class="comment">#自动添加并提交已追踪的修改</span></span><br></pre></td></tr></table></figure>
<h4 id="7-设置一些不提交的文件-—-创建-gitignore"><a href="#7-设置一些不提交的文件-—-创建-gitignore" class="headerlink" title="7. 设置一些不提交的文件 — 创建.gitignore"></a>7. 设置一些不提交的文件 — 创建.gitignore</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rm --cached 文件名        <span class="comment">#删除已经存在的追踪</span></span><br><span class="line">$ vim .gitignore        <span class="comment">#在该文件下写入不想提交的文件名称</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Git%E5%9F%BA%E6%93%8D/20210227083210.png"><br>在.gitignore文件中写入不想提交的文件名<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Git%E5%9F%BA%E6%93%8D/20210227083218.png"><br>git status 查看追踪列表中少了 “nocommit.md”<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Git%E5%9F%BA%E6%93%8D/20210227083233.png"></p>
<h4 id="8-删除已经存在的追踪"><a href="#8-删除已经存在的追踪" class="headerlink" title="8. 删除已经存在的追踪"></a>8. 删除已经存在的追踪</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rm --cached 文件名        <span class="comment">#删除已经存在的追踪</span></span><br></pre></td></tr></table></figure>
<p>从git系统中删除该文件，但依旧存在项目文件夹中，只是停止追踪而已。</p>
<h3 id="二、Git分支-—-不同的时间线"><a href="#二、Git分支-—-不同的时间线" class="headerlink" title="二、Git分支 — 不同的时间线"></a>二、Git分支 — 不同的时间线</h3><p>设新分支名为: newbranch</p>
<h4 id="1-添加新的分支"><a href="#1-添加新的分支" class="headerlink" title="1. 添加新的分支"></a>1. 添加新的分支</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch newbranch</span><br></pre></td></tr></table></figure>
<h4 id="2-查看分支"><a href="#2-查看分支" class="headerlink" title="2. 查看分支"></a>2. 查看分支</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch        <span class="comment">#查看当前项目分支有哪些</span></span><br></pre></td></tr></table></figure>
<h4 id="3-切换分支"><a href="#3-切换分支" class="headerlink" title="3. 切换分支"></a>3. 切换分支</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout newbranch</span><br></pre></td></tr></table></figure>
<h4 id="4-合并分支"><a href="#4-合并分支" class="headerlink" title="4. 合并分支"></a>4. 合并分支</h4><p>在当前分支执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git merge 另一个分支名称</span><br></pre></td></tr></table></figure>
<h4 id="5-删除分支"><a href="#5-删除分支" class="headerlink" title="5. 删除分支"></a>5. 删除分支</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -d newbranch       <span class="comment">#删除已经合并或提交的分支</span></span><br><span class="line">$ git branch -D newbranch2      <span class="comment">#强制删除分支</span></span><br></pre></td></tr></table></figure>
<h3 id="三、Git的提交"><a href="#三、Git的提交" class="headerlink" title="三、Git的提交"></a>三、Git的提交</h3><h4 id="1-指定远程仓库"><a href="#1-指定远程仓库" class="headerlink" title="1. 指定远程仓库"></a>1. 指定远程仓库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add origin https://github......       </span><br></pre></td></tr></table></figure>
<h4 id="2-推送到远程端"><a href="#2-推送到远程端" class="headerlink" title="2. 推送到远程端"></a>2. 推送到远程端</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push --set-upstream origin master</span><br></pre></td></tr></table></figure>
<h4 id="3-下载更新远程端的项目"><a href="#3-下载更新远程端的项目" class="headerlink" title="3. 下载更新远程端的项目"></a>3. 下载更新远程端的项目</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>是基操啦</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP协议</title>
    <url>/2021/04/27/HTTP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h2 id="什么是HTTP协议"><a href="#什么是HTTP协议" class="headerlink" title="什么是HTTP协议"></a>什么是HTTP协议</h2><p>HTTP（超文本传输协议）是一个简单的请求–响应协议，通常应用在TCP之上</p>
<ul>
<li>html、字符</li>
<li>图片、音频、视频、定位</li>
</ul>
<a id="more"></a>
<h2 id="两个时代"><a href="#两个时代" class="headerlink" title="两个时代"></a>两个时代</h2><p>Http1.0:客户端与web服务器连接后，只能获得一个web资源，断开连接。<br>Http2.0:客户端和web服务器连接后，可以获得多个web资源</p>
<h2 id="Http请求"><a href="#Http请求" class="headerlink" title="Http请求"></a>Http请求</h2><ul>
<li>客户端 – 发请求(Request) – 服务器 </li>
<li><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210505144943.png"><h3 id="1-请求行"><a href="#1-请求行" class="headerlink" title="1. 请求行"></a>1. 请求行</h3></li>
<li>请求行中的请求方式：GET</li>
<li>请求方式：<strong>GET,POST</strong>,HEAD,DELETE,TRACT,PUT…<ul>
<li>GET:请求能携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全但是高效。</li>
<li>POST:请求能携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全但是不高效。<h3 id="2-消息头"><a href="#2-消息头" class="headerlink" title="2. 消息头"></a>2. 消息头</h3><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210505145844.png"><h2 id="Http响应"><a href="#Http响应" class="headerlink" title="Http响应"></a>Http响应</h2></li>
</ul>
</li>
<li>服务器 – 响应(Response) – 客户端 <h3 id="1-响应体"><a href="#1-响应体" class="headerlink" title="1. 响应体"></a>1. 响应体</h3><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210505150406.png"><h3 id="2-响应状态码"><a href="#2-响应状态码" class="headerlink" title="2. 响应状态码"></a>2. 响应状态码</h3>200：请求响应成功 200<br>3XX：请求重定向</li>
<li>重定向：你重新到我给你的新位置上去。</li>
</ul>
<p>4XX：找不到资源 404</p>
<ul>
<li>资源找不到<br>5XX：服务器代码错误 500</li>
<li>502：网关错误</li>
</ul>
<p><strong>常见面试题</strong><br>当你在浏览器地址栏输入地址并回车的一瞬间到页面完全展示出来，中间经历了什么？</p>
]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo框架搭建个人博客</title>
    <url>/2021/01/02/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="Hexo框架搭建个人博客"><a href="#Hexo框架搭建个人博客" class="headerlink" title="Hexo框架搭建个人博客"></a>Hexo框架搭建个人博客</h2><h3 id="一、安装Hexo"><a href="#一、安装Hexo" class="headerlink" title="一、安装Hexo"></a>一、安装Hexo</h3><h4 id="使用cnpm切换到淘宝源安装"><a href="#使用cnpm切换到淘宝源安装" class="headerlink" title="使用cnpm切换到淘宝源安装"></a>使用cnpm切换到淘宝源安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">安装cnpm并切换到淘宝源:</span><br><span class="line">sudo npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083441.png"></p>
<a id="more"></a>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">用cnpm安装hexo:</span><br><span class="line">sudo cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083456.png"></p>
<h6 id="至此hexo安装完成"><a href="#至此hexo安装完成" class="headerlink" title="至此hexo安装完成"></a>至此hexo安装完成</h6><h3 id="二、Hexo框架的基本使用"><a href="#二、Hexo框架的基本使用" class="headerlink" title="二、Hexo框架的基本使用"></a>二、Hexo框架的基本使用</h3><h5 id="1-新建或打开项目文件夹"><a href="#1-新建或打开项目文件夹" class="headerlink" title="1. 新建或打开项目文件夹"></a>1. 新建或打开项目文件夹</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span></span><br><span class="line">$ mkdir blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure>
<h5 id="2-初始化项目"><a href="#2-初始化项目" class="headerlink" title="2. 初始化项目"></a>2. 初始化项目</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo hexo init</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083506.png"></p>
<h5 id="3-创建文章"><a href="#3-创建文章" class="headerlink" title="3. 创建文章"></a>3. 创建文章</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo hexo n <span class="string">&quot;文章名称&quot;</span>  <span class="comment">#其中的n表示new</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083516.png"></p>
<h5 id="4-启动博客-本地展示预览"><a href="#4-启动博客-本地展示预览" class="headerlink" title="4. 启动博客(本地展示预览)"></a>4. 启动博客(本地展示预览)</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s            <span class="comment">#其中的s表示server</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083527.png"></p>
<h6 id="可以打开浏览器进入-http-localhost-4000-进行预览"><a href="#可以打开浏览器进入-http-localhost-4000-进行预览" class="headerlink" title="可以打开浏览器进入 http://localhost:4000 进行预览"></a>可以打开浏览器进入 <a href="http://localhost:4000/">http://localhost:4000</a> 进行预览</h6><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083537.png"></p>
<h5 id="5-文章路径（位置）"><a href="#5-文章路径（位置）" class="headerlink" title="5. 文章路径（位置）"></a>5. 文章路径（位置）</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls ~/blog/<span class="built_in">source</span>/_posts/</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083551.png"></p>
<h5 id="6-生成文章（generate）"><a href="#6-生成文章（generate）" class="headerlink" title="6. 生成文章（generate）"></a>6. 生成文章（generate）</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083600.png"></p>
<h5 id="7-清理缓存"><a href="#7-清理缓存" class="headerlink" title="7. 清理缓存"></a>7. 清理缓存</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/blog</span><br><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083611.png"></p>
<h3 id="三、Hexo的一些插件"><a href="#三、Hexo的一些插件" class="headerlink" title="三、Hexo的一些插件"></a>三、Hexo的一些插件</h3><h4 id="插入图片插件"><a href="#插入图片插件" class="headerlink" title="插入图片插件"></a>插入图片插件</h4><h5 id="1-安装插件，在hexo根目录打开Git-Bash-执行"><a href="#1-安装插件，在hexo根目录打开Git-Bash-执行" class="headerlink" title="1.安装插件，在hexo根目录打开Git Bash,执行"></a>1.安装插件，在hexo根目录打开Git Bash,执行</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<h5 id="2-打开hexo的配置文件-config-yml找到-post-asset-folder，把这个选项从false改成true"><a href="#2-打开hexo的配置文件-config-yml找到-post-asset-folder，把这个选项从false改成true" class="headerlink" title="2. 打开hexo的配置文件_config.yml找到 post_asset_folder，把这个选项从false改成true"></a>2. 打开hexo的配置文件_config.yml找到 post_asset_folder，把这个选项从false改成true</h5><h5 id="3-打开"><a href="#3-打开" class="headerlink" title="3.打开"></a>3.打开</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/node_modules/hexo-asset-image/index.js</span><br></pre></td></tr></table></figure>
<p>将内容更换为下面的代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">var cheerio = require(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line"><span class="keyword">function</span> getPosition(str, m, i) &#123;</span><br><span class="line">  <span class="built_in">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version = String(hexo.version).split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span>(data)&#123;</span><br><span class="line">  var config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">        var link = data.permalink;</span><br><span class="line">    <span class="keyword">if</span>(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</span><br><span class="line">       var beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, 1) + 1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       var beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, 3) + 1;</span><br><span class="line">    // In hexo 3.1.1, the permalink of <span class="string">&quot;about&quot;</span> page is like <span class="string">&quot;.../about/index.html&quot;</span>.</span><br><span class="line">    var endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + 1;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(var i = 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      var $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(this).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">            // For windows style path, we replace <span class="string">&#x27;\&#x27;</span> to <span class="string">&#x27;/&#x27;</span>.</span><br><span class="line">            var src = $(this).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!/http[s]*.*|\/\/.*/.<span class="built_in">test</span>(src) &amp;&amp;</span><br><span class="line">               !/^\s*\//.<span class="built_in">test</span>(src)) &#123;</span><br><span class="line">              // For <span class="string">&quot;about&quot;</span> page, the first part of <span class="string">&quot;src&quot;</span> can<span class="string">&#x27;t be removed.</span></span><br><span class="line"><span class="string">              // In addition, to support multi-level local directory.</span></span><br><span class="line"><span class="string">              var linkArray = link.split(&#x27;</span>/<span class="string">&#x27;).filter(function(elem)&#123;</span></span><br><span class="line"><span class="string">                return elem != &#x27;</span><span class="string">&#x27;;</span></span><br><span class="line"><span class="string">              &#125;);</span></span><br><span class="line"><span class="string">              var srcArray = src.split(&#x27;</span>/<span class="string">&#x27;).filter(function(elem)&#123;</span></span><br><span class="line"><span class="string">                return elem != &#x27;</span><span class="string">&#x27; &amp;&amp; elem != &#x27;</span>.<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">              &#125;);</span></span><br><span class="line"><span class="string">              if(srcArray.length &gt; 1)</span></span><br><span class="line"><span class="string">                srcArray.shift();</span></span><br><span class="line"><span class="string">              src = srcArray.join(&#x27;</span>/<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">              $(this).attr(&#x27;</span>src<span class="string">&#x27;, config.root + link + src);</span></span><br><span class="line"><span class="string">              console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;else&#123;</span></span><br><span class="line"><span class="string">            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span></span><br><span class="line"><span class="string">            console.info&amp;&amp;console.info($(this));</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">      data[key] = $.html();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure>
<h5 id="4-现在就可以插入图片了，比如hexo-new-post-photo之后就在source-posts生成photo-md文件和photo文件夹，我们把要插入的图片复制到photo文件夹内就好了。"><a href="#4-现在就可以插入图片了，比如hexo-new-post-photo之后就在source-posts生成photo-md文件和photo文件夹，我们把要插入的图片复制到photo文件夹内就好了。" class="headerlink" title="4.现在就可以插入图片了，比如hexo new post photo之后就在source/_posts生成photo.md文件和photo文件夹，我们把要插入的图片复制到photo文件夹内就好了。"></a>4.现在就可以插入图片了，比如hexo new post photo之后就在source/_posts生成photo.md文件和photo文件夹，我们把要插入的图片复制到photo文件夹内就好了。</h5><h4 id="Hexo下Git代码提交插件-–-hexo-deployer-git"><a href="#Hexo下Git代码提交插件-–-hexo-deployer-git" class="headerlink" title="Hexo下Git代码提交插件 – hexo-deployer-git"></a>Hexo下Git代码提交插件 – hexo-deployer-git</h4><ol>
<li>输入以下命令安装插件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
<li>修改配置：_config.yml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: &lt;repository url&gt; <span class="comment">#仓库地址</span></span><br><span class="line">  branch: [branch]       <span class="comment">#分支</span></span><br><span class="line">  message: [message]     <span class="comment">#描述</span></span><br></pre></td></tr></table></figure>
<img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083633.png"></li>
<li>生成站点文件并推送至远程库。执行 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure></li>
<li>登入 Github/BitBucket/Gitlab，请在库设置（Repository Settings）中将默认分支设置为_config.yml配置中的分支名称。稍等片刻，您的站点就会显示在您的Github Pages中。<h5 id="这一切是如何发生的？"><a href="#这一切是如何发生的？" class="headerlink" title="这一切是如何发生的？"></a>这一切是如何发生的？</h5>当执行 hexo deploy 时，Hexo 会将 public 目录中的文件和目录推送至 _config.yml 中指定的远端仓库和分支中，并且完全覆盖该分支下的已有内容。<h4 id="Hexo主题安装"><a href="#Hexo主题安装" class="headerlink" title="Hexo主题安装"></a>Hexo主题安装</h4></li>
<li>进入博客所在的文件夹<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> myblog  <span class="comment">#我的博客项目名称为myblog</span></span><br></pre></td></tr></table></figure></li>
<li>从我的gitee仓库中下载主题(gitee快)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://gitee.com/Haikez/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083647.png"></li>
<li>将blog目录下_config.yml里theme的名称由landscape修改为next<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083657.png"></li>
<li>清除hexo缓存使用命令：hexo clear，生成项目文件命令:hexo g,验证主题是否正确启用，命令为：hexo s –debug<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083706.png"><h5 id="大功告成！！！"><a href="#大功告成！！！" class="headerlink" title="大功告成！！！"></a>大功告成！！！</h5></li>
</ol>
]]></content>
      <categories>
        <category>搭建个人博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC详解</title>
    <url>/2021/05/12/JDBC%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="JDBC详解"><a href="#JDBC详解" class="headerlink" title="JDBC详解"></a>JDBC详解</h1><h2 id="一、什么是JDBC"><a href="#一、什么是JDBC" class="headerlink" title="一、什么是JDBC"></a>一、什么是JDBC</h2><p>JDBC：Java连接数据库！<br><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210512143552.png"><br>需要的jar包支持</p>
<ul>
<li>java.sql</li>
<li>javax.sql</li>
<li>mysql-connecter-java…连接驱动(必须要导入)</li>
</ul>
<a id="more"></a>
<h2 id="二、实验环境搭建"><a href="#二、实验环境搭建" class="headerlink" title="二、实验环境搭建"></a>二、实验环境搭建</h2><h3 id="1-SQL语句创建表"><a href="#1-SQL语句创建表" class="headerlink" title="1. SQL语句创建表"></a>1. SQL语句创建表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users ( id <span class="type">INT</span> <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>, `name` <span class="type">VARCHAR</span> ( <span class="number">40</span> ), `password` <span class="type">VARCHAR</span> ( <span class="number">40</span> ), email <span class="type">VARCHAR</span> ( <span class="number">60</span> ), birthday <span class="type">DATE</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users ( id, `name`, `password`, email, birthday )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">	( <span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;zs@qq.com&#x27;</span>, <span class="string">&#x27;2000-01-01&#x27;</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users ( id, `name`, `password`, email, birthday )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">	( <span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;ls@qq.com&#x27;</span>, <span class="string">&#x27;2000-01-01&#x27;</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users ( id, `name`, `password`, email, birthday )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">	( <span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;ww@qq.com&#x27;</span>, <span class="string">&#x27;2000-01-01&#x27;</span> );∞</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure>
<h3 id="2-导入数据库依赖"><a href="#2-导入数据库依赖" class="headerlink" title="2. 导入数据库依赖"></a>2. 导入数据库依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql的驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-在IDEA中配置数据库"><a href="#3-在IDEA中配置数据库" class="headerlink" title="3. 在IDEA中配置数据库"></a>3. 在IDEA中配置数据库</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210512154748.png"></p>
<h3 id="4-JDBC固定步骤"><a href="#4-JDBC固定步骤" class="headerlink" title="4. JDBC固定步骤"></a>4. JDBC固定步骤</h3><ol>
<li>加载驱动</li>
<li>连接数据库,代表数据库</li>
<li>向数据库发送SQL的对象Statement，PreparedStatement ：CRUD</li>
<li>编写SQL(根据业务，不同的SQL)</li>
<li>执行查询SQL,返回一个ResultSet结果集</li>
<li>关闭连接，释放资源（一定要做） 先开后关</li>
</ol>
<h3 id="5-直接执行SQL"><a href="#5-直接执行SQL" class="headerlink" title="5. 直接执行SQL"></a>5. 直接执行SQL</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//配置信息</span></span><br><span class="line">    <span class="comment">//userUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span></span><br><span class="line">    String url = <span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?userUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span>;</span><br><span class="line">    String username=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    String password=<span class="string">&quot;nc20011019&quot;</span>;</span><br><span class="line">    <span class="comment">//1. 加载驱动</span></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 连接数据库,代表数据库</span></span><br><span class="line">    Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 向数据库发送SQL的对象Statement：CRUD</span></span><br><span class="line">    Statement statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 编写SQL</span></span><br><span class="line">    String sql = <span class="string">&quot;SELECT * FROM users;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 执行查询SQL,返回一个ResultSet结果集</span></span><br><span class="line">    ResultSet rs = statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id=&quot;</span>+rs.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;name=&quot;</span>+rs.getObject(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;password=&quot;</span>+rs.getObject(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;email=&quot;</span>+rs.getObject(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;birthday=&quot;</span>+rs.getObject(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6. 关闭连接，释放资源（一定要做） 先开后关</span></span><br><span class="line"></span><br><span class="line">    rs.close();</span><br><span class="line">    statement.close();</span><br><span class="line">    connection.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-预编译执行SQL"><a href="#6-预编译执行SQL" class="headerlink" title="6. 预编译执行SQL"></a>6. 预编译执行SQL</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testJDBC02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//配置信息</span></span><br><span class="line">        <span class="comment">//userUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?userUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span>;</span><br><span class="line">        String username=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password=<span class="string">&quot;nc20011019&quot;</span>;</span><br><span class="line">        <span class="comment">//1. 加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 连接数据库,代表数据库</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 编写SQL</span></span><br><span class="line">        String sql = <span class="string">&quot;insert into users (id, name, password, email, birthday) value (?,?,?,?,?);&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 预编译</span></span><br><span class="line">        PreparedStatement preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">        preparedStatement.setInt(<span class="number">1</span>,<span class="number">4</span>); <span class="comment">//给第一个占位符&#x27;？&#x27;赋值为4；</span></span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>,<span class="string">&quot;王二麻&quot;</span>); <span class="comment">//给第二个占位符&#x27;？&#x27;赋值为&quot;王二麻&quot;；</span></span><br><span class="line">        preparedStatement.setString(<span class="number">3</span>,<span class="string">&quot;123456&quot;</span>); <span class="comment">//给第三个占位符&#x27;？&#x27;赋值为&quot;123456&quot;；</span></span><br><span class="line">        preparedStatement.setString(<span class="number">4</span>,<span class="string">&quot;wem@qq.com&quot;</span>); <span class="comment">//给第四个占位符&#x27;？&#x27;赋值为&quot;wem@qq.com&quot;；</span></span><br><span class="line">        preparedStatement.setDate(<span class="number">5</span>,<span class="keyword">new</span> Date(<span class="keyword">new</span> java.util.Date().getTime())); <span class="comment">//给第五个占位符&#x27;？&#x27;赋值为new Date(new java.util.Date().getTime())；第一个Date是SQL的Date第二个才是java的Date</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 执行SQL</span></span><br><span class="line">        <span class="keyword">int</span> i = preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6. 关闭连接，释放资源（一定要做） 先开后关</span></span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>预编译的SQL，一次编译后，在后面直接执行就可，不需要再次传递sql语句.<br>int i = preparedStatement.executeUpdate();</p>
</blockquote>
<h2 id="三、事务"><a href="#三、事务" class="headerlink" title="三、事务"></a>三、事务</h2><p><strong>要么都成功，要么都失败！<br>ACID原则：保证数据的安全。</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">开启事务</span><br><span class="line">事务提交    commit()</span><br><span class="line">事务回滚    roallback()</span><br><span class="line">关闭事务</span><br><span class="line"></span><br><span class="line">转账:</span><br><span class="line">A:1000</span><br><span class="line">B:1000</span><br><span class="line"></span><br><span class="line">A(900)  --100--&gt;  B(1100)</span><br><span class="line">A转给B 100 假如服务器崩了，事务回滚 </span><br></pre></td></tr></table></figure>
<h3 id="1-Junit单元测试（可以免写main方法！）"><a href="#1-Junit单元测试（可以免写main方法！）" class="headerlink" title="1. Junit单元测试（可以免写main方法！）"></a>1. Junit单元测试（可以免写main方法！）</h3><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>/<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nichu.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testJDBC03</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span> <span class="comment">//在方法上加入@Test注解，该方法就可执行！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-事务实现转账"><a href="#2-事务实现转账" class="headerlink" title="2. 事务实现转账"></a>2. 事务实现转账</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testJDBC03</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//配置信息</span></span><br><span class="line">        <span class="comment">//userUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?userUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span>;</span><br><span class="line">        String username=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password=<span class="string">&quot;nc20011019&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 加载驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//2. 连接数据库,代表数据库</span></span><br><span class="line">            connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3. 通知数据库开启事务,false开启</span></span><br><span class="line">            connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//3. 编写SQL</span></span><br><span class="line">            String sql = <span class="string">&quot;UPDATE account set money=money-100 where name = &#x27;王五&#x27;;&quot;</span>;</span><br><span class="line">            connection.prepareStatement(sql).executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//制造错误</span></span><br><span class="line">            <span class="comment">//int i=1/0;</span></span><br><span class="line">            String sql2 =  <span class="string">&quot;UPDATE account set money=money+100 where name = &#x27;赵四&#x27;;&quot;</span>;</span><br><span class="line">            connection.prepareStatement(sql2).executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4. 以上语句都执行成功了就提交事务</span></span><br><span class="line">            connection.commit();</span><br><span class="line">            System.out.println(<span class="string">&quot;转账成功！！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//5. 如果出现异常执行回滚事务</span></span><br><span class="line">                connection.rollback();</span><br><span class="line">                System.out.println(<span class="string">&quot;转账失败！！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//6. 关闭连接，释放资源（一定要做） 先开后关</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：要开启通知数据库开启事务connection.setAutoCommit(false);</strong></p>
]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
  </entry>
  <entry>
    <title>JSP详解</title>
    <url>/2021/05/10/JSP%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="JSP详解"><a href="#JSP详解" class="headerlink" title="JSP详解"></a>JSP详解</h1><h2 id="一、什么是JSP"><a href="#一、什么是JSP" class="headerlink" title="一、什么是JSP"></a>一、什么是JSP</h2><p>Java Server Pages：Java服务端页面，也和Servlet一样开发动态web<br>最大特点：</p>
<ul>
<li>写JSP就像在写HTML</li>
<li>区别：<ul>
<li>HTML只给用户提供静态数据</li>
<li>JSP页面中可以嵌入JAVA代码，为用户提供动态数据；</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h2 id="二、JSP原理"><a href="#二、JSP原理" class="headerlink" title="二、JSP原理"></a>二、JSP原理</h2><p>思路：JSP到底是如何执行的？</p>
<ul>
<li>代码层面没有任何问题</li>
<li>服务器内部工作<ul>
<li>tomcat中有个work目录</li>
<li>IDEA中使用Tomcat会在IDEA的tomcat中产生一个work目录</li>
<li>jsp页面或转化为java程序</li>
</ul>
</li>
</ul>
<p><strong>浏览器向服务器发送请求，不管访问什么资源，其实都在访问Servlet</strong></p>
<p>JSP最终也会被转化为一个Java类！，<strong>JSP本质上就是一个Servlet！</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//JSP服务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br></pre></td></tr></table></figure>
<ol>
<li>判断请求</li>
<li>内置了一些对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> jakarta.servlet.jsp.PageContext pageContext;  <span class="comment">//页面上下文</span></span><br><span class="line"><span class="keyword">final</span> jakarta.servlet.ServletContext application;</span><br><span class="line"><span class="keyword">final</span> jakarta.servlet.ServletConfig config;</span><br><span class="line">jakarta.servlet.jsp.JspWriter out = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">final</span> java.lang.Object page = <span class="keyword">this</span>;</span><br><span class="line">jakarta.servlet.jsp.JspWriter _jspx_out = <span class="keyword">null</span>;</span><br><span class="line">jakarta.servlet.jsp.PageContext _jspx_page_context = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></li>
<li>输出页面前增加的代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">pageContext = _jspxFactory.getPageContext(<span class="keyword">this</span>, request, response,</span><br><span class="line">        <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="number">8192</span>, <span class="keyword">true</span>);</span><br><span class="line">_jspx_page_context = pageContext;</span><br><span class="line">application = pageContext.getServletContext();</span><br><span class="line">config = pageContext.getServletConfig();</span><br><span class="line">out = pageContext.getOut();</span><br><span class="line">_jspx_out = out;</span><br></pre></td></tr></table></figure></li>
<li>以上的这些对象，问你可以在JSP页面中直接使用！<br><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210510164627.png"></li>
<li>在JSP中只要是Java代码就会原封不动的输出；如果是HTML代码，就会被转化为如下格式输出到前端<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">out.write(<span class="string">&quot;&lt;!DOCTYPE html&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;html lang=\&quot;en\&quot;&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;    &lt;head&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;        &lt;meta charset=\&quot;UTF-8\&quot; /&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;        &lt;title&gt;&quot;</span>);</span><br><span class="line">out.print(request.getServletContext().getServerInfo() );</span><br><span class="line">out.write(<span class="string">&quot;&lt;/title&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;        &lt;link href=\&quot;favicon.ico\&quot; rel=\&quot;icon\&quot; type=\&quot;image/x-icon\&quot; /&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;        &lt;link href=\&quot;tomcat.css\&quot; rel=\&quot;stylesheet\&quot; type=\&quot;text/css\&quot; /&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;    &lt;/head&gt;\n&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="三、JSP基础语法"><a href="#三、JSP基础语法" class="headerlink" title="三、JSP基础语法"></a>三、JSP基础语法</h2>任何语言都有自己的语法，JSP作为Java技术的扩充，它拥有一些自己扩充的语法（了解知道即可），Java的所有语法JSP都支持！</li>
</ol>
<h3 id="1-JSP导包："><a href="#1-JSP导包：" class="headerlink" title="1. JSP导包："></a>1. JSP导包：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Servlet依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- JSP依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- standard标签库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- JSTL表达式依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-JSP表达式"><a href="#2-JSP表达式" class="headerlink" title="2. JSP表达式"></a>2. JSP表达式</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--JSP表达式</span><br><span class="line"> 作用：用来将程序的输出结果，输出到客户端</span><br><span class="line">&lt;%= 变量或表达式%&gt;</span><br><span class="line">--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%=<span class="keyword">new</span> java.util.Date()%&gt;</span><br></pre></td></tr></table></figure>
<h3 id="3-JSP脚本片段"><a href="#3-JSP脚本片段" class="headerlink" title="3. JSP脚本片段"></a>3. JSP脚本片段</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--脚本片段--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%--在代码中嵌入HTML元素--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">%&gt;</span><br><span class="line">  &lt;h1&gt;hello&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<h3 id="4-JSP声明"><a href="#4-JSP声明" class="headerlink" title="4. JSP声明"></a>4. JSP声明</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Loading Servlet&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> globaVar=<span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.printf(<span class="string">&quot;进入了方法&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>被声明过的语句会被编译到JSP生成的Java的类中，其他的，就会被放在_jspService方法中</p>
</blockquote>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210510173603.png"></p>
<p>JSP的注释不会在客户端显示，HTML的会</p>
<h2 id="四、-JSP指令-（page、include、taglib）"><a href="#四、-JSP指令-（page、include、taglib）" class="headerlink" title="四、 JSP指令 （page、include、taglib）"></a>四、 JSP指令 （page、include、taglib）</h2><h3 id="1-page指令"><a href="#1-page指令" class="headerlink" title="1. page指令"></a>1. page指令</h3><p>可以用来配置错误页面(erroPage)</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- page自定义<span class="number">500</span>错误 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在index.jsp中写入 --&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> errorPage=<span class="string">&quot;error/500.jsp&quot;</span> %&gt;</span><br><span class="line">&lt;!-- 在<span class="number">500.</span>jsp中写入 --&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- JSP获得项目路径 --&gt;</span><br><span class="line">    &lt;img src=$&#123;pageContext.request.contextPath&#125;/error/<span class="number">500.</span>png alt=<span class="string">&quot;500&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<!-- 项目结构如下 -->
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210510181153.png"></p>
<p><strong>配置错误页面方法二</strong>：直接在xml中配置(推荐使用)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--错误代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--错误页面路径（相对于项目地址）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error/404.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-include指令"><a href="#2-include指令" class="headerlink" title="2. include指令"></a>2. include指令</h3><ul>
<li><h4 id="include可以拼接页面，将别的页面拼接到本页"><a href="#include可以拼接页面，将别的页面拼接到本页" class="headerlink" title="include可以拼接页面，将别的页面拼接到本页"></a>include可以拼接页面，将别的页面拼接到本页</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;common/header.jsp&quot;</span>%&gt;</span><br><span class="line">&lt;h1&gt;我是主体&lt;/h1&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;common/footer.jsp&quot;</span>%&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="拼接页面的第二种方式（jsp-include标签引用）"><a href="#拼接页面的第二种方式（jsp-include标签引用）" class="headerlink" title="拼接页面的第二种方式（jsp:include标签引用）"></a>拼接页面的第二种方式（jsp:include标签引用）</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;common/header.jsp&quot;</span>/&gt;</span><br><span class="line">&lt;h1&gt;我是主体&lt;/h1&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;common/footer.jsp&quot;</span>/&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p>最终效果<br><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210510230556.png"></p>
</li>
</ul>
<p><strong>注意：include是将header.jsp和footer.jsp的内容拼接到当前页面中。<br>相当于复制粘贴过来。然而，jsp:include标签则是相当于引用</strong></p>
<h2 id="五、JSP内置对象及作用域"><a href="#五、JSP内置对象及作用域" class="headerlink" title="五、JSP内置对象及作用域"></a>五、JSP内置对象及作用域</h2><h3 id="九大内置对象"><a href="#九大内置对象" class="headerlink" title="九大内置对象"></a>九大内置对象</h3><ul>
<li>PageContext 存东西</li>
<li>Request 存东西</li>
<li>Response</li>
<li>Session 存东西</li>
<li>Application【ServletContext】 存东西</li>
<li>config【ServletConfig】</li>
<li>out 输出</li>
<li>page</li>
<li>exception</li>
</ul>
<h3 id="JSP存数据对象的作用域"><a href="#JSP存数据对象的作用域" class="headerlink" title="JSP存数据对象的作用域:"></a>JSP存数据对象的作用域:</h3><p>PageContext<br>Request<br>Session<br>Application</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pageContext.setAttribute(<span class="string">&quot;name1&quot;</span>,<span class="string">&quot;倪矗1号&quot;</span>);<span class="comment">//保存的数据只在一个页面内有效</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;name2&quot;</span>,<span class="string">&quot;倪矗2号&quot;</span>);    <span class="comment">//保存的数据只在一次请求中有效，请求转发会携带这个数据</span></span><br><span class="line">session.setAttribute(<span class="string">&quot;name3&quot;</span>,<span class="string">&quot;倪矗3号&quot;</span>);    <span class="comment">//保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器</span></span><br><span class="line">application.setAttribute(<span class="string">&quot;name4&quot;</span>,<span class="string">&quot;倪矗4号&quot;</span>);<span class="comment">//保存的数据只在服务器中有效，从打开服务器到关闭服务器</span></span><br></pre></td></tr></table></figure>
<h3 id="修改pageContext对象的作用域"><a href="#修改pageContext对象的作用域" class="headerlink" title="修改pageContext对象的作用域"></a>修改pageContext对象的作用域</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pageContext.setAttribute(<span class="string">&quot;name1&quot;</span>,<span class="string">&quot;倪矗1号&quot;</span>,PageContext.SESSION_SCOPE);</span><br><span class="line"><span class="comment">// public static final int PAGE_SCOPE = 1;</span></span><br><span class="line"><span class="comment">// public static final int REQUEST_SCOPE = 2;</span></span><br><span class="line"><span class="comment">// public static final int SESSION_SCOPE = 3;</span></span><br><span class="line"><span class="comment">// public static final int APPLICATION_SCOPE = 4;</span></span><br></pre></td></tr></table></figure>
<h4 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h4><p>request：客户端向服务器发送请求，产生的数据，用户看完就没用了<br>session：客户端向服务器发送请求，产生的数据，用户用完一会儿还要用<br>application：客户端向服务器发送请求，产生的数据，一个用户用完了，其他的用户还肯使用。</p>
<h4 id="pageContext实现请求转发"><a href="#pageContext实现请求转发" class="headerlink" title="pageContext实现请求转发:"></a>pageContext实现请求转发:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pageContext.forward(<span class="string">&quot;/index.jsp&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="六、JSP标签、JSTL表达式、EL表达式"><a href="#六、JSP标签、JSTL表达式、EL表达式" class="headerlink" title="六、JSP标签、JSTL表达式、EL表达式"></a>六、JSP标签、JSTL表达式、EL表达式</h2><h3 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式: ${}"></a>EL表达式: ${}</h3><ul>
<li>获取数据</li>
<li>执行运算</li>
<li>获取web开发的常用对象</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;coreif.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    EL表达式获取表单中的数据</span></span><br><span class="line"><span class="comment">    $&#123;param.参数名&#125; </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;param.usernaem&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-JSP标签："><a href="#1-JSP标签：" class="headerlink" title="1. JSP标签："></a>1. JSP标签：</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210511150512.png"></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;!-- <span class="number">1.</span> 请求转发标签 --&gt;</span><br><span class="line">&lt;jsp:forward page=<span class="string">&quot;/pageContextDemo01.jsp&quot;</span>&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;倪矗&quot;</span>/&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">&quot;age&quot;</span> value=<span class="string">&quot;18&quot;</span>/&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br><span class="line">&lt;!-- <span class="number">2.</span> 引用文件标签 --&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;common/header.jsp&quot;</span>/&gt;</span><br><span class="line">&lt;h1&gt;我是主体&lt;/h1&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;common/footer.jsp&quot;</span>/&gt;</span><br><span class="line">&lt;!-- <span class="number">3.</span> 引用实体类（JavaBean）标签 --&gt;</span><br><span class="line">&lt;jsp:useBean id=<span class="string">&quot;people&quot;</span>（对象） <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.nichu.People&quot;</span>（类） scope=<span class="string">&quot;page&quot;</span>（作用域）/&gt;</span><br><span class="line">&lt;!-- <span class="number">4.</span> 给对象赋值 --&gt;</span><br><span class="line">&lt;jsp:setProperty name=<span class="string">&quot;people&quot;</span> property=<span class="string">&quot;address&quot;</span> value=<span class="string">&quot;杭州&quot;</span>/&gt;</span><br><span class="line">&lt;jsp:setProperty name=<span class="string">&quot;people&quot;</span> property=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;倪矗&quot;</span>/&gt;</span><br><span class="line">&lt;jsp:setProperty name=<span class="string">&quot;people&quot;</span> property=<span class="string">&quot;id&quot;</span> value=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">&lt;jsp:setProperty name=<span class="string">&quot;people&quot;</span> property=<span class="string">&quot;age&quot;</span> value=<span class="string">&quot;18&quot;</span>/&gt;</span><br><span class="line">&lt;!-- <span class="number">5.</span> 取值 --&gt;</span><br><span class="line">&lt;jsp:getProperty name=<span class="string">&quot;people&quot;</span> property=<span class="string">&quot;name&quot;</span>/&gt;</span><br><span class="line">&lt;jsp:getProperty name=<span class="string">&quot;people&quot;</span> property=<span class="string">&quot;id&quot;</span>/&gt;</span><br><span class="line">&lt;jsp:getProperty name=<span class="string">&quot;people&quot;</span> property=<span class="string">&quot;adress&quot;</span>/&gt;</span><br><span class="line">&lt;jsp:getProperty name=<span class="string">&quot;people&quot;</span> property=<span class="string">&quot;age&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2-JSTL表达式"><a href="#2-JSTL表达式" class="headerlink" title="2. JSTL表达式"></a>2. JSTL表达式</h3><p>JSTL标签库的使用是为了弥补HTML标签的不足；它自定义了许多标签，可以供我们使用，标签库的功能和java代码一样！<br><a href="https://www.runoob.com/jsp/jsp-jstl.html">JSTL标签库</a></p>
<h2 id="七、JavaBean"><a href="#七、JavaBean" class="headerlink" title="七、JavaBean"></a>七、JavaBean</h2><p>实体类<br>JavaBean有特定写法</p>
<ul>
<li>必须要有一个无参构造</li>
<li>属性必须私有化</li>
<li>必须有get、set方法</li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
  </entry>
  <entry>
    <title>JavaDoc生成文档</title>
    <url>/2021/04/16/JavaDoc%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h1 id="JavaDoc生成文档"><a href="#JavaDoc生成文档" class="headerlink" title="JavaDoc生成文档"></a>JavaDoc生成文档</h1><h2 id="JavaDoc可以为类创建文档，生成效果类似于JavaSE-API和开发文档"><a href="#JavaDoc可以为类创建文档，生成效果类似于JavaSE-API和开发文档" class="headerlink" title="JavaDoc可以为类创建文档，生成效果类似于JavaSE API和开发文档"></a>JavaDoc可以为类创建文档，生成效果类似于<a href="https://docs.oracle.com/javase/8/docs/api/">JavaSE API和开发文档</a></h2><h2 id="生成步骤"><a href="#生成步骤" class="headerlink" title="生成步骤"></a>生成步骤</h2><h3 id="1-在类中写入注释"><a href="#1-在类中写入注释" class="headerlink" title="1.在类中写入注释"></a>1.在类中写入注释</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Haikez</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Haikez</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中@后面的内容:<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210416142327.png"></p>
</blockquote>
<a id="more"></a>
<h3 id="2-打开类文件所在位置"><a href="#2-打开类文件所在位置" class="headerlink" title="2.打开类文件所在位置"></a>2.打开类文件所在位置</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210416142520.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210416142824.png"></p>
<h3 id="3-用命令行在当前目录中输入"><a href="#3-用命令行在当前目录中输入" class="headerlink" title="3.用命令行在当前目录中输入"></a>3.用命令行在当前目录中输入</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ javadoc -encoding UTF-8 -charset UTF-8 文件名</span><br></pre></td></tr></table></figure>
<h3 id="4-生成如下的"><a href="#4-生成如下的" class="headerlink" title="4.生成如下的"></a>4.生成如下的</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210416143141.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210416143148.png"></p>
<h3 id="打开index-html就可看到"><a href="#打开index-html就可看到" class="headerlink" title="打开index.html就可看到"></a>打开index.html就可看到</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210416143322.png"></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java文件上传详解</title>
    <url>/2021/05/20/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="Java文件上传详解"><a href="#Java文件上传详解" class="headerlink" title="Java文件上传详解"></a>Java文件上传详解</h1>]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
  </entry>
  <entry>
    <title>Java方法的定义与调用</title>
    <url>/2021/04/17/Java%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Java方法的定义与调用"><a href="#Java方法的定义与调用" class="headerlink" title="Java方法的定义与调用"></a>Java方法的定义与调用</h1><h2 id="一、方法的定义"><a href="#一、方法的定义" class="headerlink" title="一、方法的定义:"></a>一、方法的定义:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">修饰符 返回值类型 方法名(参数列表) 抛出异常&#123;</span></span><br><span class="line"><span class="comment">    方法体</span></span><br><span class="line"><span class="comment">    return 返回值;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello,world&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="二、方法的调用"><a href="#二、方法的调用" class="headerlink" title="二、方法的调用"></a>二、方法的调用</h2><h3 id="1-如果是静态方法（被static关键字修饰的方法），则可以用类名-方法名直接调用。"><a href="#1-如果是静态方法（被static关键字修饰的方法），则可以用类名-方法名直接调用。" class="headerlink" title="1.如果是静态方法（被static关键字修饰的方法），则可以用类名.方法名直接调用。"></a>1.如果是静态方法（被static关键字修饰的方法），则可以用类名.方法名直接调用。</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Student.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-如果是非静态方法，则需要先实例化类，再进行调用"><a href="#2-如果是非静态方法，则需要先实例化类，再进行调用" class="headerlink" title="2.如果是非静态方法，则需要先实例化类，再进行调用"></a>2.如果是非静态方法，则需要先实例化类，再进行调用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//实例化这个类</span></span><br><span class="line">        <span class="comment">//方法一</span></span><br><span class="line">        <span class="keyword">new</span> Student.say();</span><br><span class="line">        <span class="comment">//方法二</span></span><br><span class="line">        <span class="comment">//对象类型 对象名 = 对象值</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-static关键字"><a href="#3-static关键字" class="headerlink" title="3.static关键字"></a>3.static关键字</h3><h4 id="1-注意点-静态方法和类一起加载的，非静态方法只有在类的实例化之后才存在。"><a href="#1-注意点-静态方法和类一起加载的，非静态方法只有在类的实例化之后才存在。" class="headerlink" title="1. 注意点:静态方法和类一起加载的，非静态方法只有在类的实例化之后才存在。"></a>1. 注意点:静态方法和类一起加载的，非静态方法只有在类的实例化之后才存在。</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417142537.png"></p>
<blockquote>
<p>因此当类中的方法<strong>相互调用</strong>时，只有当这两种方法<strong>都加</strong>或者<strong>都不加</strong> <strong><em>static</em></strong> 修饰， 程序才能通过。</p>
</blockquote>
<h4 id="2-static静态代码块-类的实例化时首先执行静态代码块中的内容，其次是匿名代码块最后是构造方法。但是静态代码块只执行一次，对类再次实例化时不执行。而匿名代码块和构造方法会一直执行。"><a href="#2-static静态代码块-类的实例化时首先执行静态代码块中的内容，其次是匿名代码块最后是构造方法。但是静态代码块只执行一次，对类再次实例化时不执行。而匿名代码块和构造方法会一直执行。" class="headerlink" title="2. static静态代码块:类的实例化时首先执行静态代码块中的内容，其次是匿名代码块最后是构造方法。但是静态代码块只执行一次，对类再次实例化时不执行。而匿名代码块和构造方法会一直执行。"></a>2. static静态代码块:类的实例化时首先执行<em>静态代码块</em>中的内容，其次是<em>匿名代码</em>块最后是<em>构造方法</em>。但是<em>静态代码块只执行一次</em>，对类再次实例化时不执行。而匿名代码块和构造方法会一直执行。</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210419170704.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210419170712.png"></p>
<h4 id="3-static静态导入包"><a href="#3-static静态导入包" class="headerlink" title="3. static静态导入包"></a>3. static静态导入包</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210419170815.png"></p>
<h3 id="4-参数的传递"><a href="#4-参数的传递" class="headerlink" title="4.参数的传递"></a>4.参数的传递</h3><h4 id="1-值传递"><a href="#1-值传递" class="headerlink" title="1.值传递"></a>1.值传递</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417144057.png"></p>
<blockquote>
<p>值传递时方法不改变传入参数的值</p>
</blockquote>
<h4 id="2-引用传递"><a href="#2-引用传递" class="headerlink" title="2.引用传递"></a>2.引用传递</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417144107.png"></p>
<blockquote>
<p>类似于C语言的指针，方法会改变引用类型所指的值。 </p>
</blockquote>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java构造方法</title>
    <url>/2021/04/17/Java%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Java构造方法"><a href="#Java构造方法" class="headerlink" title="Java构造方法"></a>Java构造方法</h1><h2 id="定义-构造方法是在类的实例化时自动调用的方法。"><a href="#定义-构造方法是在类的实例化时自动调用的方法。" class="headerlink" title="定义: 构造方法是在类的实例化时自动调用的方法。"></a>定义: 构造方法是在类的实例化时自动调用的方法。</h2><h2 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h2><h3 id="1-必须与类的名字相同"><a href="#1-必须与类的名字相同" class="headerlink" title="1.必须与类的名字相同"></a>1.必须与类的名字相同</h3><h3 id="2-必须没有返回值类型，也不能写void"><a href="#2-必须没有返回值类型，也不能写void" class="headerlink" title="2.必须没有返回值类型，也不能写void"></a>2.必须没有返回值类型，也不能写void</h3><h2 id="一、无参构造方法"><a href="#一、无参构造方法" class="headerlink" title="一、无参构造方法"></a>一、无参构造方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个类即使什么都不写也会存在一个无参构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="二、有参构造（在定义了一个有参构造方法时，无参构造必须得写！！！）"><a href="#二、有参构造（在定义了一个有参构造方法时，无参构造必须得写！！！）" class="headerlink" title="二、有参构造（在定义了一个有参构造方法时，无参构造必须得写！！！）"></a>二、有参构造（在定义了一个有参构造方法时，无参构造必须得写！！！）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在定义了一个有参构造方法时，无参构造必须得写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="comment">//1.使用new关键字，本质就是在调用构造方法</span></span><br><span class="line">        <span class="comment">//2.构造方法主要是用于初始化值 </span></span><br><span class="line">    &#125; </span><br><span class="line">    System.out.println(person.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三、IDEA快捷生成有-无参构造方法"><a href="#三、IDEA快捷生成有-无参构造方法" class="headerlink" title="三、IDEA快捷生成有/无参构造方法"></a>三、IDEA快捷生成有/无参构造方法</h2><h3 id="Mac下的快捷键-ctrl-enter"><a href="#Mac下的快捷键-ctrl-enter" class="headerlink" title="Mac下的快捷键 ctrl+enter"></a>Mac下的快捷键 <strong><em>ctrl+enter</em></strong></h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417153510.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417153519.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417153525.png"></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java的多态</title>
    <url>/2021/04/19/Java%E7%9A%84%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<h1 id="Java的多态"><a href="#Java的多态" class="headerlink" title="Java的多态"></a>Java的多态</h1><h2 id="一、定义-同一种方法根据发送对象的不同二采取多种不同的行为方式。"><a href="#一、定义-同一种方法根据发送对象的不同二采取多种不同的行为方式。" class="headerlink" title="一、定义:同一种方法根据发送对象的不同二采取多种不同的行为方式。"></a>一、定义:同一种方法根据发送对象的不同二采取多种不同的行为方式。</h2><h2 id="二、一个对象的实际类型是确定的，但可以指向对象的引用类型有很多（父类、有关系的类）。"><a href="#二、一个对象的实际类型是确定的，但可以指向对象的引用类型有很多（父类、有关系的类）。" class="headerlink" title="二、一个对象的实际类型是确定的，但可以指向对象的引用类型有很多（父类、有关系的类）。"></a>二、一个对象的实际类型是确定的，但可以指向对象的引用类型有很多（父类、有关系的类）。</h2><a id="more"></a>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210419152826.png"></p>
<h2 id="三、多态存在的条件"><a href="#三、多态存在的条件" class="headerlink" title="三、多态存在的条件:"></a>三、多态存在的条件:</h2><h3 id="1-有继承关系。"><a href="#1-有继承关系。" class="headerlink" title="1. 有继承关系。"></a>1. 有继承关系。</h3><h3 id="2-子类重写父类方法。"><a href="#2-子类重写父类方法。" class="headerlink" title="2. 子类重写父类方法。"></a>2. 子类重写父类方法。</h3><h3 id="3-父类引用指向子类对象。"><a href="#3-父类引用指向子类对象。" class="headerlink" title="3. 父类引用指向子类对象。"></a>3. 父类引用指向子类对象。</h3><h2 id="父类引用指向子类，实例化产生的对象-Person-s1-new-Student"><a href="#父类引用指向子类，实例化产生的对象-Person-s1-new-Student" class="headerlink" title="父类引用指向子类，实例化产生的对象:Person s1 = new Student();"></a>父类引用指向子类，实例化产生的对象:<em>Person s1 = new Student();</em></h2><h3 id="1-该对象-s1-拥有父类的所有方法（若方法被子类重写，则该方法变成重写后的方法）。"><a href="#1-该对象-s1-拥有父类的所有方法（若方法被子类重写，则该方法变成重写后的方法）。" class="headerlink" title="1. 该对象(s1)拥有父类的所有方法（若方法被子类重写，则该方法变成重写后的方法）。"></a>1. 该对象(<em>s1</em>)拥有父类的所有方法（若方法被子类重写，则该方法变成重写后的方法）。</h3><h3 id="2-该对象-s1-拥有子类重写的父类的方法。"><a href="#2-该对象-s1-拥有子类重写的父类的方法。" class="headerlink" title="2. 该对象(s1)拥有子类重写的父类的方法。"></a>2. 该对象(<em>s1</em>)拥有子类重写的父类的方法。</h3><h3 id="3-该对象-s1-没有子类新增加的方法。"><a href="#3-该对象-s1-没有子类新增加的方法。" class="headerlink" title="3. 该对象(s1)没有子类新增加的方法。"></a>3. 该对象(<em>s1</em>)没有子类新增加的方法。</h3><h3 id="4-父类如果想用子类新增的方法可以用强制类型转换将将其转换为子类引用的类型。"><a href="#4-父类如果想用子类新增的方法可以用强制类型转换将将其转换为子类引用的类型。" class="headerlink" title="4. 父类如果想用子类新增的方法可以用强制类型转换将将其转换为子类引用的类型。"></a>4. 父类如果想用子类<em>新增的方法</em>可以用强制类型转换将将其转换为子类引用的类型。</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210419153910.png"></p>
<h2 id="四、多态的注意事项"><a href="#四、多态的注意事项" class="headerlink" title="四、多态的注意事项:"></a>四、多态的注意事项:</h2><h3 id="1-多态是方法的多态，属性没有多态-！！！"><a href="#1-多态是方法的多态，属性没有多态-！！！" class="headerlink" title="1. 多态是方法的多态，属性没有多态 ！！！"></a>1. 多态是方法的多态，属性没有多态 ！！！</h3><h3 id="2-多态必须是父类和子类或者有联系的类之间的关系，否则会类型转换异常（ClassCastException-）"><a href="#2-多态必须是父类和子类或者有联系的类之间的关系，否则会类型转换异常（ClassCastException-）" class="headerlink" title="2. 多态必须是父类和子类或者有联系的类之间的关系，否则会类型转换异常（ClassCastException!）"></a>2. 多态必须是父类和子类或者有联系的类之间的关系，否则会类型转换异常（ClassCastException!）</h3><h3 id="3-多态存在的条件"><a href="#3-多态存在的条件" class="headerlink" title="3. 多态存在的条件:"></a>3. 多态存在的条件:</h3><ul>
<li>必须要有继承关系</li>
<li>方法需要重写</li>
<li>父类引用指向子类 <strong><em>Father f = new Son();</em></strong></li>
</ul>
<h2 id="五、instanceof关键字-Object-instanceof-Class"><a href="#五、instanceof关键字-Object-instanceof-Class" class="headerlink" title="五、instanceof关键字:Object instanceof Class"></a>五、instanceof关键字:<em>Object instanceof Class</em></h2><h3 id="1-instanceof返回值-（X-instanceof-Y）如果X指向的实际类型是Y的子类或者本身，返回True，否则返回False"><a href="#1-instanceof返回值-（X-instanceof-Y）如果X指向的实际类型是Y的子类或者本身，返回True，否则返回False" class="headerlink" title="1. instanceof返回值:（X instanceof Y）如果X指向的实际类型是Y的子类或者本身，返回True，否则返回False"></a>1. instanceof返回值:（X instanceof Y）如果X指向的实际类型是Y的<em>子类或者本身</em>，返回True，否则返回False</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210419163317.png"> </p>
<h3 id="2-instanceof报错情况-（X-instanceof-Y）如果X的引用类和Y类之间没有父子关系，编译器报错"><a href="#2-instanceof报错情况-（X-instanceof-Y）如果X的引用类和Y类之间没有父子关系，编译器报错" class="headerlink" title="2. instanceof报错情况: （X instanceof Y）如果X的引用类和Y类之间没有父子关系，编译器报错"></a>2. instanceof报错情况: （X instanceof Y）如果X的<em>引用类</em>和Y类之间没有父子关系，编译器报错</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210419162822.png"></p>
<h2 id="六、类型转换-（高类型–-gt-父类，低类型–-gt-子类）"><a href="#六、类型转换-（高类型–-gt-父类，低类型–-gt-子类）" class="headerlink" title="六、类型转换 （高类型–&gt;父类，低类型–&gt;子类）"></a>六、类型转换 （高类型–&gt;父类，低类型–&gt;子类）</h2><h3 id="1-高类型转换为低类型需要强制类型转换"><a href="#1-高类型转换为低类型需要强制类型转换" class="headerlink" title="1. 高类型转换为低类型需要强制类型转换"></a>1. 高类型转换为低类型需要强制类型转换</h3><ul>
<li><h4 id="格式-Student-person"><a href="#格式-Student-person" class="headerlink" title="格式:(Student) person;"></a>格式:(Student) person;</h4></li>
<li><h4 id="高类型转换为低类型会获得子类的新增的方法。"><a href="#高类型转换为低类型会获得子类的新增的方法。" class="headerlink" title="高类型转换为低类型会获得子类的新增的方法。"></a>高类型转换为低类型会获得子类的新增的方法。</h4><h3 id="2-低类型转换为高类型可直接转换"><a href="#2-低类型转换为高类型可直接转换" class="headerlink" title="2. 低类型转换为高类型可直接转换"></a>2. 低类型转换为高类型可直接转换</h3></li>
<li><h4 id="Person-person-new-Student"><a href="#Person-person-new-Student" class="headerlink" title="Person person = new Student();"></a>Person person = new Student();</h4></li>
<li><h4 id="低类型转换为高类型会丢失子类新增-的一些方法。"><a href="#低类型转换为高类型会丢失子类新增-的一些方法。" class="headerlink" title="低类型转换为高类型会丢失子类新增 的一些方法。"></a>低类型转换为高类型会丢失子类新增 的一些方法。</h4><h3 id="3-类型转换的意义-方便方法的调用，减少重复的代码，简洁！"><a href="#3-类型转换的意义-方便方法的调用，减少重复的代码，简洁！" class="headerlink" title="3. 类型转换的意义:方便方法的调用，减少重复的代码，简洁！"></a>3. 类型转换的意义:方便方法的调用，减少重复的代码，简洁！</h3></li>
</ul>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java的多种内部类</title>
    <url>/2021/04/20/Java%E7%9A%84%E5%A4%9A%E7%A7%8D%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="Java的多种内部类"><a href="#Java的多种内部类" class="headerlink" title="Java的多种内部类"></a>Java的多种内部类</h1><h2 id="1-成员内部类"><a href="#1-成员内部类" class="headerlink" title="1.成员内部类"></a>1.成员内部类</h2><h3 id="1-通过外部类实例化成员内部类"><a href="#1-通过外部类实例化成员内部类" class="headerlink" title="1. 通过外部类实例化成员内部类"></a>1. 通过外部类实例化成员内部类</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210420162757.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210420163344.png"></p>
<a id="more"></a>
<h3 id="2-成员内部类可以获得外部类的-私有属性"><a href="#2-成员内部类可以获得外部类的-私有属性" class="headerlink" title="2. 成员内部类可以获得外部类的 私有属性"></a>2. 成员内部类可以获得外部类的 <strong><em>私有属性</em></strong></h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210420163242.png"></p>
<h2 id="2-静态内部类"><a href="#2-静态内部类" class="headerlink" title="2. 静态内部类"></a>2. 静态内部类</h2><h3 id="用static关键字修饰的内部类"><a href="#用static关键字修饰的内部类" class="headerlink" title="用static关键字修饰的内部类"></a>用static关键字修饰的内部类</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210420164620.png"></p>
<h2 id="3-局部内部类"><a href="#3-局部内部类" class="headerlink" title="3. 局部内部类"></a>3. 局部内部类</h2><h3 id="写在方法区的内部类"><a href="#写在方法区的内部类" class="headerlink" title="写在方法区的内部类"></a>写在方法区的内部类</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210420164801.png"></p>
<h2 id="4-匿名内部类"><a href="#4-匿名内部类" class="headerlink" title="4. 匿名内部类"></a>4. 匿名内部类</h2><h3 id="没有名字初始化类，不用将实例保存到变量中"><a href="#没有名字初始化类，不用将实例保存到变量中" class="headerlink" title="没有名字初始化类，不用将实例保存到变量中"></a>没有名字初始化类，不用将实例保存到变量中</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210420164318.png"></p>
<h3 id="可以用匿名内部类实现接口"><a href="#可以用匿名内部类实现接口" class="headerlink" title="可以用匿名内部类实现接口"></a>可以用匿名内部类实现接口</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210420164406.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210420164417.png"></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java的封装</title>
    <url>/2021/04/17/Java%E7%9A%84%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h1 id="Java的封装"><a href="#Java的封装" class="headerlink" title="Java的封装"></a>Java的封装</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417212632.png"></p>
<h2 id="重点记住-属性私有，get-set"><a href="#重点记住-属性私有，get-set" class="headerlink" title="重点记住:属性私有，get/set"></a>重点记住:属性私有，get/set</h2><a id="more"></a>
<h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作:"></a>具体操作:</h2><h3 id="1-用private关键字对类中的属性进行修饰，被修饰的属性不能直接被调用。"><a href="#1-用private关键字对类中的属性进行修饰，被修饰的属性不能直接被调用。" class="headerlink" title="1. 用private关键字对类中的属性进行修饰，被修饰的属性不能直接被调用。"></a>1. 用private关键字对类中的属性进行修饰，被修饰的属性不能直接被调用。</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417213825.png"></p>
<h3 id="2-在本类中提供一些set、get方法可以操作该属性。"><a href="#2-在本类中提供一些set、get方法可以操作该属性。" class="headerlink" title="2. 在本类中提供一些set、get方法可以操作该属性。"></a>2. 在本类中提供一些set、get方法可以操作该属性。</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417214414.png"></p>
<h3 id="3-IDEA一键生成get-set方法。"><a href="#3-IDEA一键生成get-set方法。" class="headerlink" title="3.IDEA一键生成get/set方法。"></a>3.IDEA一键生成get/set方法。</h3><h4 id="Mac下按ctrl-enter"><a href="#Mac下按ctrl-enter" class="headerlink" title="Mac下按ctrl+enter"></a>Mac下按ctrl+enter</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417214718.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417214841.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417214851.png"></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java的异常机制</title>
    <url>/2021/04/20/Java%E7%9A%84%E5%BC%82%E5%B8%B8%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="Java的异常机制"><a href="#Java的异常机制" class="headerlink" title="Java的异常机制"></a>Java的异常机制</h1><h2 id="一、异常（Exception）与错误（Error）"><a href="#一、异常（Exception）与错误（Error）" class="headerlink" title="一、异常（Exception）与错误（Error）"></a>一、异常（Exception）与错误（Error）</h2><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210421153629.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210421153636.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210421153643.png"></p>
<a id="more"></a>
<h2 id="二、五大关键字（try、catch、finally、throw、throws）"><a href="#二、五大关键字（try、catch、finally、throw、throws）" class="headerlink" title="二、五大关键字（try、catch、finally、throw、throws）"></a>二、五大关键字（try、catch、finally、throw、throws）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123; </span><br><span class="line">    <span class="comment">//监控区域。</span></span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">0</span>;</span><br><span class="line">    System.out.println(a/b);</span><br><span class="line">&#125;<span class="keyword">catch</span>(ArithmeticException e)&#123;</span><br><span class="line">    <span class="comment">//捕获区域，如果捕捉到括号内指明的异常，执行代码块中的内容。</span></span><br><span class="line">    System.out.println(<span class="string">&quot;发现异常&quot;</span>);</span><br><span class="line">    e.printStackTrace();<span class="comment">//打印错误的栈信息。</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//无论是否出现异常，都会执行代码块中的内容。</span></span><br><span class="line">    System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-try关键字：用来监控代码块是否发生异常"><a href="#1-try关键字：用来监控代码块是否发生异常" class="headerlink" title="1. try关键字：用来监控代码块是否发生异常"></a>1. try关键字：用来监控代码块是否发生异常</h3><h3 id="2-catch-捕获异常，如果捕捉到括号内指明的异常，执行代码块中的内容"><a href="#2-catch-捕获异常，如果捕捉到括号内指明的异常，执行代码块中的内容" class="headerlink" title="2. catch( )捕获异常，如果捕捉到括号内指明的异常，执行代码块中的内容."></a>2. catch( )捕获异常，如果捕捉到括号内指明的异常，执行代码块中的内容.</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210421154825.png"></p>
<blockquote>
<p>上图是catch()中异常的范围。如果填Throwable那么catch就能捕获任何异常和错误。</p>
</blockquote>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210421155331.png"></p>
<blockquote>
<p>可以使用catch对异常进行层层拦截，**<em>拦截到即停止继续捕获**</em>。 </p>
</blockquote>
<h3 id="3-finally关键字：无论是否出现异常，都会执行代码块中的内容。"><a href="#3-finally关键字：无论是否出现异常，都会执行代码块中的内容。" class="headerlink" title="3. finally关键字：无论是否出现异常，都会执行代码块中的内容。"></a>3. finally关键字：无论是否出现异常，都会执行代码块中的内容。</h3><h3 id="4-throw关键字：主动抛出异常语句"><a href="#4-throw关键字：主动抛出异常语句" class="headerlink" title="4. throw关键字：主动抛出异常语句"></a>4. throw关键字：主动抛出异常语句</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210421160251.png"></p>
<blockquote>
<p>每个异常都是一个类，需要用new关键字创建后抛出。</p>
</blockquote>
<h3 id="5-throws关键字：方法抛出异常"><a href="#5-throws关键字：方法抛出异常" class="headerlink" title="5. throws关键字：方法抛出异常"></a>5. throws关键字：方法抛出异常</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> <span class="keyword">throws</span> 异常名 </span>&#123;</span><br><span class="line">    <span class="comment">//当方法出现异常时会抛出异常,由外界进行捕获</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Java的抽象类和接口</title>
    <url>/2021/04/20/Java%E7%9A%84%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="一、Java的抽象类"><a href="#一、Java的抽象类" class="headerlink" title="一、Java的抽象类"></a>一、Java的抽象类</h1><h2 id="抽象类的知识点"><a href="#抽象类的知识点" class="headerlink" title="抽象类的知识点:"></a>抽象类的知识点:</h2><ol>
<li>public <strong>abstract</strong> class 类名 {} 。</li>
<li>抽象类里可以写<strong>普通方法</strong>和<strong>抽象方法</strong>。</li>
<li>抽象类<strong>不能被实例化</strong>！！！</li>
<li>抽象类的使用：通过别的类<strong>继承</strong>抽像类并<strong>必须</strong>对类中的<strong>抽象方法</strong>进行<strong>重写</strong>。</li>
<li>抽象类的抽象方法在本类中<strong>不一定要实现</strong>。</li>
<li>抽象类是一种<strong>约束</strong>，规定本类中必须要有的一些方法。<h2 id="抽象类的定义-abstract关键字"><a href="#抽象类的定义-abstract关键字" class="headerlink" title="抽象类的定义(abstract关键字):"></a>抽象类的定义(abstract关键字):</h2><a id="more"></a>
<h3 id="abstract关键字"><a href="#abstract关键字" class="headerlink" title="abstract关键字:"></a>abstract关键字:</h3><h4 id="1-定义一个类："><a href="#1-定义一个类：" class="headerlink" title="1. 定义一个类："></a>1. 定义一个类：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123; </span><br><span class="line">&#125; <span class="comment">/*被abstract关键字修饰的类不能被实例化，</span></span><br><span class="line"><span class="comment">只能作为父类被别的类继承使用*/</span></span><br></pre></td></tr></table></figure>
<h4 id="2-通过abstract关键字定义抽象方法"><a href="#2-通过abstract关键字定义抽象方法" class="headerlink" title="2. 通过abstract关键字定义抽象方法:"></a>2. 通过abstract关键字定义抽象方法:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">/*被abstract关键字修饰的方法无需写方法体，</span></span><br><span class="line"><span class="comment">因为当别的类继承本类时，该方法一定要被重写。*/</span></span><br></pre></td></tr></table></figure>
<h2 id="抽象类的使用：因为抽象类不能被实例化为对象，因此只能作为父类被别的类继承。并且子类必须重写父类的所有抽象方法！！！"><a href="#抽象类的使用：因为抽象类不能被实例化为对象，因此只能作为父类被别的类继承。并且子类必须重写父类的所有抽象方法！！！" class="headerlink" title="抽象类的使用：因为抽象类不能被实例化为对象，因此只能作为父类被别的类继承。并且子类必须重写父类的所有抽象方法！！！"></a>抽象类的使用：因为抽象类不能被实例化为对象，因此只能作为父类被别的类继承。并且子类必须重写父类的所有抽象方法！！！</h2><h2 id="抽象类与抽象方法："><a href="#抽象类与抽象方法：" class="headerlink" title="抽象类与抽象方法："></a>抽象类与抽象方法：</h2><h3 id="1-抽象类中可以写一些普通方法，并且子类继承抽象类后这些普通方法无需重写"><a href="#1-抽象类中可以写一些普通方法，并且子类继承抽象类后这些普通方法无需重写" class="headerlink" title="1. 抽象类中可以写一些普通方法，并且子类继承抽象类后这些普通方法无需重写"></a>1. 抽象类中可以写一些普通方法，并且子类继承抽象类后这些普通方法<em>无需重写</em></h3><h3 id="2-抽象类中可以没有抽象方法，但是有抽象方法的类一定是抽象类。"><a href="#2-抽象类中可以没有抽象方法，但是有抽象方法的类一定是抽象类。" class="headerlink" title="2. 抽象类中可以没有抽象方法，但是有抽象方法的类一定是抽象类。"></a>2. 抽象类中可以没有抽象方法，但是有抽象方法的类一定是抽象类。</h3><h1 id="二、Java的接口"><a href="#二、Java的接口" class="headerlink" title="二、Java的接口"></a>二、Java的接口</h1><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210420155818.png"><h2 id="接口的知识点"><a href="#接口的知识点" class="headerlink" title="接口的知识点:"></a>接口的知识点:</h2></li>
<li>public interface 接口名 {}</li>
<li>接口完全只是约束。接口中的所有方法都无需具体实现。</li>
<li>接口<strong>不能被实例化</strong>！！！</li>
<li>接口中的所有方法默认都用 <strong><em>public abstract</em></strong> 修饰。</li>
<li>接口都要有<strong>实现类</strong>来实现，实现接口的关键字 <strong><em>implements</em></strong> 。</li>
<li>接口的实现类本质就是对接口中<strong>所有方法的重写</strong>。</li>
<li><em>接口中定义的变量都是常量（ **</em>public static final*** ）<h2 id="接口的定义-public-interface-接口名"><a href="#接口的定义-public-interface-接口名" class="headerlink" title="接口的定义: public interface 接口名{}"></a>接口的定义: public interface 接口名{}</h2><h3 id="interface关键字"><a href="#interface关键字" class="headerlink" title="interface关键字"></a>interface关键字</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名</span>&#123;</span><br><span class="line">&#125; <span class="comment">//通过interface关键字定义接口</span></span><br></pre></td></tr></table></figure>
<h2 id="接口的使用"><a href="#接口的使用" class="headerlink" title="接口的使用"></a>接口的使用</h2><h3 id="implements关键字"><a href="#implements关键字" class="headerlink" title="implements关键字"></a>implements关键字</h3><h4 id="1-implements实现接口"><a href="#1-implements实现接口" class="headerlink" title="1. implements实现接口"></a>1. implements实现接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 实现类 <span class="keyword">implements</span> 接口1,接口2</span>&#123;</span><br><span class="line">&#125; <span class="comment">/*实现类通过implements关键字实现接口。</span></span><br><span class="line"><span class="comment">接口的实现类必须对接口中的所有方法的重写!!!*/</span></span><br></pre></td></tr></table></figure>
<h4 id="2-implements可以同时实现多个接口"><a href="#2-implements可以同时实现多个接口" class="headerlink" title="2. implements可以同时实现多个接口"></a>2. implements可以同时实现多个接口</h4></li>
</ol>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java的继承</title>
    <url>/2021/04/17/Java%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h1 id="一、Java的继承"><a href="#一、Java的继承" class="headerlink" title="一、Java的继承"></a>一、Java的继承</h1><h2 id="1-继承的本质是对某一批类的抽象，从而实现对世界更好的建模。"><a href="#1-继承的本质是对某一批类的抽象，从而实现对世界更好的建模。" class="headerlink" title="1. 继承的本质是对某一批类的抽象，从而实现对世界更好的建模。"></a>1. 继承的本质是对某一批类的抽象，从而实现对世界更好的建模。</h2><h2 id="2-子类继承父类，子类可拥有父类中所有的属性和方法。"><a href="#2-子类继承父类，子类可拥有父类中所有的属性和方法。" class="headerlink" title="2. 子类继承父类，子类可拥有父类中所有的属性和方法。"></a>2. 子类继承父类，子类可拥有父类中所有的属性和方法。</h2><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417221138.png"></p>
<a id="more"></a>
<h2 id="3-父类中的属性也可以用private关键字修复，从而达到封装的效果。"><a href="#3-父类中的属性也可以用private关键字修复，从而达到封装的效果。" class="headerlink" title="3. 父类中的属性也可以用private关键字修复，从而达到封装的效果。"></a>3. 父类中的属性也可以用private关键字修复，从而达到封装的效果。</h2><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417221441.png"></p>
<h2 id="4-IDEA中按ctrl-h可以快速查看继承列表。"><a href="#4-IDEA中按ctrl-h可以快速查看继承列表。" class="headerlink" title="4. IDEA中按ctrl+h可以快速查看继承列表。"></a>4. IDEA中按ctrl+h可以快速查看继承列表。</h2><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210417221729.png"></p>
<h2 id="5-父类可以不写无参构造但是子类必须调用父类的有参构造"><a href="#5-父类可以不写无参构造但是子类必须调用父类的有参构造" class="headerlink" title="5. 父类可以不写无参构造但是子类必须调用父类的有参构造"></a>5. 父类可以不写无参构造但是子类必须调用父类的有参构造</h2><h2 id="6-this关键-amp-super关键字"><a href="#6-this关键-amp-super关键字" class="headerlink" title="6. this关键&amp;super关键字"></a>6. this关键&amp;super关键字</h2><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字:"></a>this关键字:</h3><ol>
<li>通过 <strong><em>this.</em></strong> 的方式可以访问<strong>本类中</strong>的成员变量和成员方法</li>
<li><strong><em>this();</em></strong> 方法是调用<strong>本类</strong>的 <strong><em>构造方法</em></strong><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字:"></a>super关键字:</h3></li>
<li>在<strong>子类中</strong>通过 <strong><em>super.</em></strong> 的方式会调用父类中的成员变量和成员方法。</li>
<li><strong><em>super();</em></strong> 方法是调用<strong>父类</strong>的 <strong><em>构造方法</em></strong> ，必须在方法的第一个执行。</li>
<li>super不能访问父类中的私有属性。<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210419105757.png"></li>
<li>super();和this();不能同时调用！！！<h2 id="7-子类的实例化时会优先执行父类的构造方法。"><a href="#7-子类的实例化时会优先执行父类的构造方法。" class="headerlink" title="7. 子类的实例化时会优先执行父类的构造方法。"></a>7. 子类的实例化时会优先执行父类的构造方法。</h2><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210419110035.png"><h1 id="二、-方法的重写"><a href="#二、-方法的重写" class="headerlink" title="二、 方法的重写"></a>二、 方法的重写</h1><h2 id="重写：需要有继承关系，子类重写父类的方法！"><a href="#重写：需要有继承关系，子类重写父类的方法！" class="headerlink" title="重写：需要有继承关系，子类重写父类的方法！"></a>重写：需要有继承关系，子类重写父类的方法！</h2><h2 id="重写的要求-（子类和父类的方法一致，方法体不同！）"><a href="#重写的要求-（子类和父类的方法一致，方法体不同！）" class="headerlink" title="重写的要求:（子类和父类的方法一致，方法体不同！）"></a>重写的要求:（子类和父类的方法一致，方法体不同！）</h2><h3 id="1-方法名必须相同"><a href="#1-方法名必须相同" class="headerlink" title="1. 方法名必须相同"></a>1. 方法名必须相同</h3><h3 id="2-参数列表必须相同（否则就成了方法重载，方法重载针对的是当前方法）"><a href="#2-参数列表必须相同（否则就成了方法重载，方法重载针对的是当前方法）" class="headerlink" title="2. 参数列表必须相同（否则就成了方法重载，方法重载针对的是当前方法）"></a>2. 参数列表必须相同（否则就成了方法重载，方法重载针对的是当前方法）</h3><h3 id="3-修饰符-范围可以扩大-但不能缩小-public-gt-protected-gt-default-gt-private"><a href="#3-修饰符-范围可以扩大-但不能缩小-public-gt-protected-gt-default-gt-private" class="headerlink" title="3. 修饰符:范围可以扩大,但不能缩小:public&gt;protected&gt;default&gt;private"></a>3. 修饰符:范围可以扩大,但不能缩小:public&gt;protected&gt;default&gt;private</h3><h3 id="4-抛出的异常-范围可以被缩小，但不能扩大"><a href="#4-抛出的异常-范围可以被缩小，但不能扩大" class="headerlink" title="4. 抛出的异常:范围可以被缩小，但不能扩大"></a>4. 抛出的异常:范围可以被缩小，但不能扩大</h3><h2 id="重写的意义"><a href="#重写的意义" class="headerlink" title="重写的意义:"></a>重写的意义:</h2><h3 id="1-父类的功能，子类不一定需要。"><a href="#1-父类的功能，子类不一定需要。" class="headerlink" title="1. 父类的功能，子类不一定需要。"></a>1. 父类的功能，子类不一定需要。</h3></li>
</ol>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Lambda表达式</title>
    <url>/2021/04/22/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><h2 id="一、Lambda表达式意义："><a href="#一、Lambda表达式意义：" class="headerlink" title="一、Lambda表达式意义："></a>一、Lambda表达式意义：</h2><ul>
<li><h3 id="避免匿名内部类定义过多。"><a href="#避免匿名内部类定义过多。" class="headerlink" title="避免匿名内部类定义过多。"></a>避免匿名内部类定义过多。</h3></li>
<li><h3 id="可以让代码看起来更简洁。"><a href="#可以让代码看起来更简洁。" class="headerlink" title="可以让代码看起来更简洁。"></a>可以让代码看起来更简洁。</h3></li>
<li><h3 id="去掉一些没有意义的代码，只留下核心逻辑。"><a href="#去掉一些没有意义的代码，只留下核心逻辑。" class="headerlink" title="去掉一些没有意义的代码，只留下核心逻辑。"></a>去掉一些没有意义的代码，只留下核心逻辑。</h3><h2 id="二、Lambda表达式只能创建函数式接口的对象。"><a href="#二、Lambda表达式只能创建函数式接口的对象。" class="headerlink" title="二、Lambda表达式只能创建函数式接口的对象。"></a>二、Lambda表达式只能创建函数式接口的对象。</h2><h3 id="函数式接口-只含有一个抽象方法的接口。"><a href="#函数式接口-只含有一个抽象方法的接口。" class="headerlink" title="函数式接口:只含有一个抽象方法的接口。"></a>函数式接口:只含有一个抽象方法的接口。</h3><a id="more"></a>
<h2 id="三、Lambda表达式的实现过程"><a href="#三、Lambda表达式的实现过程" class="headerlink" title="三、Lambda表达式的实现过程:"></a>三、Lambda表达式的实现过程:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个函数式接口。</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Like</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lamda</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//用接口类实现一个对象并用Lambda表达式实现。</span></span><br><span class="line">        Like like = ()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Lambda表达式&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        like.lambda();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//上面代码等价于</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">       </span></span><br><span class="line"><span class="comment">        Like like = new Like()&#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void lambda()&#123;</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;匿名内部类&quot;);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;;</span></span><br><span class="line"><span class="comment">        like.lambda();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="四、Lambda表达式总结："><a href="#四、Lambda表达式总结：" class="headerlink" title="四、Lambda表达式总结："></a>四、Lambda表达式总结：</h2></li>
<li><h3 id="lambda表达式只能在一行代码的前提下才能简化为一行，其他情况下必须用代码块包裹。"><a href="#lambda表达式只能在一行代码的前提下才能简化为一行，其他情况下必须用代码块包裹。" class="headerlink" title="lambda表达式只能在一行代码的前提下才能简化为一行，其他情况下必须用代码块包裹。"></a>lambda表达式只能在一行代码的前提下才能简化为一行，其他情况下必须用代码块包裹。</h3></li>
<li><h3 id="只能实现函数式接口。"><a href="#只能实现函数式接口。" class="headerlink" title="只能实现函数式接口。"></a>只能实现函数式接口。</h3></li>
<li><h3 id="多个参数可以去掉数据类型，要去掉就全去掉，必须加上括号。"><a href="#多个参数可以去掉数据类型，要去掉就全去掉，必须加上括号。" class="headerlink" title="多个参数可以去掉数据类型，要去掉就全去掉，必须加上括号。"></a>多个参数可以去掉数据类型，要去掉就全去掉，必须加上括号。</h3></li>
</ul>
]]></content>
      <categories>
        <category>Java的多线程</category>
      </categories>
  </entry>
  <entry>
    <title>Lazygit基操</title>
    <url>/2021/01/23/Lazygit%E5%9F%BA%E6%93%8D/</url>
    <content><![CDATA[<h2 id="Lazygit-—-懒人必备的Git客户端"><a href="#Lazygit-—-懒人必备的Git客户端" class="headerlink" title="Lazygit — 懒人必备的Git客户端"></a>Lazygit — 懒人必备的Git客户端</h2><p>! ! ! (用 x 查看各个面板帮助)</p>
<h3 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h3><h4 id="1-Lazygit下载"><a href="#1-Lazygit下载" class="headerlink" title="1. Lazygit下载"></a>1. Lazygit下载</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">下载地址：</span><br><span class="line">https://github.com/jesseduffield/lazygit</span><br></pre></td></tr></table></figure>
<h4 id="2-打开"><a href="#2-打开" class="headerlink" title="2. 打开"></a>2. 打开</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lazygit</span><br></pre></td></tr></table></figure>
<h3 id="二、-Stage-操作"><a href="#二、-Stage-操作" class="headerlink" title="二、 Stage 操作"></a>二、 Stage 操作</h3><h4 id="1-全部-stage-unstage-—-a"><a href="#1-全部-stage-unstage-—-a" class="headerlink" title="1. 全部 stage/unstage — a"></a>1. 全部 stage/unstage — a</h4><h4 id="相当于git-add"><a href="#相当于git-add" class="headerlink" title="(相当于git add .)"></a>(相当于git add .)</h4><p><img src="/2021/01/23/Lazygit%E5%9F%BA%E6%93%8D/Jan-24-2021%2013-20-15.gif"></p>
<a id="more"></a>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084430.png"></p>
<h4 id="2-可以用空格逐个stage"><a href="#2-可以用空格逐个stage" class="headerlink" title="2. 可以用空格逐个stage"></a>2. 可以用空格逐个stage</h4><p><img src="/2021/01/23/Lazygit%E5%9F%BA%E6%93%8D/Jan-24-2021%2013-23-31.gif"></p>
<h4 id="3-H和L键可以实现左侧面板间的切换"><a href="#3-H和L键可以实现左侧面板间的切换" class="headerlink" title="3. H和L键可以实现左侧面板间的切换"></a>3. H和L键可以实现左侧面板间的切换</h4><p><img src="/2021/01/23/Lazygit%E5%9F%BA%E6%93%8D/Jan-26-2021%2020-30-36.gif"></p>
<h4 id="4-J和K键可以实现面板内文件的选择"><a href="#4-J和K键可以实现面板内文件的选择" class="headerlink" title="4. J和K键可以实现面板内文件的选择"></a>4. J和K键可以实现面板内文件的选择</h4><p><img src="/2021/01/23/Lazygit%E5%9F%BA%E6%93%8D/Jan-26-2021%2020-36-31.gif"></p>
<h5 id="按回车可以进入到选中的文件（按esc可以退回到主面板）"><a href="#按回车可以进入到选中的文件（按esc可以退回到主面板）" class="headerlink" title="按回车可以进入到选中的文件（按esc可以退回到主面板）"></a>按回车可以进入到选中的文件（按esc可以退回到主面板）</h5><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084524.png"></p>
<h5 id="按Tab键可以切换Stage-Unstage面板"><a href="#按Tab键可以切换Stage-Unstage面板" class="headerlink" title="按Tab键可以切换Stage/Unstage面板"></a>按Tab键可以切换Stage/Unstage面板</h5><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084531.gif"></p>
<h5 id="按d可以彻底删除Unstage中的修改内容"><a href="#按d可以彻底删除Unstage中的修改内容" class="headerlink" title="按d可以彻底删除Unstage中的修改内容"></a>按d可以彻底删除Unstage中的修改内容</h5><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084542.png"></p>
<h3 id="三、-Branch-操作"><a href="#三、-Branch-操作" class="headerlink" title="三、 Branch 操作"></a>三、 Branch 操作</h3><h4 id="1-创建分支-—-n"><a href="#1-创建分支-—-n" class="headerlink" title="1. 创建分支 — n"></a>1. 创建分支 — n</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084616.png"></p>
<h4 id="2-选中分支-—-空格"><a href="#2-选中分支-—-空格" class="headerlink" title="2. 选中分支 — 空格"></a>2. 选中分支 — 空格</h4><h4 id="3-弱删除当前分支-—-d"><a href="#3-弱删除当前分支-—-d" class="headerlink" title="3. 弱删除当前分支 — d"></a>3. 弱删除当前分支 — d</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084635.png"><br>（强删除未保存的分支 — D）</p>
<h4 id="4-重命名当前分支-—-R"><a href="#4-重命名当前分支-—-R" class="headerlink" title="4. 重命名当前分支 — R"></a>4. 重命名当前分支 — R</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084650.png"></p>
<h4 id="5-选择分支合并到当前分支-—-M"><a href="#5-选择分支合并到当前分支-—-M" class="headerlink" title="5.选择分支合并到当前分支 — M"></a>5.选择分支合并到当前分支 — M</h4><ol>
<li>将光标选中子分支<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084704.png"></li>
<li>按M将子分支合并到当前分支<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084715.png"><h4 id="6-切换管理远程仓库-—"><a href="#6-切换管理远程仓库-—" class="headerlink" title="6. 切换管理远程仓库 — [ ]"></a>6. 切换管理远程仓库 — [ ]</h4><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084724.png"><h3 id="四、-Commit-操作"><a href="#四、-Commit-操作" class="headerlink" title="四、 Commit 操作"></a>四、 Commit 操作</h3>Commit 面板 :<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084735.png"></li>
</ol>
<h4 id="1-按c可以提交本次更改"><a href="#1-按c可以提交本次更改" class="headerlink" title="1. 按c可以提交本次更改"></a>1. 按c可以提交本次更改</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084755.png"></p>
<h4 id="2-提交回滚-—-空格"><a href="#2-提交回滚-—-空格" class="headerlink" title="2. 提交回滚 — 空格"></a>2. 提交回滚 — 空格</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084828.png"><br>lazygit回跳转到对应的提交，并新建一个新分支缓存，新建分支并合并即可保存。<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084841.png"></p>
<h4 id="3-重置提交-—-g"><a href="#3-重置提交-—-g" class="headerlink" title="3. 重置提交 — g"></a>3. 重置提交 — g</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084850.png"></p>
<h4 id="4-多分支间复制粘贴提交"><a href="#4-多分支间复制粘贴提交" class="headerlink" title="4. 多分支间复制粘贴提交"></a>4. 多分支间复制粘贴提交</h4><p>复制 — c<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084858.png"><br>粘贴 — v<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084904.png"></p>
<h4 id="5-批量操作commit-—-e"><a href="#5-批量操作commit-—-e" class="headerlink" title="5. 批量操作commit — e"></a>5. 批量操作commit — e</h4><ol>
<li><p>选中一个 commit 按 e 可以对上方几个commit进行批量管理<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084927.png"></p>
<table>
<thead>
<tr>
<th align="center">功能</th>
<th align="center">含义</th>
<th align="center">按键</th>
</tr>
</thead>
<tbody><tr>
<td align="center">pick</td>
<td align="center">无操作</td>
<td align="center">p</td>
</tr>
<tr>
<td align="center">drop</td>
<td align="center">删除</td>
<td align="center">d</td>
</tr>
<tr>
<td align="center">squash</td>
<td align="center">向下合并提交</td>
<td align="center">s</td>
</tr>
</tbody></table>
</li>
<li><p>按 m 执行操作<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084937.png"></p>
<h4 id="6-Reflog-面板（历史记录面板）"><a href="#6-Reflog-面板（历史记录面板）" class="headerlink" title="6. Reflog 面板（历史记录面板）"></a>6. Reflog 面板（历史记录面板）</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084946.png"><br>基本操作如下:<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Lazygit%E5%9F%BA%E6%93%8D/20210227084954.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>是基操啦</category>
      </categories>
      <tags>
        <tag>Lazygit</tag>
      </tags>
  </entry>
  <entry>
    <title>MVC三层架构</title>
    <url>/2021/05/11/MVC%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<h1 id="MVC三层架构"><a href="#MVC三层架构" class="headerlink" title="MVC三层架构"></a>MVC三层架构</h1><p>什么是MVC：Model、View、Controller  模型 视图 控制器</p>
<h2 id="早些年"><a href="#早些年" class="headerlink" title="早些年"></a>早些年</h2><p><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210511161128.png"></p>
<a id="more"></a>
<h3 id="用户直接访问控制层，控制层就可以直接操作数据库"><a href="#用户直接访问控制层，控制层就可以直接操作数据库" class="headerlink" title="用户直接访问控制层，控制层就可以直接操作数据库"></a>用户直接访问控制层，控制层就可以直接操作数据库</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Servlet--&gt;CRUD--&gt;数据库</span><br><span class="line">弊端: 程序十分臃肿，不利于维护</span><br><span class="line">Servlet的代码中包含：处理请求、响应、视图跳转、处理JDBC、处理业务代码、处理逻辑代码</span><br><span class="line">架构:没有什么是加一层解决不了的！</span><br></pre></td></tr></table></figure>
<h2 id="MVC三层架构-1"><a href="#MVC三层架构-1" class="headerlink" title="MVC三层架构:"></a>MVC三层架构:</h2><p><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210511161725.png"></p>
<h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><ul>
<li>业务处理:业务逻辑（Service）</li>
<li>数据持久层：CRUD （Dao)<h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3></li>
<li>展示数据</li>
<li>提供链路发起Servlet请求（a,form,img）<h3 id="Controller（Servlet）"><a href="#Controller（Servlet）" class="headerlink" title="Controller（Servlet）"></a>Controller（Servlet）</h3></li>
<li>接收用户的请求：req请求参数、Session信息….</li>
<li>交给业务层处理对应的代码</li>
<li>控制视图的跳转（请求转发、重定向）</li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
  </entry>
  <entry>
    <title>Markdown基本操作</title>
    <url>/2021/04/16/Markdown%E5%9F%BA%E6%93%8D%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="#这是一级标题"></a>#这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="##这是二级标题"></a>##这是二级标题</h2><h2 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="###这是三级标题"></a>###这是三级标题</h2><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>** <strong>Hello,World(粗体)</strong> **<br><strong>* *</strong>Hello,World(斜体加粗)<strong>* *</strong><br>*<em>Hello,World(斜体)</em> *<br>~~ <del>Hello,World(删除线)</del> ~~</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote>
<p>这是一段引用</p>
</blockquote>
<a id="more"></a>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr>
<p>(—)</p>
<hr>
<p>(***)</p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol>
<li>A</li>
<li>B</li>
<li>C</li>
</ol>
<ul>
<li>A</li>
<li>B</li>
<li>C<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><a href="https://www.baidu.com/">超链接</a></li>
</ul>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table>
<thead>
<tr>
<th>姓名</th>
<th>性别</th>
<th>生日</th>
</tr>
</thead>
<tbody><tr>
<td>张三</td>
<td>男</td>
<td>2001</td>
</tr>
</tbody></table>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>是基操啦</category>
      </categories>
      <tags>
        <tag>Markdown基操</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven环境搭建</title>
    <url>/2021/04/27/Maven%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="Maven环境搭建"><a href="#Maven环境搭建" class="headerlink" title="Maven环境搭建"></a>Maven环境搭建</h1><p>为什么要学习Maven？</p>
<ol>
<li>在Javaweb开发中，需要使用大量的jar包，我们手动去导入；</li>
<li>如何能够让一个对象帮我们去导入和配置这个jar包，由此，Maven诞生。<h2 id="1-Maven-项目架构管理工具"><a href="#1-Maven-项目架构管理工具" class="headerlink" title="1. Maven:项目架构管理工具"></a>1. Maven:项目架构管理工具</h2><a id="more"></a>
<h2 id="2-下载安装Maven"><a href="#2-下载安装Maven" class="headerlink" title="2. 下载安装Maven"></a>2. 下载安装Maven</h2>Maven官网:<a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a><br>进入官网下载解压即可<br><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210427171401.png"><h2 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3. 配置环境变量"></a>3. 配置环境变量</h2><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210427172947.png"><h2 id="4-Maven的相关配置"><a href="#4-Maven的相关配置" class="headerlink" title="4. Maven的相关配置"></a>4. Maven的相关配置</h2></li>
</ol>
<ul>
<li>配置文件位置(Maven目录下):<strong>/conf/settings.xml</strong><h2 id="5-配置阿里云镜像"><a href="#5-配置阿里云镜像" class="headerlink" title="5. 配置阿里云镜像"></a>5. 配置阿里云镜像</h2></li>
<li>镜像：mirrors<ul>
<li>作用：加速下载</li>
</ul>
</li>
<li>国内建议使用阿里云镜像<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>打开 <strong>/conf/settings.xml</strong>在mirrors标签下添加如上内容</p>
</blockquote>
<h2 id="6-建立本地仓库"><a href="#6-建立本地仓库" class="headerlink" title="6. 建立本地仓库"></a>6. 建立本地仓库</h2></li>
</ul>
<p><strong>修改settings.xml中的localRepository。</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/Users/haikez/Environment/apache-maven-3.8.1<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210427174132.png"></p>
<h2 id="7-在IDEA中使用Maven"><a href="#7-在IDEA中使用Maven" class="headerlink" title="7.在IDEA中使用Maven"></a>7.在IDEA中使用Maven</h2><p><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210429112035.png"></p>
<h2 id="8-关于在maven项目中配置文件资源导出问题"><a href="#8-关于在maven项目中配置文件资源导出问题" class="headerlink" title="8. 关于在maven项目中配置文件资源导出问题"></a>8. 关于在maven项目中配置文件资源导出问题</h2><p>标准的Maven项目都会有一个resources目录来存放我们所有的资源配置文件，但是我们往往在项目中不仅仅会把所有的资源配置文件都放在resources中，同时我们也有可能放在项目中的其他位置，那么默认的maven项目构建编译时就不会把我们其他目录下的资源配置文件导出到target目录中，就会导致我们的资源配置文件读取失败，从而导致我们的项目报错出现异常，比如说尤其我们在使用MyBatis框架时，往往Mapper.xml配置文件都会放在dao包中和dao接口类放在一起的,那么执行程序的时候，其中的xml配置文件就一定会读取失败，不会生成到maven的target目录中，所以我们要在项目的pom.xml文件中进行设置，并且我建议大家，每新建一个maven项目，就把该设置导入pom.xml文件中，以防不测！！！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis简介</title>
    <url>/2021/05/21/Mybatis%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="Mybatis简介"><a href="#Mybatis简介" class="headerlink" title="Mybatis简介"></a>Mybatis简介</h1><h2 id="什么是-MyBatis？"><a href="#什么是-MyBatis？" class="headerlink" title="什么是 MyBatis？"></a>什么是 MyBatis？</h2><p><img src="https://mybatis.org/images/mybatis-logo.png"></p>
<ul>
<li><p>MyBatis 是一款优秀的<strong>持久层框架</strong>。</p>
</li>
<li><p>它支持自定义 SQL、存储过程以及高级映射。</p>
</li>
<li><p>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。</p>
</li>
<li><p>MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p>
</li>
<li><p>MyBatis 本是apache的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。</p>
</li>
<li><p>2013年11月迁移到Github。</p>
<!-- - more -->
<h2 id="如何获得Mybatis"><a href="#如何获得Mybatis" class="headerlink" title="如何获得Mybatis?"></a>如何获得Mybatis?</h2></li>
<li><p>maven仓库 :</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Github : <a href="https://github.com/mybatis/mybatis-3/releases">https://github.com/mybatis/mybatis-3/releases</a></p>
</li>
<li><p>中文文档 : <a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p>
<h2 id="什么是持久层"><a href="#什么是持久层" class="headerlink" title="什么是持久层"></a>什么是持久层</h2><h3 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h3></li>
<li><p>持久化就是将程序的数据在持久状态和瞬时状态转化的过程。</p>
</li>
<li><p>内存：<strong>断电即失</strong></p>
</li>
<li><p>数据库（jdbc）,io文件持久化。</p>
</li>
<li><p>生活中：冷藏</p>
</li>
</ul>
<h3 id="为什么需要持久化"><a href="#为什么需要持久化" class="headerlink" title="为什么需要持久化"></a>为什么需要持久化</h3><ul>
<li>有一些对象，不能让他丢掉</li>
<li>内存太贵</li>
</ul>
<h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="Dao层，Service层，Controller层"><a href="#Dao层，Service层，Controller层" class="headerlink" title="Dao层，Service层，Controller层"></a>Dao层，Service层，Controller层</h3><ul>
<li>完成持久化工作的代码。</li>
<li>层界限十分明显。</li>
</ul>
<h2 id="为什么需要Mybatis？"><a href="#为什么需要Mybatis？" class="headerlink" title="为什么需要Mybatis？"></a>为什么需要Mybatis？</h2><ul>
<li>帮助程序员将数据存入数据库中。</li>
<li>方便</li>
<li>传统的JDBC代码太复杂。简化，框架。自动化。</li>
<li>不用Mybatis也可以。只不过用了更容易上手。<strong>技术没有高低之分</strong>。</li>
<li>优点： <ul>
<li>简单</li>
<li>灵活</li>
<li>sql和代码分离，提高了可维护性</li>
<li>提供映射标签，支持对象与数据库的orm字段关系映射</li>
<li>提供对象关系映射，支持对象关系组建维护</li>
<li>提供xml标签，支持编写动态sql。</li>
</ul>
</li>
</ul>
<p><strong>最重要的一点： 使用的人多</strong></p>
]]></content>
      <categories>
        <category>Mybatis学习</category>
      </categories>
  </entry>
  <entry>
    <title>PicGo+Github白嫖图床</title>
    <url>/2021/02/17/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h2 id="PicGo-Github白嫖图床"><a href="#PicGo-Github白嫖图床" class="headerlink" title="PicGo+Github白嫖图床"></a>PicGo+Github白嫖图床</h2><h3 id="一、简介："><a href="#一、简介：" class="headerlink" title="一、简介："></a>一、简介：</h3><h4 id="图床就是个人云图库，我们可以把照片放到图床里，图床就会为照片生成超链接，我们通过浏览器就能访问到里面的照片，非常方便！所以图床几乎成了各大博主开发个人博客的必备工具。但这样的云服务几乎都是收费的。然而Github这个开源的云仓库为免费图床的搭建提供了平台。"><a href="#图床就是个人云图库，我们可以把照片放到图床里，图床就会为照片生成超链接，我们通过浏览器就能访问到里面的照片，非常方便！所以图床几乎成了各大博主开发个人博客的必备工具。但这样的云服务几乎都是收费的。然而Github这个开源的云仓库为免费图床的搭建提供了平台。" class="headerlink" title="图床就是个人云图库，我们可以把照片放到图床里，图床就会为照片生成超链接，我们通过浏览器就能访问到里面的照片，非常方便！所以图床几乎成了各大博主开发个人博客的必备工具。但这样的云服务几乎都是收费的。然而Github这个开源的云仓库为免费图床的搭建提供了平台。"></a>图床就是个人云图库，我们可以把照片放到图床里，图床就会为照片生成超链接，我们通过浏览器就能访问到里面的照片，非常方便！所以图床几乎成了各大博主开发个人博客的必备工具。但这样的云服务几乎都是收费的。然而Github这个开源的云仓库为免费图床的搭建提供了平台。</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085305.jpg"></p>
<a id="more"></a>
<h3 id="二、Github图床的搭建"><a href="#二、Github图床的搭建" class="headerlink" title="二、Github图床的搭建"></a>二、Github图床的搭建</h3><h4 id="大体思路："><a href="#大体思路：" class="headerlink" title="大体思路："></a>大体思路：</h4><h5 id="新建一个Github仓库当做图床的上传空间，创建一个github的token-私人领牌-用于PicGo登录设置。解决github访问异常的问题。"><a href="#新建一个Github仓库当做图床的上传空间，创建一个github的token-私人领牌-用于PicGo登录设置。解决github访问异常的问题。" class="headerlink" title="新建一个Github仓库当做图床的上传空间，创建一个github的token(私人领牌)用于PicGo登录设置。解决github访问异常的问题。"></a>新建一个Github仓库当做图床的上传空间，创建一个github的token(私人领牌)用于PicGo登录设置。解决github访问异常的问题。</h5><h4 id="1-新建一个github仓库"><a href="#1-新建一个github仓库" class="headerlink" title="1. 新建一个github仓库"></a>1. 新建一个github仓库</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085319.png"></p>
<h4 id="2-创建私人令牌"><a href="#2-创建私人令牌" class="headerlink" title="2. 创建私人令牌"></a>2. 创建私人令牌</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085337.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085346.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085354.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085404.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085413.png"></p>
<h4 id="3-复制创建好的私人令牌"><a href="#3-复制创建好的私人令牌" class="headerlink" title="3. 复制创建好的私人令牌"></a>3. 复制创建好的私人令牌</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085421.png"></p>
<h4 id="4-下载并安装PicGo"><a href="#4-下载并安装PicGo" class="headerlink" title="4. 下载并安装PicGo"></a>4. 下载并安装PicGo</h4><h4 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a><a href="https://picgo.github.io/PicGo-Doc/zh/guide/">PicGo</a></h4><h4 id="5-配置PicGo"><a href="#5-配置PicGo" class="headerlink" title="5. 配置PicGo"></a>5. 配置PicGo</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085430.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085437.png"></p>
<h4 id="6-配置完成"><a href="#6-配置完成" class="headerlink" title="6. 配置完成"></a>6. 配置完成</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085448.gif"></p>
<h4 id="7-解决raw-githubusercontent-com访问不了的问题"><a href="#7-解决raw-githubusercontent-com访问不了的问题" class="headerlink" title="7. 解决raw.githubusercontent.com访问不了的问题"></a>7. 解决<code>raw.githubusercontent.com</code>访问不了的问题</h4><ul>
<li>打开<br><a href="https://site.ip138.com/raw.Githubusercontent.com/">https://site.ip138.com/raw.Githubusercontent.com/</a></li>
<li>输入<code>raw.githubusercontent.com</code></li>
<li>查询IP地址</li>
</ul>
<p>修改hosts Ubuntu，CentOS及macOS直接在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/hosts</span><br></pre></td></tr></table></figure>
<p>在最后一行加入:<br><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085510.png"><br>保存退出并重启</p>
<h3 id="三、-Gitee图床的搭建"><a href="#三、-Gitee图床的搭建" class="headerlink" title="三、 Gitee图床的搭建"></a>三、 Gitee图床的搭建</h3><h4 id="Gitee也可以搭建图床，搭建步骤和Github雷同。并相比于Github，Gitee速度更快并且没有类似github被墙的问题。因此本人更青睐于使用Gitee图床。"><a href="#Gitee也可以搭建图床，搭建步骤和Github雷同。并相比于Github，Gitee速度更快并且没有类似github被墙的问题。因此本人更青睐于使用Gitee图床。" class="headerlink" title="Gitee也可以搭建图床，搭建步骤和Github雷同。并相比于Github，Gitee速度更快并且没有类似github被墙的问题。因此本人更青睐于使用Gitee图床。"></a>Gitee也可以搭建图床，搭建步骤和Github雷同。并相比于Github，Gitee速度更快并且没有类似github被墙的问题。因此本人更青睐于使用Gitee图床。</h4><h4 id="1-创建Gitee仓库"><a href="#1-创建Gitee仓库" class="headerlink" title="1. 创建Gitee仓库"></a>1. 创建Gitee仓库</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085519.png"></p>
<h4 id="2-创建Gitee私人令牌"><a href="#2-创建Gitee私人令牌" class="headerlink" title="2. 创建Gitee私人令牌"></a>2. 创建Gitee私人令牌</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085534.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085604.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085612.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085612.png"></p>
<h4 id="3-配置PicGo"><a href="#3-配置PicGo" class="headerlink" title="3. 配置PicGo"></a>3. 配置PicGo</h4><ul>
<li>安装插件<br><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085628.png"></li>
<li>配置<br><img src="https://gitee.com/Haikez/images_bed/raw/master/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085635.png"></li>
</ul>
]]></content>
      <categories>
        <category>搭建个人博客</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>ReentrantLock锁--可重入锁</title>
    <url>/2021/04/25/ReentrantLock%E9%94%81-%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81/</url>
    <content><![CDATA[<h1 id="ReentrantLock锁–可重入锁"><a href="#ReentrantLock锁–可重入锁" class="headerlink" title="ReentrantLock锁–可重入锁"></a>ReentrantLock锁–可重入锁</h1><h2 id="ReentrantLock是Lock接口的实现类，它拥有和synchronized相同的并发性和内存语义，通常使用ReentrantLock锁进行安全控制。它可以实现显示加锁、释放锁。"><a href="#ReentrantLock是Lock接口的实现类，它拥有和synchronized相同的并发性和内存语义，通常使用ReentrantLock锁进行安全控制。它可以实现显示加锁、释放锁。" class="headerlink" title="ReentrantLock是Lock接口的实现类，它拥有和synchronized相同的并发性和内存语义，通常使用ReentrantLock锁进行安全控制。它可以实现显示加锁、释放锁。"></a>ReentrantLock是Lock接口的实现类，它拥有和synchronized相同的并发性和内存语义，通常使用ReentrantLock锁进行安全控制。它可以实现显示加锁、释放锁。</h2><h2 id="ReentrantLock锁的实现步骤："><a href="#ReentrantLock锁的实现步骤：" class="headerlink" title="ReentrantLock锁的实现步骤："></a>ReentrantLock锁的实现步骤：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    lock.lock();<span class="comment">//加锁操作</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java的多线程</category>
      </categories>
  </entry>
  <entry>
    <title>SSH秘钥安装到服务器</title>
    <url>/2020/12/31/SSH%E7%A7%98%E9%92%A5%E5%AE%89%E8%A3%85%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="SSH秘钥安装到服务器"><a href="#SSH秘钥安装到服务器" class="headerlink" title="SSH秘钥安装到服务器"></a>SSH秘钥安装到服务器</h2><h3 id="一、本机秘钥生成"><a href="#一、本机秘钥生成" class="headerlink" title="一、本机秘钥生成"></a>一、本机秘钥生成</h3><p>终端输入:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen </span><br></pre></td></tr></table></figure>
<p>执行这条命令后会在宿主目录内生成.ssh文件夹里面包含公钥和私钥<br><img src="https://gitee.com/Haikez/images_bed/raw/master/SSH%E7%A7%98%E9%92%A5%E5%AE%89%E8%A3%85%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227085743.png"></p>
<a id="more"></a>

<p>输入:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>将显示的结果拷贝下来<br><img src="https://gitee.com/Haikez/images_bed/raw/master/SSH%E7%A7%98%E9%92%A5%E5%AE%89%E8%A3%85%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227085728.png"></p>
<h3 id="二、在服务器上安装秘钥"><a href="#二、在服务器上安装秘钥" class="headerlink" title="二、在服务器上安装秘钥"></a>二、在服务器上安装秘钥</h3><p>键入以下命令，在服务器上安装公钥：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> .ssh <span class="comment">#如没有.ssh文件夹请新建</span></span><br><span class="line">$ vim authorized_keys <span class="comment">#把刚刚拷贝的公钥粘贴到里面</span></span><br></pre></td></tr></table></figure>
<p>如此便完成了公钥的安装。为了确保连接成功，请保证以下文件权限正确：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chmod 600 authorized_keys</span><br><span class="line">$ chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure>
<h3 id="三、设置-SSH，打开密钥登录功能"><a href="#三、设置-SSH，打开密钥登录功能" class="headerlink" title="三、设置 SSH，打开密钥登录功能"></a>三、设置 SSH，打开密钥登录功能</h3><p>编辑 /etc/ssh/sshd_config 文件，进行如下设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br></pre></td></tr></table></figure>
<p>另外，请留意 root 用户能否通过 SSH 登录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure>
<p>当你完成全部设置，并以密钥方式登录成功后，再禁用密码登录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PasswordAuthentication no <span class="comment">#可不设置</span></span><br></pre></td></tr></table></figure>
<p>最后，重启 SSH 服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ service sshd restart</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux学习</category>
      </categories>
      <tags>
        <tag>SSH秘钥管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat详解</title>
    <url>/2021/04/27/Tomcat%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="Tomcat详解"><a href="#Tomcat详解" class="headerlink" title="Tomcat详解"></a>Tomcat详解</h1><h2 id="1、安装Tomcat"><a href="#1、安装Tomcat" class="headerlink" title="1、安装Tomcat"></a>1、安装Tomcat</h2><h3 id="1-1、下载"><a href="#1-1、下载" class="headerlink" title="1.1、下载"></a>1.1、下载</h3><p>Tomcat官网：<a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a><br><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210427162705.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210427162715.png"></p>
<a id="more"></a>
<h3 id="1-2、安装"><a href="#1-2、安装" class="headerlink" title="1.2、安装"></a>1.2、安装</h3><p>解压下载完的压缩包到指定路径。<br><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210427162936.png"></p>
<h3 id="1-3、配置环境变量（Mac电脑）"><a href="#1-3、配置环境变量（Mac电脑）" class="headerlink" title="1.3、配置环境变量（Mac电脑）"></a>1.3、配置环境变量（Mac电脑）</h3><ul>
<li>在宿主目录下编辑 <strong>.bash_profile</strong> 文件<br><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210427163358.png"></li>
<li>添加环境变量<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TOMCAT_HOME=/Users/haikez/Environment/apache-tomcat-10.0.5</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$TOMCAT_HOME</span>/bin</span><br></pre></td></tr></table></figure>
<img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210427163438.png"></li>
<li>配置完环境变量就可以在命令行启动Tomcat<h2 id="2、Tomcat的简单使用"><a href="#2、Tomcat的简单使用" class="headerlink" title="2、Tomcat的简单使用"></a>2、Tomcat的简单使用</h2></li>
<li>打开bin目录执行startup文件,就可以启动Tomcat</li>
<li>打开浏览器输入localhost:8080端口就能看到效果<br><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210427164029.png"></li>
<li>Tomcat会默认展示 <strong>/webapps/ROOT</strong>目录下的index.html<h2 id="3、Tomcat的一些配置"><a href="#3、Tomcat的一些配置" class="headerlink" title="3、Tomcat的一些配置"></a>3、Tomcat的一些配置</h2></li>
<li>Tomcat的核心配置文件为 <strong>/conf/server.xml</strong></li>
<li>通过修改server.xml文件对Tomcat进行配置</li>
<li>更改端口<br><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210427164958.png"></li>
<li>更改主机<br><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210427165021.png"><br>更改主机名时需要对本机的主机进行同步修改，Mac电脑下通过修改 <strong>/etc/hosts</strong>文件，将<strong>127.0.0.1</strong>映射到更改的主机名。<br><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210427165438.png"></li>
<li>Tomcat服务器下网站应有的结构<br><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210427170032.png"></li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
  </entry>
  <entry>
    <title>Web基本概念</title>
    <url>/2021/04/27/Web%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h1 id="Web基本概念"><a href="#Web基本概念" class="headerlink" title="Web基本概念"></a>Web基本概念</h1><h2 id="1、-基本概念"><a href="#1、-基本概念" class="headerlink" title="1、 基本概念"></a>1、 基本概念</h2><h3 id="1-1、前言"><a href="#1-1、前言" class="headerlink" title="1.1、前言"></a>1.1、前言</h3><p>web开发：</p>
<ul>
<li>静态web<ul>
<li>html，css</li>
<li>提供给所有人看的数据始终不发生改变！</li>
</ul>
</li>
<li>动态web<ul>
<li>淘宝，几乎所有的网站；</li>
<li>提供给所有人看的数据始终发生改变，每个人在不同时间，不同地点看到的信息各不相同。</li>
<li>技术栈：<strong>Servlet/JSP</strong> , <strong>ASP</strong>, <strong>PHP</strong></li>
</ul>
</li>
</ul>
<p>在Java中，动态web资源开发的技术统称为JavaWeb。</p>
<a id="more"></a>
<h3 id="1-2、-web应用程序"><a href="#1-2、-web应用程序" class="headerlink" title="1.2、 web应用程序"></a>1.2、 web应用程序</h3><p>web应用程序：可以提供浏览器访问的程序；</p>
<ul>
<li>a.html、b.html等多个web资源可以被外界访问，对外界提供服务；</li>
<li>统一的web资源都会被放在同一个文件夹下，web应用程序–&gt;Tomcat：服务器</li>
<li>一个web应用由多部分组成（静态web，动态web）<ul>
<li>html，css，js</li>
<li>jsp，servlet</li>
<li>java程序</li>
<li>jar包</li>
<li>配置文件（Properties）</li>
</ul>
</li>
</ul>
<p>web应用程序编写完成之后，若想提供给外界访问需要一个服务器进行统一管理。</p>
<h3 id="1-3、静态web"><a href="#1-3、静态web" class="headerlink" title="1.3、静态web"></a>1.3、静态web</h3><ul>
<li>*.htm、 *.html这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。<br><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210427153352.png"></li>
<li>静态web的缺点<ul>
<li>Web页面无法动态更新，所有用户看到的都是同一个页面<ul>
<li>轮播图，点击特效：伪动态</li>
<li>JavaScript</li>
<li>VBScript</li>
</ul>
</li>
<li>它无法和数据库交互（数据无法持久化，用户无法交互）<h3 id="1-4、动态web"><a href="#1-4、动态web" class="headerlink" title="1.4、动态web"></a>1.4、动态web</h3>页面会动态展示：Web的页面展示效果会因人而异；<br><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210427154538.png"></li>
</ul>
</li>
<li>缺点<ul>
<li>假如服务器的动态web资源出现错误，我们需要重新编写<strong>后台程序</strong>，重新发布；<ul>
<li>停机维护</li>
</ul>
</li>
</ul>
</li>
<li>优点<ul>
<li>web页面可以动态更新，所有用户看到的都不是同一页面</li>
<li>它可以与数据库交互（数据持久化：注册、商品信息、用户信息……）<br><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210427155033.png"><h2 id="2、web服务器"><a href="#2、web服务器" class="headerlink" title="2、web服务器"></a>2、web服务器</h2><h3 id="ASP"><a href="#ASP" class="headerlink" title="ASP"></a>ASP</h3></li>
</ul>
</li>
<li>微软：国内最早流行的就是ASP；</li>
<li>在HTML中嵌套了VB的脚本，ASP+COM；</li>
<li>维护成本高</li>
<li>C#</li>
<li>IIS<h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3></li>
<li> PHP开发速度很快，功能很强大，跨平台，代码简单</li>
<li> 无法承受大访问量（局限性）<h3 id="JSP-Servlet"><a href="#JSP-Servlet" class="headerlink" title="JSP/Servlet:"></a>JSP/Servlet:</h3>B/S:浏览器和服务器<br>C/S：客户端和服务器</li>
<li>sun公司主推的B/S架构</li>
<li>基于java语言的</li>
<li>可以承载三高问题带来的影响</li>
<li>语法很像ASP，加强市场强度<h3 id="2-2、web服务器"><a href="#2-2、web服务器" class="headerlink" title="2.2、web服务器"></a>2.2、web服务器</h3>服务器是一种被动的操作，用来处理用户的请求，和给用户一些响应信息。<br>IIS：微软的；Windows自带；ASP<br>Tomcat：开源免费的轻量级web服务器，实际上运行JSP页面和Servlet</li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
  </entry>
  <entry>
    <title>同步方法和同步块</title>
    <url>/2021/04/25/%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E5%92%8C%E5%90%8C%E6%AD%A5%E5%9D%97/</url>
    <content><![CDATA[<h1 id="同步方法和同步块-synchronized"><a href="#同步方法和同步块-synchronized" class="headerlink" title="同步方法和同步块(synchronized)"></a>同步方法和同步块(synchronized)</h1><h2 id="一、-同步方法"><a href="#一、-同步方法" class="headerlink" title="一、 同步方法"></a>一、 同步方法</h2><h3 id="1-public-synchronized-void-method"><a href="#1-public-synchronized-void-method" class="headerlink" title="1. public synchronized void method(){}"></a>1. public synchronized void method(){}</h3><p><strong>synchronized</strong>方法控制对 <strong><em>“对象”</em></strong> 的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象锁才能执行。否则会导致阻塞。方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行。</p>
<h3 id="2-若将一个大方法申明为一个synchronized方法，将极大的影响效率。"><a href="#2-若将一个大方法申明为一个synchronized方法，将极大的影响效率。" class="headerlink" title="2. 若将一个大方法申明为一个synchronized方法，将极大的影响效率。"></a>2. 若将一个大方法申明为一个synchronized方法，将极大的影响效率。</h3><a id="more"></a>

<h2 id="二、同步块"><a href="#二、同步块" class="headerlink" title="二、同步块"></a>二、同步块</h2><h3 id="1-synchronized-Obj"><a href="#1-synchronized-Obj" class="headerlink" title="1. synchronized(Obj){}"></a>1. synchronized(Obj){}</h3><ul>
<li><h4 id="Obj（同步监视器）可以是任何对象，但推荐使用共享资源作为同步监视器。"><a href="#Obj（同步监视器）可以是任何对象，但推荐使用共享资源作为同步监视器。" class="headerlink" title="Obj（同步监视器）可以是任何对象，但推荐使用共享资源作为同步监视器。"></a>Obj（同步监视器）可以是任何对象，但推荐使用共享资源作为同步监视器。</h4></li>
<li><h4 id="同步方法中无需指定同步监视器，因为同步方法中的同步监视器就是this，就是这个对象本身，也可以是class。"><a href="#同步方法中无需指定同步监视器，因为同步方法中的同步监视器就是this，就是这个对象本身，也可以是class。" class="headerlink" title="同步方法中无需指定同步监视器，因为同步方法中的同步监视器就是this，就是这个对象本身，也可以是class。"></a>同步方法中无需指定同步监视器，因为同步方法中的同步监视器就是this，就是这个对象本身，也可以是class。</h4><h3 id="2-同步块的Obj就是被修改的对象，方法体的内容为：对这个对象的增删改。"><a href="#2-同步块的Obj就是被修改的对象，方法体的内容为：对这个对象的增删改。" class="headerlink" title="2. 同步块的Obj就是被修改的对象，方法体的内容为：对这个对象的增删改。"></a>2. 同步块的Obj就是被修改的<em>对象</em>，方法体的内容为：对这个对象的<em>增删改</em>。</h3><h2 id="三、使用同步方法和同步块对三个不安全实例的优化。"><a href="#三、使用同步方法和同步块对三个不安全实例的优化。" class="headerlink" title="三、使用同步方法和同步块对三个不安全实例的优化。"></a>三、使用同步方法和同步块对三个不安全实例的优化。</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对于不安全的买票机制，只需要对Buytickets中的buy方法加上synchronized修饰。因为变量ticketNum就是本类中的属性,buy方法也对ticketNum进行修改。</span></span><br><span class="line"><span class="keyword">package</span> demo.study.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBuyTickets</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Buytickets station = <span class="keyword">new</span> Buytickets();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">&quot;小明&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">&quot;小红&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">&quot;黄牛&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buytickets</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNum = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                buy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//只需用synchronized对buy方法修饰</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.ticketNum&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;买到了&quot;</span>+ticketNum--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对于不安全的银行机制，不能只是将run方法加个synchronized修饰，因为，run方法的对象是整个Drawing，对Drawing上锁不足以解决资源共享问题。而是使用同步块对account对象进行追踪，并把对account操作的语句添加到方法体中。</span></span><br><span class="line"><span class="keyword">package</span> demo.study.syn;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBank</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account(<span class="number">1000</span>,<span class="string">&quot;中国银行&quot;</span>);</span><br><span class="line">        Drawing you = <span class="keyword">new</span> Drawing(account,<span class="number">50</span>,<span class="string">&quot;you&quot;</span>);</span><br><span class="line">        Drawing girlFriend = <span class="keyword">new</span> Drawing(account,<span class="number">100</span>,<span class="string">&quot;girlFriend&quot;</span>);</span><br><span class="line">        you.start();</span><br><span class="line">        girlFriend.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> money, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drawing</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Account account;</span><br><span class="line">    <span class="keyword">int</span> drawMoney;</span><br><span class="line">    <span class="keyword">int</span> nowMoney;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Drawing</span><span class="params">(Account account,<span class="keyword">int</span> drawMoney,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.account=account;</span><br><span class="line">        <span class="keyword">this</span>.drawMoney=drawMoney;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (account)&#123;</span><br><span class="line">            <span class="keyword">if</span> (account.money-drawMoney&lt;<span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;钱不够了&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            account.money-=drawMoney;</span><br><span class="line">            nowMoney+=drawMoney;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;手里的钱&quot;</span>+nowMoney);</span><br><span class="line">            System.out.println(account.name+<span class="string">&quot;卡内余额&quot;</span>+account.money);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对不安全的list的优化</span></span><br><span class="line"><span class="keyword">package</span> demo.study.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (list) &#123;</span><br><span class="line">                    list.add(Thread.currentThread().getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java的多线程</category>
      </categories>
  </entry>
  <entry>
    <title>树莓派系统安装和基本配置</title>
    <url>/2020/12/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="树莓派系统安装、"><a href="#树莓派系统安装、" class="headerlink" title="树莓派系统安装、"></a>树莓派系统安装、</h2><h3 id="需要的工具："><a href="#需要的工具：" class="headerlink" title="需要的工具："></a>需要的工具：</h3><ol>
<li>树莓派一个</li>
<li>8G以上SD卡一张</li>
<li>读卡器</li>
<li>电脑<h3 id="1-树莓派系统下载"><a href="#1-树莓派系统下载" class="headerlink" title="1. 树莓派系统下载:"></a>1. 树莓派系统下载:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">系统下载地址:https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;raspberry-pi-os-images&#x2F;raspios_armhf&#x2F;images&#x2F;raspios_armhf-2020-12-04&#x2F;2020-12-02-raspios-buster-armhf.zip</span><br></pre></td></tr></table></figure>
<img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/20210227081725.png"><a id="more"></a>

</li>
</ol>
<h3 id="2-烧录树莓派系统"><a href="#2-烧录树莓派系统" class="headerlink" title="2. 烧录树莓派系统"></a>2. 烧录树莓派系统</h3><h4 id="需要的软件"><a href="#需要的软件" class="headerlink" title="需要的软件:"></a>需要的软件:</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/20210227081637.png"></p>
<h4 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址:"></a>下载地址:</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>www.balena.io<span class="regexp">/etcher/</span></span><br></pre></td></tr></table></figure>
<h4 id="烧录镜像"><a href="#烧录镜像" class="headerlink" title="烧录镜像:"></a>烧录镜像:</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/20210227081652.png"></p>
<h4 id="烧录完成后重新插拔读卡器"><a href="#烧录完成后重新插拔读卡器" class="headerlink" title="烧录完成后重新插拔读卡器"></a>烧录完成后重新插拔读卡器</h4><h3 id="3-开启ssh服务"><a href="#3-开启ssh服务" class="headerlink" title="3. 开启ssh服务"></a>3. 开启ssh服务</h3><h4 id="新建文件名为ssh的文件。"><a href="#新建文件名为ssh的文件。" class="headerlink" title="新建文件名为ssh的文件。"></a>新建文件名为ssh的文件。</h4><h4 id="将ssh文件拖入SD卡的boot分区。"><a href="#将ssh文件拖入SD卡的boot分区。" class="headerlink" title="将ssh文件拖入SD卡的boot分区。"></a>将ssh文件拖入SD卡的boot分区。</h4><h3 id="4-使树莓派开机自动连接Wi-Fi"><a href="#4-使树莓派开机自动连接Wi-Fi" class="headerlink" title="4. 使树莓派开机自动连接Wi-Fi"></a>4. 使树莓派开机自动连接Wi-Fi</h3><h4 id="新建名为wpa-supplicant-conf的文件。"><a href="#新建名为wpa-supplicant-conf的文件。" class="headerlink" title="新建名为wpa_supplicant.conf的文件。"></a>新建名为wpa_supplicant.conf的文件。</h4><h4 id="编辑文件内容为"><a href="#编辑文件内容为" class="headerlink" title="编辑文件内容为"></a>编辑文件内容为</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/20210227081703.png"></p>
<h4 id="将文件wpa-supplicant-conf拖入SD卡的boot分区。"><a href="#将文件wpa-supplicant-conf拖入SD卡的boot分区。" class="headerlink" title="将文件wpa_supplicant.conf拖入SD卡的boot分区。"></a>将文件wpa_supplicant.conf拖入SD卡的boot分区。</h4><h3 id="5-将SD卡插入树莓派开机即可"><a href="#5-将SD卡插入树莓派开机即可" class="headerlink" title="5. 将SD卡插入树莓派开机即可"></a>5. 将SD卡插入树莓派开机即可</h3>]]></content>
      <categories>
        <category>树莓派的反击</category>
      </categories>
      <tags>
        <tag>树莓派历练</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派配置花生壳内网穿透</title>
    <url>/2020/12/31/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<h2 id="树莓派配置花生壳内网穿透"><a href="#树莓派配置花生壳内网穿透" class="headerlink" title="树莓派配置花生壳内网穿透"></a>树莓派配置花生壳内网穿透</h2><h3 id="一、工具包下载"><a href="#一、工具包下载" class="headerlink" title="一、工具包下载"></a>一、工具包下载</h3><h4 id="下载工具包到树莓派"><a href="#下载工具包到树莓派" class="headerlink" title="下载工具包到树莓派:"></a>下载工具包到树莓派:</h4><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">下载地址<span class="symbol">:https</span><span class="symbol">://dl-cdn</span>.oray.com/hsk/linux/phtunnel_5_0_rapi_aarch64.deb</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080648.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080704.png"></p>
<h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><p>注意：安装花生壳前，需输入命令：sudo -s 切换到管理员权限。</p>
<a id="more"></a>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080726.png"></p>
<h4 id="1、使用cd命令进入安装包所在的文件路径，输入安装命令：dpkg-i-安装包名称。回车，等待安装完成。"><a href="#1、使用cd命令进入安装包所在的文件路径，输入安装命令：dpkg-i-安装包名称。回车，等待安装完成。" class="headerlink" title="1、使用cd命令进入安装包所在的文件路径，输入安装命令：dpkg -i 安装包名称。回车，等待安装完成。"></a>1、使用cd命令进入安装包所在的文件路径，输入安装命令：dpkg -i 安装包名称。回车，等待安装完成。</h4><p>如:dpkg -i phtunnel_5_0_rapi_aarch64.deb<br>安装成功后，将显示花生壳的SN码、默认密码（admin）及远程管理地址<a href="http://b.oray.com./">http://b.oray.com。</a><br><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080757.png"></p>
<h3 id="三、操作功能"><a href="#三、操作功能" class="headerlink" title="三、操作功能"></a>三、操作功能</h3><h4 id="1、输入命令：phddns回车，可以看到扩展功能。phddns-start（启动）-status（状态）-stop（停止）-restart（重启）-reset（重置）-enable（开机自启动）-disable（关闭开机自启动）-version（版本）"><a href="#1、输入命令：phddns回车，可以看到扩展功能。phddns-start（启动）-status（状态）-stop（停止）-restart（重启）-reset（重置）-enable（开机自启动）-disable（关闭开机自启动）-version（版本）" class="headerlink" title="1、输入命令：phddns回车，可以看到扩展功能。phddns start（启动）| status（状态）| stop（停止）|restart（重启）| reset（重置）|enable（开机自启动）|disable（关闭开机自启动）|version（版本）"></a>1、输入命令：phddns回车，可以看到扩展功能。phddns start（启动）| status（状态）| stop（停止）|restart（重启）| reset（重置）|enable（开机自启动）|disable（关闭开机自启动）|version（版本）</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080812.png"></p>
<h4 id="2、具体命令操作如下："><a href="#2、具体命令操作如下：" class="headerlink" title="2、具体命令操作如下："></a>2、具体命令操作如下：</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080854.png"></p>
<h4 id="3、日志文件存放路径：-var-log-phddns"><a href="#3、日志文件存放路径：-var-log-phddns" class="headerlink" title="3、日志文件存放路径：/var/log/phddns"></a>3、日志文件存放路径：/var/log/phddns</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080903.png"></p>
<h4 id="4、卸载命令：dpkg-r-phddns"><a href="#4、卸载命令：dpkg-r-phddns" class="headerlink" title="4、卸载命令：dpkg -r phddns"></a>4、卸载命令：dpkg -r phddns</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080930.png"></p>
<h3 id="四、添加内网穿透映射"><a href="#四、添加内网穿透映射" class="headerlink" title="四、添加内网穿透映射"></a>四、添加内网穿透映射</h3><h4 id="1、树莓派中的花生壳安装完成后，先复制生成的SN码。然后在浏览器中访问远程管理地址http-b-oray-com-，在登录页面中输入SN码与默认密码（admin）登录。"><a href="#1、树莓派中的花生壳安装完成后，先复制生成的SN码。然后在浏览器中访问远程管理地址http-b-oray-com-，在登录页面中输入SN码与默认密码（admin）登录。" class="headerlink" title="1、树莓派中的花生壳安装完成后，先复制生成的SN码。然后在浏览器中访问远程管理地址http://b.oray.com ，在登录页面中输入SN码与默认密码（admin）登录。"></a>1、树莓派中的花生壳安装完成后，先复制生成的SN码。然后在浏览器中访问远程管理地址<a href="http://b.oray.com/">http://b.oray.com</a> ，在登录页面中输入SN码与默认密码（admin）登录。</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080943.png"></p>
<h4 id="2、首次登录，需先激活。提供扫码激活和密码激活两种方式，可灵活选择。"><a href="#2、首次登录，需先激活。提供扫码激活和密码激活两种方式，可灵活选择。" class="headerlink" title="2、首次登录，需先激活。提供扫码激活和密码激活两种方式，可灵活选择。"></a>2、首次登录，需先激活。提供扫码激活和密码激活两种方式，可灵活选择。</h4><p>①扫码激活：需使用花生壳管理APP或微信进行扫码激活；<br>②密码激活：输入已注册的Oray帐号密码激活。<br><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080953.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227081008.png"></p>
<h4 id="3、激活成功后，进入花生壳管理平台。若绑定SN码的帐号只有动态域名解析功能，需使用内网穿透功能时，可点击“免费开通”，或直接将帐号升级到带内网穿透功能的服务版本。"><a href="#3、激活成功后，进入花生壳管理平台。若绑定SN码的帐号只有动态域名解析功能，需使用内网穿透功能时，可点击“免费开通”，或直接将帐号升级到带内网穿透功能的服务版本。" class="headerlink" title="3、激活成功后，进入花生壳管理平台。若绑定SN码的帐号只有动态域名解析功能，需使用内网穿透功能时，可点击“免费开通”，或直接将帐号升级到带内网穿透功能的服务版本。"></a>3、激活成功后，进入花生壳管理平台。若绑定SN码的帐号只有动态域名解析功能，需使用内网穿透功能时，可点击“免费开通”，或直接将帐号升级到带内网穿透功能的服务版本。</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227081027.png"></p>
<h4 id="4、还可把鼠标移动到页面右上角帐号处，点击“切换帐号”更换带内网穿透功能的帐号登录使用。"><a href="#4、还可把鼠标移动到页面右上角帐号处，点击“切换帐号”更换带内网穿透功能的帐号登录使用。" class="headerlink" title="4、还可把鼠标移动到页面右上角帐号处，点击“切换帐号”更换带内网穿透功能的帐号登录使用。"></a>4、还可把鼠标移动到页面右上角帐号处，点击“切换帐号”更换带内网穿透功能的帐号登录使用。</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227081041.png"></p>
<h4 id="5、添加内网穿透映射时，点击页面上的“增加映射”按钮。"><a href="#5、添加内网穿透映射时，点击页面上的“增加映射”按钮。" class="headerlink" title="5、添加内网穿透映射时，点击页面上的“增加映射”按钮。"></a>5、添加内网穿透映射时，点击页面上的“增加映射”按钮。</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227081050.png"></p>
<h4 id="6、根据页面提示填写映射所需的信息，这里以映射树莓派的SSH服务"><a href="#6、根据页面提示填写映射所需的信息，这里以映射树莓派的SSH服务" class="headerlink" title="6、根据页面提示填写映射所需的信息，这里以映射树莓派的SSH服务"></a>6、根据页面提示填写映射所需的信息，这里以映射树莓派的SSH服务</h4><p>（10022端口）为例：<br>①应用名称：自定义<br>②应用图标：自行选择<br>③映射类型：选择TCP<br>④映射模板：暂不选择模板<br>⑤外网域名：选择用作外网访问的域名<br>⑥外网端口：选择动态端口<br>⑦内网主机：树莓派设备的内网IP地址<br>⑧内网端口：映射的服务类型对应端口10022<br>⑨带宽：购买映射带宽后，可支持给映射分配额外带宽，这里保存默认。<br>确认映射内容无误后，点击“确定”。<br><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227081206.png"></p>
<h4 id="7、映射添加完成，生成格式为：域名-5位数端口号的外网访问地址。"><a href="#7、映射添加完成，生成格式为：域名-5位数端口号的外网访问地址。" class="headerlink" title="7、映射添加完成，生成格式为：域名+5位数端口号的外网访问地址。"></a>7、映射添加完成，生成格式为：域名+5位数端口号的外网访问地址。</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227081132.png"></p>
<h4 id="8、在外网的电脑上，打开连接SSH服务的工具程序，输入域名与5位数端口号。"><a href="#8、在外网的电脑上，打开连接SSH服务的工具程序，输入域名与5位数端口号。" class="headerlink" title="8、在外网的电脑上，打开连接SSH服务的工具程序，输入域名与5位数端口号。"></a>8、在外网的电脑上，打开连接SSH服务的工具程序，输入域名与5位数端口号。</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227081150.png"></p>
<h4 id="9、远程访问树莓派的SSH服务成功，此时只要保持树莓派上安装的花生壳程序在线即可。"><a href="#9、远程访问树莓派的SSH服务成功，此时只要保持树莓派上安装的花生壳程序在线即可。" class="headerlink" title="9、远程访问树莓派的SSH服务成功，此时只要保持树莓派上安装的花生壳程序在线即可。"></a>9、远程访问树莓派的SSH服务成功，此时只要保持树莓派上安装的花生壳程序在线即可。</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227081222.png"></p>
<h4 id="五、如果重装了系统"><a href="#五、如果重装了系统" class="headerlink" title="五、如果重装了系统"></a>五、如果重装了系统</h4><h4 id="用树莓派的SN码登陆花生壳，绑定原有的账号。然后删除原来账号的端口，新建新端口。即可生效。"><a href="#用树莓派的SN码登陆花生壳，绑定原有的账号。然后删除原来账号的端口，新建新端口。即可生效。" class="headerlink" title="用树莓派的SN码登陆花生壳，绑定原有的账号。然后删除原来账号的端口，新建新端口。即可生效。"></a>用树莓派的SN码登陆花生壳，绑定原有的账号。然后删除原来账号的端口，新建新端口。即可生效。</h4>]]></content>
      <categories>
        <category>树莓派的反击</category>
      </categories>
      <tags>
        <tag>内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title>第一个Mybatis程序</title>
    <url>/2021/05/21/%E7%AC%AC%E4%B8%80%E4%B8%AAMybatis%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="第一个Mybatis程序"><a href="#第一个Mybatis程序" class="headerlink" title="第一个Mybatis程序"></a>第一个Mybatis程序</h1><p>流程：搭建环境–&gt;导入Mybatis–&gt;编写代码–&gt;测试</p>
<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="搭建数据库"><a href="#搭建数据库" class="headerlink" title="搭建数据库"></a>搭建数据库</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Mybatis/20210521105721.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `mybatis`;</span><br><span class="line">USE `mybatis`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`(</span><br><span class="line">	`id` <span class="type">INT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>,</span><br><span class="line">	`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	`pwd` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>`(`id`,`name`,`pwd`) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;倪矗1&#x27;</span>,<span class="string">&#x27;1234&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;倪矗2&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;倪矗3&#x27;</span>,<span class="string">&#x27;12346&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;倪矗4&#x27;</span>,<span class="string">&#x27;123654&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>新建项目(作为父项目)</p>
<ol>
<li>新建一个普通的Maven项目</li>
<li>删除src文件</li>
<li>导入jar包<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
创建模块(作为子项目，子项目可以直接使用父项目的依赖)</li>
</ol>
<ul>
<li>编写mybatis核心配置文件  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> </span></span><br><span class="line"><span class="tag">                        <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nc20011019&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写mybatis工具类</li>
</ul>
]]></content>
      <categories>
        <category>Mybatis学习</category>
      </categories>
  </entry>
  <entry>
    <title>线程协作之生产者消费者模型</title>
    <url>/2021/04/25/%E7%BA%BF%E7%A8%8B%E5%8D%8F%E4%BD%9C%E4%B9%8B%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="线程协作之生产者消费者模型"><a href="#线程协作之生产者消费者模型" class="headerlink" title="线程协作之生产者消费者模型"></a>线程协作之生产者消费者模型</h1><p><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210505143357.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210505143413.png"></p>
<a id="more"></a>
<h3 id="生产者和消费者共同协助，管理一块缓冲区"><a href="#生产者和消费者共同协助，管理一块缓冲区" class="headerlink" title="生产者和消费者共同协助，管理一块缓冲区"></a>生产者和消费者共同协助，管理一块缓冲区</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.study.ThreadTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynContainer container = <span class="keyword">new</span> SynContainer();</span><br><span class="line">        Producer producer = <span class="keyword">new</span> Producer(container);</span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> Consumer(container);</span><br><span class="line">        consumer.start();</span><br><span class="line">        producer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chicken</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chicken</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    SynContainer container = <span class="keyword">new</span> SynContainer();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(SynContainer container)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container=container;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;生产了&quot;</span>+i+<span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                container.push(<span class="keyword">new</span> Chicken(i));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    SynContainer container = <span class="keyword">new</span> SynContainer();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(SynContainer container)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container=container;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;消费了&quot;</span>+ <span class="keyword">this</span>.container.pop().id+<span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//容器（缓冲区）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynContainer</span></span>&#123;</span><br><span class="line">    Chicken[] chickens=<span class="keyword">new</span> Chicken[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//添加鸡</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Chicken chicken)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//如果鸡的数量等于容器大小（容器满）</span></span><br><span class="line">        <span class="keyword">if</span> (count==chickens.length)&#123;</span><br><span class="line">            <span class="comment">//生产者等待</span></span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通知消费者消费</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        chickens[count]=chicken;</span><br><span class="line">        count++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Chicken <span class="title">pop</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//通知生产者生产</span></span><br><span class="line">            notifyAll();</span><br><span class="line">            <span class="comment">//消费者等待</span></span><br><span class="line">            wait();</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">return</span> chickens[count];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java的多线程</category>
      </categories>
  </entry>
  <entry>
    <title>线程的五大状态</title>
    <url>/2021/04/22/%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BA%94%E5%A4%A7%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<h1 id="线程的五大状态"><a href="#线程的五大状态" class="headerlink" title="线程的五大状态"></a>线程的五大状态</h1><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210422193657.png"></p>
<a id="more"></a>
<h1 id="操作线程的方法"><a href="#操作线程的方法" class="headerlink" title="操作线程的方法"></a>操作线程的方法</h1><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210422193901.png"></p>
<h2 id="一、线程的停止-stop"><a href="#一、线程的停止-stop" class="headerlink" title="一、线程的停止_stop()"></a>一、线程的停止_stop()</h2><h3 id="建议手动在线程中写stop-方法"><a href="#建议手动在线程中写stop-方法" class="headerlink" title="建议手动在线程中写stop()方法"></a>建议手动在线程中写stop()方法</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210422194057.png"></p>
<h2 id="二、线程的休眠-sleep"><a href="#二、线程的休眠-sleep" class="headerlink" title="二、线程的休眠_sleep()"></a>二、线程的休眠_sleep()</h2><h3 id="1-sleep-方法会导致线程阻塞，必须等到时间结束过后线程才能继续执行。"><a href="#1-sleep-方法会导致线程阻塞，必须等到时间结束过后线程才能继续执行。" class="headerlink" title="1. sleep()方法会导致线程阻塞，必须等到时间结束过后线程才能继续执行。"></a>1. sleep()方法会导致线程<em>阻塞</em>，必须等到时间结束过后线程才能继续执行。</h3><h3 id="2-使用：Thread-sleep-1000"><a href="#2-使用：Thread-sleep-1000" class="headerlink" title="2. 使用：Thread.sleep(1000);"></a>2. 使用：Thread.sleep(1000);</h3><h3 id="3-使用时需要加上异常处理"><a href="#3-使用时需要加上异常处理" class="headerlink" title="3. 使用时需要加上异常处理"></a>3. 使用时需要加上异常处理</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210423102725.png"></p>
<h2 id="三、线程的礼让-yield"><a href="#三、线程的礼让-yield" class="headerlink" title="三、线程的礼让_yield()"></a>三、线程的礼让_yield()</h2><h3 id="1-使用：Thread-yield"><a href="#1-使用：Thread-yield" class="headerlink" title="1. 使用：Thread.yield();"></a>1. 使用：Thread.yield();</h3><h3 id="2-线程的礼让是让当前线程回到就绪状态，等待CPU调度，相当于回到同一起跑线。"><a href="#2-线程的礼让是让当前线程回到就绪状态，等待CPU调度，相当于回到同一起跑线。" class="headerlink" title="2. 线程的礼让是让当前线程回到就绪状态，等待CPU调度，相当于回到同一起跑线。"></a>2. 线程的礼让是让当前线程回到就绪状态，等待CPU调度，相当于回到同一起跑线。</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210423101047.png"></p>
<h2 id="四、线程的强制执行-join"><a href="#四、线程的强制执行-join" class="headerlink" title="四、线程的强制执行_join()"></a>四、线程的强制执行_join()</h2><h3 id="1-使用：线程类对象-join"><a href="#1-使用：线程类对象-join" class="headerlink" title="1. 使用：线程类对象.join();"></a>1. 使用：线程类对象.join();</h3><h3 id="2-线程的强制执行会导致别的线程阻塞，直到插入的线程完成过后，其余线程才会继续执行。"><a href="#2-线程的强制执行会导致别的线程阻塞，直到插入的线程完成过后，其余线程才会继续执行。" class="headerlink" title="2. 线程的强制执行会导致别的线程阻塞，直到插入的线程完成过后，其余线程才会继续执行。"></a>2. 线程的强制执行会导致别的线程阻塞，直到插入的线程完成过后，其余线程才会继续执行。</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210423102208.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210423102257.png"></p>
<blockquote>
<p>直到插入的线程执行完毕，其余线程才能继续执行。</p>
</blockquote>
<h2 id="五、观测线程状态-Thread-State"><a href="#五、观测线程状态-Thread-State" class="headerlink" title="五、观测线程状态(Thread.State)"></a>五、观测线程状态(Thread.State)</h2><h3 id="使用：线程类对象-getState"><a href="#使用：线程类对象-getState" class="headerlink" title="使用：线程类对象.getState();"></a>使用：线程类对象.getState();</h3><h3 id="返回值类型：Thread-State"><a href="#返回值类型：Thread-State" class="headerlink" title="返回值类型：Thread.State"></a>返回值类型：Thread.State</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210423112056.png"></p>
]]></content>
      <categories>
        <category>Java的多线程</category>
      </categories>
  </entry>
  <entry>
    <title>线程的优先级和守护线程</title>
    <url>/2021/04/25/%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7%E5%92%8C%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="线程的优先级和守护线程"><a href="#线程的优先级和守护线程" class="headerlink" title="线程的优先级和守护线程"></a>线程的优先级和守护线程</h1><h2 id="一、设置线程优先级：线程类对象-setPriority-int-xxx"><a href="#一、设置线程优先级：线程类对象-setPriority-int-xxx" class="headerlink" title="一、设置线程优先级：线程类对象.setPriority(int xxx);"></a>一、设置线程优先级：线程类对象.setPriority(int xxx);</h2><h3 id="1-线程优先级范围：1-10。"><a href="#1-线程优先级范围：1-10。" class="headerlink" title="1. 线程优先级范围：1~10。"></a>1. 线程优先级范围：1~10。</h3><h3 id="2-先设置线程优先级后启动线程。"><a href="#2-先设置线程优先级后启动线程。" class="headerlink" title="2. 先设置线程优先级后启动线程。"></a>2. 先设置线程优先级后启动线程。</h3><h3 id="3-线程优先级高的说明被CPU调度的概率高-具体调度顺序还是靠CPU调度。"><a href="#3-线程优先级高的说明被CPU调度的概率高-具体调度顺序还是靠CPU调度。" class="headerlink" title="3. 线程优先级高的说明被CPU调度的概率高,具体调度顺序还是靠CPU调度。"></a>3. 线程优先级高的说明被CPU调度的概率高,具体调度顺序还是靠CPU调度。</h3><h3 id="4-获取线程优先级"><a href="#4-获取线程优先级" class="headerlink" title="4. 获取线程优先级:"></a>4. 获取线程优先级:<img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210425113142.png"></h3><a id="more"></a>
<h3 id="5-案例："><a href="#5-案例：" class="headerlink" title="5. 案例："></a>5. 案例：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.study.ThreadTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPriority</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Priority priority = <span class="keyword">new</span> Priority();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(priority);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(priority);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(priority);</span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(priority);</span><br><span class="line">        Thread t5 = <span class="keyword">new</span> Thread(priority);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());</span><br><span class="line">        t2.setPriority(<span class="number">4</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.setPriority(<span class="number">7</span>);</span><br><span class="line">        t3.start();</span><br><span class="line">        t4.setPriority(<span class="number">10</span>);</span><br><span class="line">        t4.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Priority</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二、守护-daemon-线程"><a href="#二、守护-daemon-线程" class="headerlink" title="二、守护(daemon)线程"></a>二、守护(daemon)线程</h1><h2 id="1-线程分为用户线程和守护线程。"><a href="#1-线程分为用户线程和守护线程。" class="headerlink" title="1. 线程分为用户线程和守护线程。"></a>1. 线程分为用户线程和守护线程。</h2><h2 id="2-虚拟机必须确保用户线程执行完毕。"><a href="#2-虚拟机必须确保用户线程执行完毕。" class="headerlink" title="2. 虚拟机必须确保用户线程执行完毕。"></a>2. 虚拟机必须确保用户线程执行完毕。</h2><h2 id="3-虚拟机不必等待守护线程执行完毕。"><a href="#3-虚拟机不必等待守护线程执行完毕。" class="headerlink" title="3. 虚拟机不必等待守护线程执行完毕。"></a>3. 虚拟机不必等待守护线程执行完毕。</h2><h2 id="4-创建守护线程：线程类对象-setDaemon-true-参数默认为false代表用户线程。"><a href="#4-创建守护线程：线程类对象-setDaemon-true-参数默认为false代表用户线程。" class="headerlink" title="4. 创建守护线程：线程类对象.setDaemon(true);参数默认为false代表用户线程。"></a>4. 创建守护线程：线程类对象.setDaemon(true);参数默认为false代表用户线程。</h2><h2 id="5-案例：-1"><a href="#5-案例：-1" class="headerlink" title="5. 案例："></a>5. 案例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.study.ThreadTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDaeom</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1=<span class="keyword">new</span> Thread(<span class="keyword">new</span> You());</span><br><span class="line">        Thread t2=<span class="keyword">new</span> Thread(<span class="keyword">new</span> God());</span><br><span class="line">        t2.setDaemon(<span class="keyword">true</span>); <span class="comment">//创建守护线程，参数为true。</span></span><br><span class="line">        t2.start();</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建You为用户线程</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">365</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你快乐的活着&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;goodbye&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建God为守护线程</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">God</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;上帝保佑你🙏&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java的多线程</category>
      </categories>
  </entry>
  <entry>
    <title>线程的创建之实现Runnable接口</title>
    <url>/2021/04/22/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B9%8B%E5%AE%9E%E7%8E%B0Runnable%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="线程的创建之实现Runnable接口"><a href="#线程的创建之实现Runnable接口" class="headerlink" title="线程的创建之实现Runnable接口"></a>线程的创建之实现Runnable接口</h1><h2 id="一、实现步骤"><a href="#一、实现步骤" class="headerlink" title="一、实现步骤:"></a>一、实现步骤:</h2><h3 id="1-创建实现类实现Runnable接口。"><a href="#1-创建实现类实现Runnable接口。" class="headerlink" title="1. 创建实现类实现Runnable接口。"></a>1. 创建实现类实现Runnable接口。</h3><h3 id="2-实现Runnable接口中的run-方法。"><a href="#2-实现Runnable接口中的run-方法。" class="headerlink" title="2. 实现Runnable接口中的run()方法。"></a>2. 实现Runnable接口中的run()方法。</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210422152108.png"></p>
<a id="more"></a>
<h3 id="3-创建实现类对象。"><a href="#3-创建实现类对象。" class="headerlink" title="3. 创建实现类对象。"></a>3. 创建实现类对象。</h3><h3 id="4-将-实现类对象-丢入Thread类对象中直接运行。new-Thread-t1-start"><a href="#4-将-实现类对象-丢入Thread类对象中直接运行。new-Thread-t1-start" class="headerlink" title="4. 将 实现类对象 丢入Thread类对象中直接运行。new Thread(t1).start;"></a>4. 将 <em>实现类对象</em> 丢入Thread类对象中直接运行。<em>new Thread(t1).start;</em></h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210422152122.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210422152200.png"></p>
<h2 id="二、线程延迟执行（模拟延迟）"><a href="#二、线程延迟执行（模拟延迟）" class="headerlink" title="二、线程延迟执行（模拟延迟）"></a>二、线程延迟执行（模拟延迟）</h2><h3 id="可以用Thread类中的sleep方法实现线程延迟执行单位-ms-，但是需要对其进行异常处理。"><a href="#可以用Thread类中的sleep方法实现线程延迟执行单位-ms-，但是需要对其进行异常处理。" class="headerlink" title="可以用Thread类中的sleep方法实现线程延迟执行单位 (ms)，但是需要对其进行异常处理。"></a>可以用Thread类中的sleep方法实现线程延迟执行单位 (ms)，但是需要对其进行异常处理。</h3><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210422152521.png"></p>
<h2 id="三、对比Thread继承创建线程的优势-避免单继承的局限性，方便同一个对象被多个线程同时使用。"><a href="#三、对比Thread继承创建线程的优势-避免单继承的局限性，方便同一个对象被多个线程同时使用。" class="headerlink" title="三、对比Thread继承创建线程的优势:避免单继承的局限性，方便同一个对象被多个线程同时使用。"></a>三、对比Thread继承创建线程的优势:避免单继承的局限性，方便同一个对象被多个线程同时使用。</h2><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210422154507.png"></p>
<blockquote>
<p>可以用 <strong>Thread.currentThread().getName()</strong> 获取线程的名字。上图实现了多个线程操作同一个对象。</p>
</blockquote>
<blockquote>
<p>注意:多线程调用同一个对象时会同时占用该对象的资源。<br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210422154909.png"></p>
</blockquote>
]]></content>
      <categories>
        <category>Java的多线程</category>
      </categories>
  </entry>
  <entry>
    <title>线程的创建之继承Thread类</title>
    <url>/2021/04/21/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B9%8B%E7%BB%A7%E6%89%BFThread%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="线程的创建之继承Thread类"><a href="#线程的创建之继承Thread类" class="headerlink" title="线程的创建之继承Thread类"></a>线程的创建之继承Thread类</h1><h2 id="一、线程的创建"><a href="#一、线程的创建" class="headerlink" title="一、线程的创建"></a>一、线程的创建</h2><ul>
<li><h3 id="用一个类继承Thread类，并重写Thread类中的run-方法即可实现线程的创建。"><a href="#用一个类继承Thread类，并重写Thread类中的run-方法即可实现线程的创建。" class="headerlink" title="用一个类继承Thread类，并重写Thread类中的run()方法即可实现线程的创建。"></a>用一个类继承Thread类，并重写Thread类中的run()方法即可实现线程的创建。</h3><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210421165555.png"><a id="more"></a>
<h2 id="二、线程的调用"><a href="#二、线程的调用" class="headerlink" title="二、线程的调用"></a>二、线程的调用</h2></li>
<li><h3 id="用创建好的线程类实例化一个对象，通过对象的-start-方法完成线程的调用。"><a href="#用创建好的线程类实例化一个对象，通过对象的-start-方法完成线程的调用。" class="headerlink" title="用创建好的线程类实例化一个对象，通过对象的 start() 方法完成线程的调用。"></a>用创建好的线程类实例化一个对象，通过对象的 <strong><em>start()</em></strong> 方法完成线程的调用。</h3><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210421165218.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210421165714.png"><h2 id="三、IDEA导包操作（粗略版）"><a href="#三、IDEA导包操作（粗略版）" class="headerlink" title="三、IDEA导包操作（粗略版）"></a>三、IDEA导包操作（粗略版）</h2><h3 id="1-下载好jar包"><a href="#1-下载好jar包" class="headerlink" title="1. 下载好jar包"></a>1. 下载好jar包</h3><h3 id="2-将其拷贝到项目目录下"><a href="#2-将其拷贝到项目目录下" class="headerlink" title="2. 将其拷贝到项目目录下"></a>2. 将其拷贝到项目目录下</h3><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210422145520.png"><h3 id="3-右击添加为Library"><a href="#3-右击添加为Library" class="headerlink" title="3. 右击添加为Library"></a>3. 右击添加为Library</h3><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210422145529.png"><br><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210422145647.png"><h2 id="四、编写一个多线程网络下载器"><a href="#四、编写一个多线程网络下载器" class="headerlink" title="四、编写一个多线程网络下载器"></a>四、编写一个多线程网络下载器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.study.ThreadTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新建一个Downloader类用于下载图片</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Downloader</span></span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(String url,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url),<span class="keyword">new</span> File(name));</span><br><span class="line">            <span class="comment">//用FileUtils类下载图片并保存为name</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;IO异常，download下载方法出现异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新建多线程实现类WebDownloader</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebDownloader</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器用于传入url和name</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebDownloader</span><span class="params">(String url, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写run方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//多线程同步下载</span></span><br><span class="line">        Downloader down = <span class="keyword">new</span> Downloader(); <span class="comment">//实例化Downloader类</span></span><br><span class="line">        <span class="comment">//调用下载方法</span></span><br><span class="line">        down.download(url,name);</span><br><span class="line">        System.out.println(name+<span class="string">&quot;下载完成！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//实现类创建多线程对象</span></span><br><span class="line">        WebDownloader t1 = <span class="keyword">new</span> WebDownloader(<span class="string">&quot;https://gitee.com/Haikez/images_bed/raw/master/Java基础/20210421165714.png&quot;</span>,<span class="string">&quot;1.jpg&quot;</span>);</span><br><span class="line">        WebDownloader t2 = <span class="keyword">new</span> WebDownloader(<span class="string">&quot;https://gitee.com/Haikez/images_bed/raw/master/Java基础/20210421165714.png&quot;</span>,<span class="string">&quot;2.jpg&quot;</span>);</span><br><span class="line">        WebDownloader t3 = <span class="keyword">new</span> WebDownloader(<span class="string">&quot;https://gitee.com/Haikez/images_bed/raw/master/Java基础/20210421165714.png&quot;</span>,<span class="string">&quot;3.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//start方法实现多线程的调用</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java的多线程</category>
      </categories>
  </entry>
  <entry>
    <title>线程的同步</title>
    <url>/2021/04/25/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h1><p>当多个线程访问<strong>同一个对象</strong>的时候 <strong>（并发）</strong>，并且某些线程还想<strong>修改</strong>这个对象，此时就需要<strong>线程同步</strong>。线程同步实质上是一种<strong>等待机制</strong>，多个需要访问此对象的线程进入这个<strong>对象的线程等待池</strong>，等前一个线程使用完毕，后一个线程才能开始访问。</p>
<h2 id="线程同步的解决措施：锁机制"><a href="#线程同步的解决措施：锁机制" class="headerlink" title="线程同步的解决措施：锁机制"></a>线程同步的解决措施：锁机制</h2><p>由于一个进程内的多个线程共享一块存储空间，为了保证数据的<strong>正确性</strong>，并发的同时加入<strong>锁机制synchronized</strong>，当一个线程获取到锁的时候，其他线程必须等待，使用和释放锁即可。</p>
<a id="more"></a>
<h2 id="线程的三个不安全实例："><a href="#线程的三个不安全实例：" class="headerlink" title="线程的三个不安全实例："></a>线程的三个不安全实例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不安全的买票机制</span></span><br><span class="line"><span class="keyword">package</span> demo.study.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBuyTickets</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Buytickets station = <span class="keyword">new</span> Buytickets();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">&quot;小明&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">&quot;小红&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">&quot;黄牛&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buytickets</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNum = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                buy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.ticketNum&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;买到了&quot;</span>+ticketNum--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不安全的银行取钱机制</span></span><br><span class="line"><span class="keyword">package</span> demo.study.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBuyTickets</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Buytickets station = <span class="keyword">new</span> Buytickets();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">&quot;小明&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">&quot;小红&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">&quot;黄牛&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buytickets</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNum = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                buy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.ticketNum&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;买到了&quot;</span>+ticketNum--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不安全的数组</span></span><br><span class="line"><span class="keyword">package</span> demo.study.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                list.add(Thread.currentThread().getName());</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java的多线程</category>
      </categories>
  </entry>
  <entry>
    <title>线程的死锁</title>
    <url>/2021/04/25/%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%AD%BB%E9%94%81/</url>
    <content><![CDATA[<h1 id="线程的死锁"><a href="#线程的死锁" class="headerlink" title="线程的死锁"></a>线程的死锁</h1><h2 id="产生死锁的必要条件"><a href="#产生死锁的必要条件" class="headerlink" title="产生死锁的必要条件"></a>产生死锁的必要条件</h2><h3 id="1-互斥条件：一个资源一次只能被一个进程使用。"><a href="#1-互斥条件：一个资源一次只能被一个进程使用。" class="headerlink" title="1. 互斥条件：一个资源一次只能被一个进程使用。"></a>1. 互斥条件：一个资源一次只能被一个进程使用。</h3><h3 id="2-请求与保持条件：一个进程因请求资源而阻塞的时候，对已获得的资源保持不放。"><a href="#2-请求与保持条件：一个进程因请求资源而阻塞的时候，对已获得的资源保持不放。" class="headerlink" title="2. 请求与保持条件：一个进程因请求资源而阻塞的时候，对已获得的资源保持不放。"></a>2. 请求与保持条件：一个进程因请求资源而阻塞的时候，对已获得的资源保持不放。</h3><h3 id="3-不剥夺条件：进程以及获得资源，在未使用完成前，不能强行剥夺。"><a href="#3-不剥夺条件：进程以及获得资源，在未使用完成前，不能强行剥夺。" class="headerlink" title="3. 不剥夺条件：进程以及获得资源，在未使用完成前，不能强行剥夺。"></a>3. 不剥夺条件：进程以及获得资源，在未使用完成前，不能强行剥夺。</h3><h3 id="4-循环等待条件：若干进程之间形成头尾相接的循环等待资源关系。"><a href="#4-循环等待条件：若干进程之间形成头尾相接的循环等待资源关系。" class="headerlink" title="4. 循环等待条件：若干进程之间形成头尾相接的循环等待资源关系。"></a>4. 循环等待条件：若干进程之间形成头尾相接的循环等待资源关系。</h3><a id="more"></a>
<h2 id="死锁的案例："><a href="#死锁的案例：" class="headerlink" title="死锁的案例："></a>死锁的案例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.study.ThreadTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        makeup g1=<span class="keyword">new</span> makeup(<span class="string">&quot;灰姑凉&quot;</span>,<span class="number">0</span>);</span><br><span class="line">        makeup g2=<span class="keyword">new</span> makeup(<span class="string">&quot;白雪公主&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        g1.start();</span><br><span class="line">        g2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lipstick</span> </span>&#123; <span class="comment">//创建口红类</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mirror</span></span>&#123; <span class="comment">//创键镜子类</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">makeup</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Lipstick lipstick = <span class="keyword">new</span> Lipstick();</span><br><span class="line">    <span class="keyword">static</span> Mirror mirror= <span class="keyword">new</span> Mirror();</span><br><span class="line">    <span class="keyword">int</span> choice;</span><br><span class="line">    makeup(String name,<span class="keyword">int</span> choice)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.choice=choice;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (choice==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;获得了口红的锁&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//制造一秒的延迟，导致镜子锁被其他线程占用。</span></span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//拥有口红锁的情况下，想获取镜子锁。</span></span><br><span class="line">                <span class="keyword">synchronized</span> (mirror) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;获得了镜子的锁&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;获得了镜子的锁&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//拥有镜子锁的情况下想获取口红锁。</span></span><br><span class="line">                <span class="keyword">synchronized</span> (lipstick) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;获得了口红的锁&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>由两个线程都抱着对方的锁不放，导致的死锁。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java的多线程</category>
      </categories>
  </entry>
  <entry>
    <title>过滤器与监听器</title>
    <url>/2021/05/11/%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B8%8E%E7%9B%91%E5%90%AC%E5%99%A8/</url>
    <content><![CDATA[<h1 id="过滤器与监听器"><a href="#过滤器与监听器" class="headerlink" title="过滤器与监听器"></a>过滤器与监听器</h1><h2 id="一、过滤器（Filter）"><a href="#一、过滤器（Filter）" class="headerlink" title="一、过滤器（Filter）"></a>一、过滤器（Filter）</h2><p>用于过滤网站的数据；</p>
<ul>
<li>处理中文代码</li>
<li>登录验证<br><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210511162438.png"><a id="more"></a>
<h3 id="1-创建过滤器"><a href="#1-创建过滤器" class="headerlink" title="1. 创建过滤器"></a>1. 创建过滤器</h3><h4 id="编写一个过滤器实现Filter接口（注意导包）"><a href="#编写一个过滤器实现Filter接口（注意导包）" class="headerlink" title="编写一个过滤器实现Filter接口（注意导包）"></a>编写一个过滤器<strong>实现Filter接口</strong>（注意导包）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统计网站在线人数：统计session</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//初始化服务器启动的时候就已经初始化了，随时等待过滤对象的出现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//将servlet请求设置编码</span></span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//将servlet响应设置编码</span></span><br><span class="line">        servletResponse.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//链接下一个过滤器（固定不变）</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);<span class="comment">//让我们的请求继续走，如果不写，程序到这里就被拦截停止！！</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//销毁：服务器关闭的时候自动销毁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>记住创建过滤器的时候，要链接到下一个过滤器。filterChain.doFilter(servletRequest,servletResponse);（固定不变的代码）</p>
</blockquote>
</li>
</ul>
<h3 id="2-在web-xml中配置过滤器（和servlet类似）"><a href="#2-在web-xml中配置过滤器（和servlet类似）" class="headerlink" title="2. 在web.xml中配置过滤器（和servlet类似）"></a>2. 在web.xml中配置过滤器（和servlet类似）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--创建映射，这点和servlet类似--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.nichu.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  指定过滤器的作用范围 例如：</span></span><br><span class="line"><span class="comment">  只要是/hello的任何请求都会经过这个过滤器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>过滤器本质上就是一个servelt程序</strong></p>
<h2 id="二、监听器（Listener）"><a href="#二、监听器（Listener）" class="headerlink" title="二、监听器（Listener）"></a>二、监听器（Listener）</h2><h3 id="1-监测网站在线人数（基于session）"><a href="#1-监测网站在线人数（基于session）" class="headerlink" title="1. 监测网站在线人数（基于session）"></a>1. 监测网站在线人数（基于session）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统计网站在线人数：统计session</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlineCountListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//创建session监听：看你的一举一动</span></span><br><span class="line">    <span class="comment">//一但创建一个session就会自动触发这个</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</span><br><span class="line">        ServletContext ctx = httpSessionEvent.getSession().getServletContext();</span><br><span class="line">        Integer onlineCount = (Integer) ctx.getAttribute(<span class="string">&quot;onlineCount&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(onlineCount==<span class="keyword">null</span>)&#123;</span><br><span class="line">            onlineCount=<span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> count=onlineCount.intValue();</span><br><span class="line">            onlineCount=<span class="keyword">new</span> Integer(count+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.setAttribute(<span class="string">&quot;onlineCount&quot;</span>,onlineCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//销毁session监听</span></span><br><span class="line">    <span class="comment">//一但创建一个session就会自动触发这个</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</span><br><span class="line">        ServletContext ctx = httpSessionEvent.getSession().getServletContext();</span><br><span class="line">        Integer onlineCount = (Integer) ctx.getAttribute(<span class="string">&quot;onlineCount&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(onlineCount==<span class="number">0</span>)&#123;</span><br><span class="line">            onlineCount=<span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> count=onlineCount.intValue();</span><br><span class="line">            onlineCount=<span class="keyword">new</span> Integer(count-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.setAttribute(<span class="string">&quot;onlineCount&quot;</span>,onlineCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-编写index-jsp页面"><a href="#2-编写index-jsp页面" class="headerlink" title="2. 编写index.jsp页面"></a>2. 编写index.jsp页面</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; charset=utf-8&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;当前有&lt;span&gt;&lt;%=this.getServletConfig().getServletContext().getAttribute(&quot;onlineCount&quot;)%&gt;&lt;/span&gt;人在线&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h3 id="3-在web-xml中注册监听器"><a href="#3-在web-xml中注册监听器" class="headerlink" title="3. 在web.xml中注册监听器"></a>3. 在web.xml中注册监听器</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册监听器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.nichu.listener.OnlineCountListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-session销毁方法"><a href="#4-session销毁方法" class="headerlink" title="4. session销毁方法"></a>4. session销毁方法</h3><ul>
<li>手动销毁 getSession().invalidate();</li>
<li>自动销毁 在web.xml中设置超时时间<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--以分钟为单位 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>1<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
  </entry>
  <entry>
    <title>进程、线程与多线程</title>
    <url>/2021/04/21/%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="进程、线程与多线程"><a href="#进程、线程与多线程" class="headerlink" title="进程、线程与多线程"></a>进程、线程与多线程</h1><h2 id="1-进程（Process）：程序的一次执行过程。"><a href="#1-进程（Process）：程序的一次执行过程。" class="headerlink" title="1. 进程（Process）：程序的一次执行过程。"></a>1. 进程（Process）：程序的一次执行过程。</h2><h2 id="2-线程（Thread）：是操作系统能够进行运算调度的最小单位，是独立调度和分派的基本单位。一条线程指的是进程中一个单一顺序的控制流。"><a href="#2-线程（Thread）：是操作系统能够进行运算调度的最小单位，是独立调度和分派的基本单位。一条线程指的是进程中一个单一顺序的控制流。" class="headerlink" title="2. 线程（Thread）：是操作系统能够进行运算调度的最小单位，是独立调度和分派的基本单位。一条线程指的是进程中一个单一顺序的控制流。"></a>2. 线程（Thread）：是操作系统能够进行运算调度的最小单位，是独立调度和分派的基本单位。一条线程指的是进程中一个单一顺序的控制流。</h2><h2 id="3-多线程：多个线程并发执行。"><a href="#3-多线程：多个线程并发执行。" class="headerlink" title="3. 多线程：多个线程并发执行。"></a>3. 多线程：多个线程并发执行。</h2><a id="more"></a>
<h2 id="4-进程和线程的关系："><a href="#4-进程和线程的关系：" class="headerlink" title="4. 进程和线程的关系："></a>4. 进程和线程的关系：</h2><ul>
<li>一个进程可以有很多线程，每条线程并行执行不同的任务。</li>
<li>同一进程中的多条线程将共享该进程中的全部系统资源，如虚拟地址空间，文件描述符和信号处理等等。</li>
</ul>
<h2 id="5-多线程的一些知识点"><a href="#5-多线程的一些知识点" class="headerlink" title="5.  多线程的一些知识点:"></a>5.  多线程的一些知识点:</h2><p><img src="https://gitee.com/Haikez/images_bed/raw/master/Java%E5%9F%BA%E7%A1%80/20210421163249.png"></p>
]]></content>
      <categories>
        <category>Java的多线程</category>
      </categories>
  </entry>
  <entry>
    <title>通过钓鱼网页获取GPS定位 --Seeker</title>
    <url>/2021/02/18/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<h2 id="通过钓鱼网页获取GPS定位-–Seeker"><a href="#通过钓鱼网页获取GPS定位-–Seeker" class="headerlink" title="通过钓鱼网页获取GPS定位 –Seeker"></a>通过钓鱼网页获取GPS定位 –Seeker</h2><h5 id="在互联网的世界里，最不缺少的就是信息，最容易获取的也是信息，在这个信息交互的时代里，你真能独善其身？没错，你的安全只是相对的，而漏洞的存在则是绝对的！！！"><a href="#在互联网的世界里，最不缺少的就是信息，最容易获取的也是信息，在这个信息交互的时代里，你真能独善其身？没错，你的安全只是相对的，而漏洞的存在则是绝对的！！！" class="headerlink" title="在互联网的世界里，最不缺少的就是信息，最容易获取的也是信息，在这个信息交互的时代里，你真能独善其身？没错，你的安全只是相对的，而漏洞的存在则是绝对的！！！"></a>在互联网的世界里，最不缺少的就是信息，最容易获取的也是信息，在这个信息交互的时代里，你真能独善其身？没错，你的安全只是相对的，而漏洞的存在则是绝对的！！！</h5><h3 id="Seeker-–-WEB嗅探器"><a href="#Seeker-–-WEB嗅探器" class="headerlink" title="Seeker – WEB嗅探器"></a>Seeker – WEB嗅探器</h3><p><img src="https://camo.githubusercontent.com/dd9d27c5b2f6fa423e80a12a71504ae87b299a7fad435352f96a9e96815fd0ea/68747470733a2f2f692e696d6775722e636f6d2f444970754e54492e6a7067"><br><strong>它可以帮你获取来访者的GPS位置信息</strong> </p>
<a id="more"></a>

<h3 id="本文章记录一个钓鱼网站的搭建和测试，旨在让大家明白当我们浏览网页时你个人信息的一些流向。从而提高大家网络安全意识，让坏人没有可乘之机。科学技术是把双刃剑，因此，在个人技术得到提高后请善待他人，永远不要突破道德的底线！！！-下面让我们进入正题。"><a href="#本文章记录一个钓鱼网站的搭建和测试，旨在让大家明白当我们浏览网页时你个人信息的一些流向。从而提高大家网络安全意识，让坏人没有可乘之机。科学技术是把双刃剑，因此，在个人技术得到提高后请善待他人，永远不要突破道德的底线！！！-下面让我们进入正题。" class="headerlink" title="本文章记录一个钓鱼网站的搭建和测试，旨在让大家明白当我们浏览网页时你个人信息的一些流向。从而提高大家网络安全意识，让坏人没有可乘之机。科学技术是把双刃剑，因此，在个人技术得到提高后请善待他人，永远不要突破道德的底线！！！ 下面让我们进入正题。"></a>本文章记录一个钓鱼网站的搭建和测试，旨在让大家明白当我们浏览网页时你个人信息的一些流向。从而提高大家网络安全意识，让坏人没有可乘之机。科学技术是把双刃剑，因此，在个人技术得到提高后请善待他人，永远不要突破道德的底线！！！ 下面让我们进入正题。</h3><h3 id="大体思路："><a href="#大体思路：" class="headerlink" title="大体思路："></a>大体思路：</h3><h4 id="通过Seeker在本机架设Web服务项目，然后用Ngrok开辟外网访问隧道（内网穿透），当外网访问时，Seeker即可探测到访问者的一些信息。"><a href="#通过Seeker在本机架设Web服务项目，然后用Ngrok开辟外网访问隧道（内网穿透），当外网访问时，Seeker即可探测到访问者的一些信息。" class="headerlink" title="通过Seeker在本机架设Web服务项目，然后用Ngrok开辟外网访问隧道（内网穿透），当外网访问时，Seeker即可探测到访问者的一些信息。"></a>通过Seeker在本机架设Web服务项目，然后用Ngrok开辟外网访问隧道（内网穿透），当外网访问时，Seeker即可探测到访问者的一些信息。</h4><h3 id="一、Seeker的安装"><a href="#一、Seeker的安装" class="headerlink" title="一、Seeker的安装"></a>一、Seeker的安装</h3><p><strong>项目地址:</strong><br><a href="https://github.com/thewhiteh4t/seeker.git">https://github.com/thewhiteh4t/seeker.git</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开命令行输入</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/thewhiteh4t/seeker.git</span><br><span class="line">$ <span class="built_in">cd</span> seeker/</span><br><span class="line">$ apt update</span><br><span class="line">$ apt install python3 python3-pip php</span><br><span class="line">$ pip3 install requests</span><br><span class="line">$ chmod +x install.sh</span><br></pre></td></tr></table></figure>
<h3 id="二、下载安装Ngrok"><a href="#二、下载安装Ngrok" class="headerlink" title="二、下载安装Ngrok"></a>二、下载安装Ngrok</h3><h4 id="1-注册Ngrok账号"><a href="#1-注册Ngrok账号" class="headerlink" title="1. 注册Ngrok账号"></a>1. 注册Ngrok账号</h4><p><strong>网站地址</strong><br><a href="https://ngrok.com/">https://ngrok.com/</a></p>
<h4 id="2-根据电脑型号下载对应的安装包"><a href="#2-根据电脑型号下载对应的安装包" class="headerlink" title="2. 根据电脑型号下载对应的安装包"></a>2. 根据电脑型号下载对应的安装包</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082037.png"><br><strong>解压下载好的安装包</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ unzip /path/to/ngrok.zip</span><br></pre></td></tr></table></figure>
<h4 id="3-配置Ngrok"><a href="#3-配置Ngrok" class="headerlink" title="3. 配置Ngrok"></a>3. 配置Ngrok</h4><p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082056.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打开终端输入</span></span><br><span class="line">./ngrok authtoken + 秘钥</span><br></pre></td></tr></table></figure>
<h3 id="三、开始搭建"><a href="#三、开始搭建" class="headerlink" title="三、开始搭建"></a>三、开始搭建</h3><h4 id="1-cd打开到Seeker项目下启动Seeker"><a href="#1-cd打开到Seeker项目下启动Seeker" class="headerlink" title="1. cd打开到Seeker项目下启动Seeker"></a>1. cd打开到Seeker项目下启动Seeker</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> seeker/</span><br><span class="line">$ python3 seeker.py -t manual <span class="comment">#启动项目</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082108.png"></p>
<h4 id="2-输入1选中Google-Drive"><a href="#2-输入1选中Google-Drive" class="headerlink" title="2. 输入1选中Google Drive"></a>2. 输入1选中Google Drive</h4><p><strong>回车后输入任意一个URL</strong><br><img src="https://gitee.com/Haikez/images_bed/raw/master/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082117.png"><br><strong>至此Seeker启动完成</strong><br><img src="https://gitee.com/Haikez/images_bed/raw/master/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082131.png"></p>
<h4 id="3-启动Ngrok"><a href="#3-启动Ngrok" class="headerlink" title="3. 启动Ngrok"></a>3. 启动Ngrok</h4><p><strong>cd打开到Ngrok项目下启动ngrok</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ngrok http 8080 <span class="comment">#端口号要与Seeker监听的端口号一致</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082143.png"><br>红色框框内随机生成的链接就是钓鱼链接，可将它发给目标用户访问。</p>
<h3 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h3><h4 id="1-打开钓鱼链接"><a href="#1-打开钓鱼链接" class="headerlink" title="1. 打开钓鱼链接"></a>1. 打开钓鱼链接</h4><p><strong>ngrok页面内的HTTP Requests会有响应</strong><br><img src="https://gitee.com/Haikez/images_bed/raw/master/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082152.png"><br><strong>此时客户端的页面如下</strong><br><img src="https://gitee.com/Haikez/images_bed/raw/master/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082203.PNG"><br><strong>当用户点击<code>Request access</code>时会弹出</strong><br><img src="https://gitee.com/Haikez/images_bed/raw/master/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082227.PNG"><br><strong>此时如果点击允许位置信息就会暴露</strong><br><strong>此时Seeker端的画面为</strong><br><img src="https://gitee.com/Haikez/images_bed/raw/master/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082217.png"><br>图中红框部分为目标经纬度</p>
<h3 id="五、最后贴上Seeker原项目说明，不懂的地方可以查。"><a href="#五、最后贴上Seeker原项目说明，不懂的地方可以查。" class="headerlink" title="五、最后贴上Seeker原项目说明，不懂的地方可以查。"></a>五、最后贴上Seeker原项目说明，不懂的地方可以查。</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">python3 seeker.py -h</span><br><span class="line"></span><br><span class="line">usage: seeker.py [-h] [-s SUBDOMAIN]</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -k KML, --kml         Provide KML Filename ( Optional )</span><br><span class="line">  -p PORT, --port       Port for Web Server [ Default : 8080 ]</span><br><span class="line">  -t TUNNEL, --tunnel   Specify Tunnel Mode [ Available : manual ]</span><br><span class="line"></span><br><span class="line"><span class="section">##################</span></span><br><span class="line"><span class="section"># Usage Examples #</span></span><br><span class="line"><span class="section">##################</span></span><br><span class="line"></span><br><span class="line"><span class="section"># Step 1 : In first terminal</span></span><br><span class="line">$ python3 seeker.py -t manual</span><br><span class="line"></span><br><span class="line"><span class="section"># Step 2 : In second terminal start a tunnel service such as ngrok</span></span><br><span class="line">$ ./ngrok http 8080</span><br><span class="line"></span><br><span class="line"><span class="section">###########</span></span><br><span class="line"><span class="section"># Options #</span></span><br><span class="line"><span class="section">###########</span></span><br><span class="line"></span><br><span class="line"><span class="section"># Ouput KML File for Google Earth</span></span><br><span class="line">$ python3 seeker.py -t manual -k <span class="xml"><span class="tag">&lt;<span class="name">filename</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section"># Use Custom Port</span></span><br><span class="line">$ python3 seeker.py -t manual -p 1337</span><br><span class="line">$ ./ngrok http 1337</span><br><span class="line"></span><br><span class="line"><span class="section">################</span></span><br><span class="line"><span class="section"># Docker Usage #</span></span><br><span class="line"><span class="section">################</span></span><br><span class="line"></span><br><span class="line"><span class="section"># Step 1</span></span><br><span class="line">$ docker network create ngroknet</span><br><span class="line"></span><br><span class="line"><span class="section"># Step 2</span></span><br><span class="line">$ docker run --rm -it --net ngroknet --name seeker thewhiteh4t/seeker python3 seeker.py -t manual</span><br><span class="line"></span><br><span class="line"><span class="section"># Step 3</span></span><br><span class="line">$ docker run --rm -it --net ngroknet --name ngrok wernight/ngrok ngrok http seeker:8080</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux学习</category>
      </categories>
      <tags>
        <tag>Seeker嗅探定位</tag>
      </tags>
  </entry>
  <entry>
    <title>链表</title>
    <url>/2020/12/15/%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="离散存储–链表"><a href="#离散存储–链表" class="headerlink" title="离散存储–链表"></a>离散存储–链表</h1><h3 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h3><ol>
<li>n 个结点离散分配</li>
<li> 彼此通过指针相连</li>
<li>   每个结点只有一个前驱结点，每个结点只有一个后继结点。</li>
<li>   首结点没有前驱结点，尾结点没有后继结点<h3 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语:"></a>专业术语:</h3></li>
<li>首结点<blockquote>
<p>第一个有效结点</p>
</blockquote>
</li>
<li>尾结点<blockquote>
<p>最后一个有效结点</p>
</blockquote>
</li>
<li>头结点<blockquote>
<p>第一个有效结点前的那个结点<br> 头结点不存放有效数据<br> 加头结点的目的主要是为了方便对链表的操作</p>
</blockquote>
</li>
<li>头指针<blockquote>
<p>指向头结点的指针变量</p>
</blockquote>
</li>
<li>尾指针<blockquote>
<p>指向尾结点的指针变量</p>
</blockquote>
<h4 id="如果希望通过一个函数来对链表进行处理，我们至少需要接收链表的哪些参数"><a href="#如果希望通过一个函数来对链表进行处理，我们至少需要接收链表的哪些参数" class="headerlink" title="如果希望通过一个函数来对链表进行处理，我们至少需要接收链表的哪些参数:"></a>如果希望通过一个函数来对链表进行处理，我们至少需要接收链表的哪些参数:</h4> 只需要一个参数：头指针<br> 因为我们通过头指针可以推算出链表的其他所有信息。<h4 id="构建一个结点"><a href="#构建一个结点" class="headerlink" title="构建一个结点:"></a>构建一个结点:</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data; <span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">pNext</span>;</span> <span class="comment">//指针域</span></span><br><span class="line">&#125;* PNODE,NODE; <span class="comment">//NODE等价于struct Node,  </span></span><br><span class="line"><span class="comment">//PNODE等价于struct Node *</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类:"></a>分类:</h3></li>
<li>单链表</li>
<li>双链表:<blockquote>
<p>每个结点有两个指针域</p>
</blockquote>
</li>
<li>循环链表:<blockquote>
<p> 能通过任何一个结点找到其他所有结点</p>
</blockquote>
</li>
<li>非循环链表  <h3 id="单链表算法"><a href="#单链表算法" class="headerlink" title="单链表算法:"></a>单链表算法:</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">定义链表结点:</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType <span class="comment">//不一定是int型,ElemType是需求类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;       <span class="comment">//存放元素值</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNose</span> * <span class="title">next</span>;</span> <span class="comment">//指向后继结点</span></span><br><span class="line">&#125;LinkNode;               <span class="comment">//单链表结点类型</span></span><br></pre></td></tr></table></figure>
<details> <summary>初始化 InitList(&L)</summary>
<pre><code>
void InitList(LinkNode *&L)
&#123;
 L = (LinkNode *)malloc(sizeof(LinkNode));
 L->next s= NULL;
&#125;
</code></pre>
</details>
<details> <summary>销毁 DestroyList(&L)</summary>
<pre><code>
void DestoryList(LinkNode *&L)
&#123;
 LinkNode * pre = L,*p = L->next;
 while(p != NULL)
 &#123;
     free(pre);
     pre = p;
     p = pre->next;
 &#125;
 free(pre);
&#125;
</code></pre>
</details>
<details> <summary>判空 ListEmpty(L)</summary>
<pre><code>
bool ListEmpty(LinkNode * L)
&#123;
 return(L->next = NULL);
&#125;
</code></pre>
</details>
<details> <summary>求长度 ListLength(L)</summary>
<pre><code>
int ListLength(LinkNode * L)
&#123;
 LinkNode * p = L;
 int n=0;
 while(p->next != NULL)
 &#123;
     n++;
     p = p->next;
 &#125;
 return(n);
&#125;

</code></pre></details></li>
</ol>
<p></p>

<details> <summary>输出 DispList(L)</summary>
<pre><code>
void DispList(LinkNode * L)
&#123;
    LinkNode *p = L->next;
    while(p != NULL)
    &#123;
        printf("%d\n",p->data);
        p = p->next;
    &#125;
    printf("\n");
&#125;
</code></pre>
</details>
<details> <summary>按位求值 GetElem(L,i,&e)</summary>
<pre><code>
bool GetElem(LinkNode *L,int i, ElemType &e)
&#123;
    int j = 0;
    LinkNode *p = L;
    if (i <= 0) return false; while(j < i && p !="NULL)" &#123; j++;>next;
    &#125;
    if(p == NULL)
        return false;
    else
    &#123;   
        e = p->data;
        return true;
    &#125;
&#125;
</=></code></pre>
</details>
<details> <summary>按值查找 LocateElem(L,e)</summary>
<pre><code>
int LocateElem(LinkNode *L,ElemType e)
&#123;
    int i = 1;
    LinkNode *p = L-> next;
    while(p != NULL && p->data != e)
    &#123;
        p = p-> next;
        i++;
    &#125;
    if(p == NULL)
        return 0;
    else
        return (i);
&#125;
</code></pre>
</details>
<details> <summary>插入数据 ListInsert(&L,i,e)</summary>
<pre><code>
bool ListInsert(LinkNode *&L,int i,ElemType e)
&#123;
    int j = 0;
    LinkNode *p = L,*s;
    if(i <= 0) return false; while(j < i-1 && p !="NULL)" &#123; j++;>next;
    &#125;
    if(p == NULL)
        return false;
    else
    &#123;
        s = (LinkNode *)malloc(sizeof(LinkNode));
        s->data =e ;
        s->next = p->next;
        p->next = s;
        return true;
    &#125;
&#125;
</=></code></pre>
</details>
<details> <summary>删除数据 ListDelete(&L,i,&e)</summary>
<pre><code>
bool ListDelete(LinkNode *&L,int i,ElemType &e)
&#123;
    int j = 0;
    LinkNode *p = L,*q;
    if (i <= 0) return false; while (j < i-1 && p !="NULL" ) &#123; j++;>next;
    &#125;
    if (p == NULL)
        return false;
    else
    &#123;
        q = p->next;
        if(q == NULL)
            return false;
        e = q->data;
        p->next = q->next;
        free(q);
        return true;
    &#125;
&#125;
</=></code></pre>
</details>
]]></content>
      <categories>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>SMBMS项目学习</title>
    <url>/2021/05/14/SMBMS%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="SMBMS项目学习"><a href="#SMBMS项目学习" class="headerlink" title="SMBMS项目学习"></a>SMBMS项目学习</h1><h2 id="基本架构"><a href="#基本架构" class="headerlink" title="基本架构"></a>基本架构</h2><p><img src="https://img-blog.csdnimg.cn/20190925140503738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NsaXNrcw==,size_16,color_FFFFFF,t_70"></p>
<h2 id="在数据库中创建对应的表"><a href="#在数据库中创建对应的表" class="headerlink" title="在数据库中创建对应的表"></a>在数据库中创建对应的表</h2><a id="more"></a>
<h2 id="一、-搭建项目环境（准备工作）"><a href="#一、-搭建项目环境（准备工作）" class="headerlink" title="一、 搭建项目环境（准备工作）"></a>一、 搭建项目环境（准备工作）</h2><h3 id="1-搭建一个maven-web项目"><a href="#1-搭建一个maven-web项目" class="headerlink" title="1. 搭建一个maven web项目"></a>1. 搭建一个maven web项目</h3><h3 id="2-配置Tomcat"><a href="#2-配置Tomcat" class="headerlink" title="2. 配置Tomcat"></a>2. 配置Tomcat</h3><h3 id="3-测试项目是否能正常运行"><a href="#3-测试项目是否能正常运行" class="headerlink" title="3. 测试项目是否能正常运行"></a>3. 测试项目是否能正常运行</h3><h3 id="4-导入项目jar包"><a href="#4-导入项目jar包" class="headerlink" title="4. 导入项目jar包"></a>4. 导入项目jar包</h3><p>   jsp,Servlet,mysql驱动，jstl，standard…</p>
<h3 id="5-创建项目包结构"><a href="#5-创建项目包结构" class="headerlink" title="5. 创建项目包结构"></a>5. 创建项目包结构</h3><p>   <img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210514105149.png"></p>
<h3 id="6-编写实体类pojo"><a href="#6-编写实体类pojo" class="headerlink" title="6. 编写实体类pojo"></a>6. 编写实体类pojo</h3><h3 id="7-编写基础公共类"><a href="#7-编写基础公共类" class="headerlink" title="7. 编写基础公共类"></a>7. 编写基础公共类</h3><pre><code>1. 数据库配置文件db.properties
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">dirver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">nc20011019</span></span><br></pre></td></tr></table></figure>
2. 编写数据库公共类 </code></pre>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//操作数据库的公共类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String username;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">   <span class="comment">//静态代码块，类加载的时候就初始化了</span></span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">      Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">      <span class="comment">//通过类加载器读取对应的资源</span></span><br><span class="line">      InputStream is = BaseDao.class.getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(is);</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">      url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">      username = properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">      password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//获取数据库连接对象</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">      Connection connection=<span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> connection;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//编写数据库查询公共类</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultSet <span class="title">execute</span><span class="params">(String sql,Connection connection,Object[] params,ResultSet resultSet ,PreparedStatement preparedStatement)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">      preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;params.length;i++)&#123;</span><br><span class="line">            preparedStatement.setObject(i+<span class="number">1</span>,params[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      resultSet = preparedStatement.executeQuery();</span><br><span class="line">      <span class="keyword">return</span> resultSet;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//编写数据库增删改公共类</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">execute</span><span class="params">(String sql,Connection connection,Object[] params,PreparedStatement preparedStatement )</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">      preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;params.length;i++)&#123;</span><br><span class="line">            preparedStatement.setObject(i+<span class="number">1</span>,params[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">int</span> updateRows = preparedStatement.executeUpdate();</span><br><span class="line">      <span class="keyword">return</span> updateRows;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//释放资源</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">closeResource</span><span class="params">(Connection connection,PreparedStatement preparedStatement,ResultSet resultSet)</span></span>&#123;</span><br><span class="line">      <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">if</span> (resultSet!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               resultSet.close();</span><br><span class="line">               <span class="comment">//gc回收</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">               throwables.printStackTrace();</span><br><span class="line">               flag=<span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (preparedStatement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               preparedStatement.close();</span><br><span class="line">               <span class="comment">//gc回收</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">               throwables.printStackTrace();</span><br><span class="line">               flag=<span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               connection.close();</span><br><span class="line">               <span class="comment">//gc回收</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">               throwables.printStackTrace();</span><br><span class="line">               flag=<span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> flag;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>编写字符编码过滤器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">      </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">      servletRequest.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">      servletResponse.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">      filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-导入静态资源"><a href="#8-导入静态资源" class="headerlink" title="8. 导入静态资源"></a>8. 导入静态资源</h3><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210515092051.png"><h2 id="二、登录页功能实现"><a href="#二、登录页功能实现" class="headerlink" title="二、登录页功能实现"></a>二、登录页功能实现</h2><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/27/kuangstudya6d03a8e-56f9-47d7-88db-e65e3ad92f20.png"><h3 id="1、登录功能实现"><a href="#1、登录功能实现" class="headerlink" title="1、登录功能实现"></a>1、登录功能实现</h3></li>
<li>编写前端页面</li>
<li>设置欢迎页面<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--设置欢迎页面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写Dao层得到用户登录接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"> <span class="comment">//得到登录的用户</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> User <span class="title">getLoginUser</span><span class="params">(Connection connection, String userCode)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写dao接口的实现类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> User <span class="title">getLoginUser</span><span class="params">(Connection connection, String userCode)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">      ResultSet resultSet =<span class="keyword">null</span>;</span><br><span class="line">      PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">      User user = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            String sql=<span class="string">&quot;select * from smbms_user where userCode=?&quot;</span>;</span><br><span class="line">            Object[] params = &#123;userCode&#125;;</span><br><span class="line">            resultSet = BaseDao.execute(sql,connection,params,resultSet,preparedStatement);</span><br><span class="line">            <span class="keyword">if</span> (resultSet.next())&#123;</span><br><span class="line">               user = <span class="keyword">new</span> User();</span><br><span class="line">               user.setId(resultSet.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">               user.setUserCode(resultSet.getString(<span class="string">&quot;userCode&quot;</span>));</span><br><span class="line">               user.setUserName(resultSet.getString(<span class="string">&quot;userName&quot;</span>));</span><br><span class="line">               user.setUserPassword(resultSet.getString(<span class="string">&quot;userPassword&quot;</span>));</span><br><span class="line">               user.setGender(resultSet.getInt(<span class="string">&quot;gender&quot;</span>));</span><br><span class="line">               user.setBirthday(resultSet.getDate(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">               user.setPhone(resultSet.getString(<span class="string">&quot;phone&quot;</span>));</span><br><span class="line">               user.setAddress(resultSet.getString(<span class="string">&quot;address&quot;</span>));</span><br><span class="line">               user.setUserRole(resultSet.getInt(<span class="string">&quot;userRole&quot;</span>));</span><br><span class="line">               user.setCreatedBy(resultSet.getInt(<span class="string">&quot;createdBy&quot;</span>));</span><br><span class="line">               user.setCreationDate(resultSet.getTimestamp(<span class="string">&quot;creationDate&quot;</span>));</span><br><span class="line">               user.setModifyBy(resultSet.getInt(<span class="string">&quot;modifyBy&quot;</span>));</span><br><span class="line">               user.setModifyDate(resultSet.getTimestamp(<span class="string">&quot;modifyDate&quot;</span>));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            BaseDao.closeResource(<span class="keyword">null</span>,preparedStatement,resultSet);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> user;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>业务层接口<blockquote>
<p>在service下建立user包，建立UserService接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用户登录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String userCode, String password)</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line">   ```   </span><br><span class="line"><span class="number">6.</span> 业务层接口实现类</span><br><span class="line">   ``` java</span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="comment">//业务层都会调用Dao层，所以要引用Dao层</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String userCode, String password)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        User user = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = BaseDao.getConnection();</span><br><span class="line">            <span class="comment">//通过业务层调用对应的具体的数据库</span></span><br><span class="line">            user = userDao.getLoginUser(connection,userCode);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            BaseDao.closeResource(connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li>编写Servlet类<blockquote>
<p>在Servlet包中创建user包，在user包中建立LoginServlet类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"> <span class="comment">//Servlet:控制层，调用业务层代码</span></span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">     System.out.println(<span class="string">&quot;LoginServlet--start....&quot;</span>);</span><br><span class="line">     <span class="comment">//获取用户名和密码</span></span><br><span class="line">     String userCode = req.getParameter(<span class="string">&quot;userCode&quot;</span>);</span><br><span class="line">     String userPassword = req.getParameter(<span class="string">&quot;userPassword&quot;</span>);</span><br><span class="line">     <span class="comment">//和数据库中的密码进行对比，调用业务层；</span></span><br><span class="line">     UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">     User user = userService.login(userCode, userPassword);  <span class="comment">//这里已经把登录的人给查出来了</span></span><br><span class="line">     System.out.println(userCode);</span><br><span class="line">     System.out.println(userPassword);</span><br><span class="line">     <span class="keyword">if</span> (user!=<span class="keyword">null</span>)&#123; <span class="comment">//查有此人，可以登录</span></span><br><span class="line">         <span class="comment">//将用户的信息放到Session中;</span></span><br><span class="line">         req.getSession().setAttribute(Constants.USER_SESSION,user);</span><br><span class="line">         <span class="comment">//跳转到主页</span></span><br><span class="line">         resp.sendRedirect(<span class="string">&quot;jsp/frame.jsp&quot;</span>);</span><br><span class="line">     &#125;<span class="keyword">else</span> &#123;<span class="comment">//查无此人，无法登录</span></span><br><span class="line">         <span class="comment">//转发回登录页面，顺带提示它，用户名或者密码错误；</span></span><br><span class="line">         req.setAttribute(<span class="string">&quot;error&quot;</span>,<span class="string">&quot;用户名或者密码不正确&quot;</span>);</span><br><span class="line">         req.getRequestDispatcher(<span class="string">&quot;login.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     doGet(req, resp);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在web.xml中注册<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.user.LoginServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2、注销功能实现"><a href="#2、注销功能实现" class="headerlink" title="2、注销功能实现"></a>2、注销功能实现</h3><ol>
<li>在Servlet包的user包中建立LogoutServlett类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogoutServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     <span class="comment">//移除用户的Constants.USER_SESSION</span></span><br><span class="line">     req.getSession().removeAttribute(Constants.USER_SESSION);</span><br><span class="line">     resp.sendRedirect(<span class="string">&quot;/login.jsp&quot;</span>);<span class="comment">//返回登录页面</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     doGet(req, resp);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在web.xml中注册<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LogoutServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.user.LogoutServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LogoutServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/jsp/logout.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>设置自动注销<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置30分后session自动失效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3、-登录拦截功能实现"><a href="#3、-登录拦截功能实现" class="headerlink" title="3、 登录拦截功能实现"></a>3、 登录拦截功能实现</h3></li>
</ol>
</li>
<li>在filter中建立SysFilter类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">     HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">     HttpServletResponse response = (HttpServletResponse) resp;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//过滤器，从Session中获取用户，</span></span><br><span class="line">     User user = (User) request.getSession().getAttribute(Constants.USER_SESSION);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (user==<span class="keyword">null</span>)&#123; <span class="comment">//已经被移除或者注销了，或者未登录</span></span><br><span class="line">         response.sendRedirect(<span class="string">&quot;/error.jsp&quot;</span>);</span><br><span class="line">     &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         chain.doFilter(req,resp);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在web.xml中注册<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--用户登录过滤器--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SysFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.kuang.filter.SysFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SysFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/jsp/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="二、密码修改的实现"><a href="#二、密码修改的实现" class="headerlink" title="二、密码修改的实现"></a>二、密码修改的实现</h3></li>
<li>导入前端素材</li>
<li>编写dao层用户修改密码的接口UserDao<blockquote>
<p>UserDao接口写如下代码 </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改当前用户密码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updatePwd</span><span class="params">(Connection connection, <span class="keyword">int</span> id, String password)</span> <span class="keyword">throws</span> SQLException</span>;</span><br></pre></td></tr></table></figure></li>
<li>编写UserDao 接口实现类UserDaoImpl<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updatePwd</span><span class="params">(Connection connection, <span class="keyword">int</span> id, String password)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> execute = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        String sql = <span class="string">&quot;update smbms_user set userPassword = ? where id = ?&quot;</span>;</span><br><span class="line">        Object params[] = &#123;password,id&#125;;</span><br><span class="line">        execute = BaseDao.execute(connection, sql, params, pstm);</span><br><span class="line">        BaseDao.closeResource(<span class="keyword">null</span>,pstm,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> execute;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>编写业务层接口<blockquote>
<p>在service的user包中的UserService接口中添加如下代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据用户ID修改密码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updatePwd</span><span class="params">(<span class="keyword">int</span> id, String pwd)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>编写业务层接口实现类<blockquote>
<p>在service的user包中的UserServiceImpl类中添加以下代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updatePwd</span><span class="params">(<span class="keyword">int</span> id, String pwd)</span> </span>&#123;</span><br><span class="line">     Connection connection = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">     <span class="comment">//修改密码</span></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         connection = BaseDao.getConnection();</span><br><span class="line">         <span class="keyword">if</span> (userDao.updatePwd(connection,id,pwd)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">             flag = <span class="keyword">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">         BaseDao.closeResource(connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> flag;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
<li>编写Servlet类<blockquote>
<p>在Servlet包中的user包中建立UserServlet类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     String method = req.getParameter(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">     <span class="keyword">if</span> (method.equals(<span class="string">&quot;savepwd&quot;</span>)&amp;&amp;method!=<span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">this</span>.updatePwd(req,resp);</span><br><span class="line">     &#125;<span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">&quot;pwdmodify&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">this</span>.pwdModify(req, resp);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     doGet(req, resp);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//修改密码</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePwd</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">     <span class="comment">//从Session里面拿ID;</span></span><br><span class="line">     Object o = req.getSession().getAttribute(Constants.USER_SESSION);</span><br><span class="line"></span><br><span class="line">     String newpassword = req.getParameter(<span class="string">&quot;newpassword&quot;</span>);</span><br><span class="line"></span><br><span class="line">     System.out.println(<span class="string">&quot;UserServlet:&quot;</span>+newpassword);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">     System.out.println(o!=<span class="keyword">null</span>);</span><br><span class="line">     System.out.println(StringUtils.isNullOrEmpty(newpassword));</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (o!=<span class="keyword">null</span> &amp;&amp; newpassword!=<span class="keyword">null</span>)&#123;</span><br><span class="line">         UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">         flag = userService.updatePwd(((User) o).getId(), newpassword);</span><br><span class="line">         <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">             req.setAttribute(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;修改密码成功，请退出，使用新密码登录&quot;</span>);</span><br><span class="line">             <span class="comment">//密码修改成功，移除当前Session</span></span><br><span class="line">             req.getSession().removeAttribute(Constants.USER_SESSION);</span><br><span class="line">         &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">             req.setAttribute(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;密码修改失败&quot;</span>);</span><br><span class="line">             <span class="comment">//密码修改成功，移除当前Session</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         req.setAttribute(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;新密码有问题&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         req.getRequestDispatcher(<span class="string">&quot;pwdmodify.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (ServletException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//验证旧密码,session中有用户的密码</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pwdModify</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">     <span class="comment">//从Session里面拿ID;</span></span><br><span class="line"></span><br><span class="line">     Object o = req.getSession().getAttribute(Constants.USER_SESSION);</span><br><span class="line">     String oldpassword = req.getParameter(<span class="string">&quot;oldpassword&quot;</span>);</span><br><span class="line">     System.out.println(oldpassword);</span><br><span class="line">     <span class="comment">//万能的Map : 结果集</span></span><br><span class="line">     Map&lt;String, String&gt; resultMap = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (o==<span class="keyword">null</span>)&#123; <span class="comment">//Session失效了，session过期了</span></span><br><span class="line">         resultMap.put(<span class="string">&quot;result&quot;</span>,<span class="string">&quot;sessionerror&quot;</span>);</span><br><span class="line">     &#125;<span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.isNullOrEmpty(oldpassword))&#123; <span class="comment">//输入的密码为空</span></span><br><span class="line">         resultMap.put(<span class="string">&quot;result&quot;</span>,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">     &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         String userPassword = ((User) o).getUserPassword(); <span class="comment">//Session中用户的密码</span></span><br><span class="line">         <span class="keyword">if</span> (oldpassword.equals(userPassword))&#123;</span><br><span class="line">             resultMap.put(<span class="string">&quot;result&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">         &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">             resultMap.put(<span class="string">&quot;result&quot;</span>,<span class="string">&quot;false&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         resp.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">         PrintWriter writer = resp.getWriter();</span><br><span class="line">         <span class="comment">//JSONArray 阿里巴巴的JSON工具类, 转换格式</span></span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">         resultMap = [&quot;result&quot;,&quot;sessionerror&quot;,&quot;result&quot;,&quot;error&quot;]</span></span><br><span class="line"><span class="comment">         Json格式 = &#123;key：value&#125;</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">         writer.write(JSONArray.toJSONString(resultMap));</span><br><span class="line">         writer.flush();</span><br><span class="line">         writer.close();</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>  <strong>在web.xml中注册</strong><br>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>updatePwd<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.user.UserServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>updatePwd<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/jsp/user.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="三、用户管理实现"><a href="#三、用户管理实现" class="headerlink" title="三、用户管理实现"></a>三、用户管理实现</h2><h3 id="1-导入分页的工具类"><a href="#1-导入分页的工具类" class="headerlink" title="1. 导入分页的工具类"></a>1. 导入分页的工具类</h3><p>PageSupport<br>userlist.jsp</p>
<h3 id="2-获取用户数量"><a href="#2-获取用户数量" class="headerlink" title="2. 获取用户数量"></a>2. 获取用户数量</h3><blockquote>
<p>select count(1) as count from smbms_user u,smbms_role r where u.userRole=r.id; 联表查询用户数量</p>
</blockquote>
<ol>
<li>UserDao<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询用户总数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserCount</span><span class="params">(Connection connection,String username ,<span class="keyword">int</span> userRole)</span><span class="keyword">throws</span> SQLException</span>;</span><br></pre></td></tr></table></figure></li>
<li>UserDaoImpl<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserCount</span><span class="params">(Connection connection, String username, <span class="keyword">int</span> userRole)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">     <span class="comment">//根据用户名或者角色查询用户总数</span></span><br><span class="line"></span><br><span class="line">     PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">     ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">         StringBuffer sql = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">         sql.append(<span class="string">&quot;select count(1) as count from smbms_user u,smbms_role r where u.userRole = r.id&quot;</span>);</span><br><span class="line">         ArrayList&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;Object&gt;();<span class="comment">//存放我们的参数</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (!StringUtils.isNullOrEmpty(username))&#123;</span><br><span class="line">             sql.append(<span class="string">&quot; and u.userName like ?&quot;</span>);</span><br><span class="line">             list.add(<span class="string">&quot;%&quot;</span>+username+<span class="string">&quot;%&quot;</span>); <span class="comment">//index:0</span></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (userRole&gt;<span class="number">0</span>)&#123;</span><br><span class="line">             sql.append(<span class="string">&quot; and u.userRole = ?&quot;</span>);</span><br><span class="line">             list.add(userRole); <span class="comment">//index:1</span></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//怎么把List转换为数组</span></span><br><span class="line">         Object[] params = list.toArray();</span><br><span class="line"></span><br><span class="line">         System.out.println(<span class="string">&quot;UserDaoImpl-&gt;getUserCount:&quot;</span>+sql.toString()); <span class="comment">//输出最后完整的SQL语句</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         rs = BaseDao.execute(connection, pstm, rs, sql.toString(), params);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (rs.next())&#123;</span><br><span class="line">             count = rs.getInt(<span class="string">&quot;count&quot;</span>); <span class="comment">//从结果集中获取最终的数量</span></span><br><span class="line">         &#125;</span><br><span class="line">         BaseDao.closeResource(<span class="keyword">null</span>,pstm,rs);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> count;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
<li>UserService<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询用户总数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserCount</span><span class="params">(Connection connection,String username ,<span class="keyword">int</span> userRole)</span><span class="keyword">throws</span> SQLException</span>;</span><br></pre></td></tr></table></figure></li>
<li>UserServiceImpl<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserCount</span><span class="params">(String username, <span class="keyword">int</span> userRole)</span> </span>&#123;</span><br><span class="line">         Connection connection = <span class="keyword">null</span>;</span><br><span class="line">         <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             connection = BaseDao.getConnection();</span><br><span class="line">             count = userDao.getUserCount(connection, username, userRole);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">             BaseDao.closeResource(connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> count;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-获取用户列表"><a href="#2-获取用户列表" class="headerlink" title="2.获取用户列表"></a>2.获取用户列表</h3></li>
<li>UserDao<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过条件查询-userList</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">(Connection connection, String userName, <span class="keyword">int</span> userRole, <span class="keyword">int</span> currentPageNo, <span class="keyword">int</span> pageSize)</span><span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure></li>
<li>UserDaoImpl<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">(Connection connection, String userName,<span class="keyword">int</span> userRole,<span class="keyword">int</span> currentPageNo, <span class="keyword">int</span> pageSize)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">    <span class="keyword">if</span>(connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">        StringBuffer sql = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        sql.append(<span class="string">&quot;select u.*,r.roleName as userRoleName from smbms_user u,smbms_role r where u.userRole = r.id&quot;</span>);</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isNullOrEmpty(userName))&#123;</span><br><span class="line">            sql.append(<span class="string">&quot; and u.userName like ?&quot;</span>);</span><br><span class="line">            list.add(<span class="string">&quot;%&quot;</span>+userName+<span class="string">&quot;%&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(userRole &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            sql.append(<span class="string">&quot; and u.userRole = ?&quot;</span>);</span><br><span class="line">            list.add(userRole);</span><br><span class="line">        &#125;</span><br><span class="line">        sql.append(<span class="string">&quot; order by creationDate DESC limit ?,?&quot;</span>);</span><br><span class="line">        currentPageNo = (currentPageNo-<span class="number">1</span>)*pageSize;</span><br><span class="line">        list.add(currentPageNo);</span><br><span class="line">        list.add(pageSize);</span><br><span class="line"></span><br><span class="line">        Object[] params = list.toArray();</span><br><span class="line">        System.out.println(<span class="string">&quot;sql ----&gt; &quot;</span> + sql.toString());</span><br><span class="line">        rs = BaseDao.execute(connection, pstm, rs, sql.toString(), params);</span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            User _user = <span class="keyword">new</span> User();</span><br><span class="line">            _user.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            _user.setUserCode(rs.getString(<span class="string">&quot;userCode&quot;</span>));</span><br><span class="line">            _user.setUserName(rs.getString(<span class="string">&quot;userName&quot;</span>));</span><br><span class="line">            _user.setGender(rs.getInt(<span class="string">&quot;gender&quot;</span>));</span><br><span class="line">            _user.setBirthday(rs.getDate(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">            _user.setPhone(rs.getString(<span class="string">&quot;phone&quot;</span>));</span><br><span class="line">            _user.setUserRole(rs.getInt(<span class="string">&quot;userRole&quot;</span>));</span><br><span class="line">            _user.setUserRoleName(rs.getString(<span class="string">&quot;userRoleName&quot;</span>));</span><br><span class="line">            userList.add(_user);</span><br><span class="line">        &#125;</span><br><span class="line">        BaseDao.closeResource(<span class="keyword">null</span>, pstm, rs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> userList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>UserService<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询记录数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserCount</span><span class="params">(String username,<span class="keyword">int</span> userRole)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li>UserServiceImpl<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">(String queryUserName, <span class="keyword">int</span> queryUserRole, <span class="keyword">int</span> currentPageNo, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;User&gt; userList = <span class="keyword">null</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;queryUserName ---- &gt; &quot;</span> + queryUserName);</span><br><span class="line">    System.out.println(<span class="string">&quot;queryUserRole ---- &gt; &quot;</span> + queryUserRole);</span><br><span class="line">    System.out.println(<span class="string">&quot;currentPageNo ---- &gt; &quot;</span> + currentPageNo);</span><br><span class="line">    System.out.println(<span class="string">&quot;pageSize ---- &gt; &quot;</span> + pageSize);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = BaseDao.getConnection();</span><br><span class="line">        userList = userDao.getUserList(connection, queryUserName,queryUserRole,currentPageNo,pageSize);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        BaseDao.closeResource(connection, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> userList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-获取角色操作"><a href="#3-获取角色操作" class="headerlink" title="3.获取角色操作"></a>3.获取角色操作</h3></li>
<li>UserDao<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取角色列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoleList</span><span class="params">(Connection connection)</span><span class="keyword">throws</span> SQLException</span>;</span><br></pre></td></tr></table></figure></li>
<li>UserDaoImpl<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleDaoImpl</span> <span class="keyword">implements</span> <span class="title">RoleDao</span> </span>&#123;</span><br><span class="line"> <span class="comment">//获取角色列表</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoleList</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">     PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">     ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">     ArrayList&lt;Role&gt; roleList = <span class="keyword">new</span> ArrayList&lt;Role&gt;();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">         String sql = <span class="string">&quot;select * from smbms_role&quot;</span>;</span><br><span class="line">         Object[] params = &#123;&#125;;</span><br><span class="line">         resultSet = BaseDao.execute(connection, pstm, resultSet, sql, params);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">             Role _role = <span class="keyword">new</span> Role();</span><br><span class="line">             _role.setId(resultSet.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">             _role.setRoleCode(resultSet.getString(<span class="string">&quot;roleCode&quot;</span>));</span><br><span class="line">             _role.setRoleName(resultSet.getString(<span class="string">&quot;roleName&quot;</span>));</span><br><span class="line">             roleList.add(_role);</span><br><span class="line">         &#125;</span><br><span class="line">         BaseDao.closeResource(<span class="keyword">null</span>,pstm,resultSet);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> roleList;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>UserService<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//获取角色列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoleList</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li>
<li>UserServiceImpl<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleServiceImpl</span> <span class="keyword">implements</span> <span class="title">RoleService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//引入Dao</span></span><br><span class="line"> <span class="keyword">private</span> RoleDao roleDao;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">RoleServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     roleDao = <span class="keyword">new</span> RoleDaoImpl();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoleList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     Connection connection = <span class="keyword">null</span>;</span><br><span class="line">     List&lt;Role&gt; roleList = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         connection = BaseDao.getConnection();</span><br><span class="line">         roleList = roleDao.getRoleList(connection);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         BaseDao.closeResource(connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> roleList;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-编写Servlet类"><a href="#4-编写Servlet类" class="headerlink" title="4.编写Servlet类"></a>4.编写Servlet类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加一个if判断</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String method = req.getParameter(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">&quot;savepwd&quot;</span>)&amp;&amp;method!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.updatePwd(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">&quot;pwdmodify&quot;</span>)&amp;&amp;method!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.pwdModify(req, resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">&quot;query&quot;</span>)&amp;&amp;method!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.query(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//query方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询用户列表</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从前端获取数据；</span></span><br><span class="line">        String queryUserName = req.getParameter(<span class="string">&quot;queryname&quot;</span>);</span><br><span class="line">        String temp = req.getParameter(<span class="string">&quot;queryUserRole&quot;</span>);</span><br><span class="line">        String pageIndex = req.getParameter(<span class="string">&quot;pageIndex&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> queryUserRole = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取用户列表</span></span><br><span class="line">        UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次走这个请求，一定是第一页，页面大小固定的；</span></span><br><span class="line">        <span class="keyword">int</span> pageSize = <span class="number">5</span>; <span class="comment">//可以把这个些到配置文件中，方便后期修改；</span></span><br><span class="line">        <span class="keyword">int</span> currentPageNo = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (queryUserName ==<span class="keyword">null</span>)&#123;</span><br><span class="line">            queryUserName = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (temp!=<span class="keyword">null</span> &amp;&amp; !temp.equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            queryUserRole = Integer.parseInt(temp);  <span class="comment">//给查询赋值！0,1,2,3</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pageIndex!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            currentPageNo = Integer.parseInt(pageIndex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取用户的总数 (分页：  上一页，下一页的情况)</span></span><br><span class="line">        <span class="keyword">int</span> totalCount = userService.getUserCount(queryUserName, queryUserRole);</span><br><span class="line">        <span class="comment">//总页数支持</span></span><br><span class="line">        PageSupport pageSupport = <span class="keyword">new</span> PageSupport();</span><br><span class="line">        pageSupport.setCurrentPageNo(currentPageNo);</span><br><span class="line">        pageSupport.setPageSize(pageSize);</span><br><span class="line">        pageSupport.setTotalCount(totalCount);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> totalPageCount = ((<span class="keyword">int</span>)(totalCount/pageSize))+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//控制首页和尾页</span></span><br><span class="line">        <span class="comment">//如果页面要小于1了，就显示第一页的东西</span></span><br><span class="line">        <span class="keyword">if</span> (currentPageNo&lt;<span class="number">1</span>)&#123;</span><br><span class="line">            currentPageNo = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (currentPageNo&gt;totalPageCount)&#123; <span class="comment">//当前页面大于了最后一页；</span></span><br><span class="line">            currentPageNo = totalPageCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取用户列表展示</span></span><br><span class="line">        userList = userService.getUserList(queryUserName, queryUserRole, currentPageNo, pageSize);</span><br><span class="line">        req.setAttribute(<span class="string">&quot;userList&quot;</span>,userList);</span><br><span class="line"></span><br><span class="line">        RoleServiceImpl roleService = <span class="keyword">new</span> RoleServiceImpl();</span><br><span class="line">        List&lt;Role&gt; roleList = roleService.getRoleList();</span><br><span class="line">        req.setAttribute(<span class="string">&quot;roleList&quot;</span>,roleList);</span><br><span class="line">        req.setAttribute(<span class="string">&quot;totalCount&quot;</span>,totalCount);</span><br><span class="line">        req.setAttribute(<span class="string">&quot;currentPageNo&quot;</span>,currentPageNo);</span><br><span class="line">        req.setAttribute(<span class="string">&quot;totalPageCount&quot;</span>,totalPageCount);</span><br><span class="line">        req.setAttribute(<span class="string">&quot;queryUserName&quot;</span>,queryUserName);</span><br><span class="line">        req.setAttribute(<span class="string">&quot;queryUserRole&quot;</span>,queryUserRole);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回前端</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;userlist.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServletException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
  </entry>
  <entry>
    <title>Servlet详解</title>
    <url>/2021/04/29/Servlet%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="Servlet详解"><a href="#Servlet详解" class="headerlink" title="Servlet详解"></a>Servlet详解</h1><h2 id="一、什么是Servlet"><a href="#一、什么是Servlet" class="headerlink" title="一、什么是Servlet"></a>一、什么是Servlet</h2><p>1、Servlet 是 JavaEE 规范之一。规范就是接口<br>2、Servlet 就 JavaWeb 三大组件之一。三大组件分别是：Servlet 程序、Filter 过滤器、Listener 监听器。<br>3、Servlet 是运行在服务器上的一个 java 小程序，它可以接收客户端发送过来的请求，并响应数据给客户端.<br>4、把实现了Servlet接口的Java程序叫做，Servlet。</p>
<a id="more"></a>
<p><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210506105752.png"></p>
<h2 id="二、手动实现HelloServlet程序"><a href="#二、手动实现HelloServlet程序" class="headerlink" title="二、手动实现HelloServlet程序"></a>二、手动实现HelloServlet程序</h2><h3 id="1、导入依赖"><a href="#1、导入依赖" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加Servlet和JSP依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2、编写servlet类继承HttpServlet"><a href="#2、编写servlet类继承HttpServlet" class="headerlink" title="2、编写servlet类继承HttpServlet"></a>2、编写servlet类继承HttpServlet</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//        ServletOutputStream outputStream = resp.getOutputStream();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;进入了doGet&quot;</span>);</span><br><span class="line">        <span class="comment">//设置编码，防止中文乱码，默认是ISO-8859-1</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>); <span class="comment">//ajax异步请求为application/json格式</span></span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        PrintWriter out = resp.getWriter(); <span class="comment">//响应流</span></span><br><span class="line">        out.print(<span class="string">&quot;HelloServlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、到-web-xml-中去配置映射"><a href="#3、到-web-xml-中去配置映射" class="headerlink" title="3、到 web.xml 中去配置映射"></a>3、到 web.xml 中去配置映射</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span></span><br><span class="line"><span class="tag"><span class="string">https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span> <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- servlet 标签给 Tomcat 配置 Servlet 程序 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!--servlet-name 标签 Servlet 程序起一个别名（一般是类名） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet-class 是 Servlet 程序的全类名--&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.nichu.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--servlet-mapping 标签给2 servlet 程序配置访问地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!--servlet-name 标签的作用是告诉服务器，我当前配置的地址给哪个 Servlet 程序使用--&gt;</span> <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--url-pattern 标签配置访问地址 &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> / 斜杠在服务器解析的时候，表示地址为：http://ip:port/工程路径 &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> /hello 表示地址为：http://ip:port/工程路径/hello &lt;br/&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4、配置Tomcat"><a href="#4、配置Tomcat" class="headerlink" title="4、配置Tomcat"></a>4、配置Tomcat</h3><h3 id="5、启动项目，访问路径"><a href="#5、启动项目，访问路径" class="headerlink" title="5、启动项目，访问路径"></a>5、启动项目，访问路径</h3><h2 id="三、Servlet原理"><a href="#三、Servlet原理" class="headerlink" title="三、Servlet原理"></a>三、Servlet原理</h2><p>Servlet是由Web服务器调用，web服务器在收到浏览器请求之后，会：<br><img src="https://gitee.com/Haikez/images_bed/raw/master/JavaWeb/20210506110549.png"></p>
<h2 id="四、Mapping问题"><a href="#四、Mapping问题" class="headerlink" title="四、Mapping问题"></a>四、Mapping问题</h2><h3 id="1-一个Servlet可以指定一个映射路径"><a href="#1-一个Servlet可以指定一个映射路径" class="headerlink" title="1. 一个Servlet可以指定一个映射路径"></a>1. 一个Servlet可以指定一个映射路径</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-一个Servlet可以指定多个映射路径"><a href="#2-一个Servlet可以指定多个映射路径" class="headerlink" title="2. 一个Servlet可以指定多个映射路径"></a>2. 一个Servlet可以指定多个映射路径</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello3<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello4<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello5<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-一个Servlet可以指定通用映射路径"><a href="#3-一个Servlet可以指定通用映射路径" class="headerlink" title="3. 一个Servlet可以指定通用映射路径"></a>3. 一个Servlet可以指定通用映射路径</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-默认请求路径"><a href="#4-默认请求路径" class="headerlink" title="4. 默认请求路径"></a>4. 默认请求路径</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--默认请求路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="5-指定一些后缀或者前缀等等…"><a href="#5-指定一些后缀或者前缀等等…" class="headerlink" title="5. 指定一些后缀或者前缀等等…."></a>5. 指定一些后缀或者前缀等等….</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以自定义后缀实现请求映射</span></span><br><span class="line"><span class="comment">    注意点，*前面不能加项目映射的路径</span></span><br><span class="line"><span class="comment">    hello/sajdlkajda.nichu</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.nichu<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="6-优先级问题"><a href="#6-优先级问题" class="headerlink" title="6. 优先级问题"></a>6. 优先级问题</h3><p>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求（404）；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--404--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.ErrorServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="五、ServletContext"><a href="#五、ServletContext" class="headerlink" title="五、ServletContext"></a>五、ServletContext</h2><p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用</p>
<h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h3><h3 id="1-共享数据"><a href="#1-共享数据" class="headerlink" title="1. 共享数据"></a>1. 共享数据</h3><ul>
<li>在一个Servlet中写入的数据，在另一个Servlet中可以访问。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet01</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line">        writer.print(<span class="string">&quot;hello,Servlet&quot;</span>);</span><br><span class="line">        ServletContext contest = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String name=<span class="string">&quot;倪矗&quot;</span>;</span><br><span class="line">        contest.setAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet02</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        String name = (String) context.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        resp.getWriter().print(<span class="string">&quot;name:&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-获得初始化参数"><a href="#2-获得初始化参数" class="headerlink" title="2. 获得初始化参数"></a>2. 获得初始化参数</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置一下web应用初始化参数--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加映射 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.nichu.servlet.Servlet03<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/DB<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet03</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建context对象</span></span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        <span class="comment">//获得初始化参数</span></span><br><span class="line">        String url = context.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        resp.getWriter().println(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-请求转发-getRequestDispatcher"><a href="#3-请求转发-getRequestDispatcher" class="headerlink" title="3. 请求转发(getRequestDispatcher)"></a>3. 请求转发(getRequestDispatcher)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet04</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        <span class="comment">//获得请求转发的路径</span></span><br><span class="line">        RequestDispatcher requestDispatcher = context.getRequestDispatcher(<span class="string">&quot;/DB&quot;</span>);</span><br><span class="line">        <span class="comment">//调用forward方法实现请求转发</span></span><br><span class="line">        requestDispatcher.forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-读取资源文件"><a href="#4-读取资源文件" class="headerlink" title="4. 读取资源文件"></a>4. 读取资源文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建properties文件</span></span><br><span class="line">username=root</span><br><span class="line">password=<span class="number">12354654</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        <span class="comment">//以流的方式获取资源文件</span></span><br><span class="line">    InputStream is = context.getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/db.properties&quot;</span>);</span><br><span class="line">        <span class="comment">//新建Properties对象</span></span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//加载得到的流</span></span><br><span class="line">    properties.load(is);</span><br><span class="line">        <span class="comment">//从流中获取指定参数</span></span><br><span class="line">    String usr = properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    String pwd = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    resp.getWriter().println(usr+<span class="string">&quot;:&quot;</span>+pwd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
访问测试即可；</li>
</ul>
<h2 id="五、HttpServletResponse"><a href="#五、HttpServletResponse" class="headerlink" title="五、HttpServletResponse"></a>五、HttpServletResponse</h2><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；</p>
<ul>
<li>如果要获取客户端请求过来的参数：找HttpServletRequest</li>
<li>如果要给客户端响应一些信息：找HttpServletResponse</li>
</ul>
<h3 id="1-简单分类"><a href="#1-简单分类" class="headerlink" title="1. 简单分类"></a>1. 简单分类</h3><p>负责向浏览器发送数据的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="function">PrintWriter <span class="title">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>
<p>负责向浏览器发送响应头的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCharacterEncoding</span><span class="params">(String var1)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentLength</span><span class="params">(<span class="keyword">int</span> var1)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentLengthLong</span><span class="params">(<span class="keyword">long</span> var1)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentType</span><span class="params">(String var1)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br></pre></td></tr></table></figure>
<p>响应的状态码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> SC_CONTINUE = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SWITCHING_PROTOCOLS = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">int</span> SC_OK = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> SC_CREATED = <span class="number">201</span>;</span><br><span class="line"><span class="keyword">int</span> SC_ACCEPTED = <span class="number">202</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NON_AUTHORITATIVE_INFORMATION = <span class="number">203</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NO_CONTENT = <span class="number">204</span>;</span><br><span class="line"><span class="keyword">int</span> SC_RESET_CONTENT = <span class="number">205</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PARTIAL_CONTENT = <span class="number">206</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MULTIPLE_CHOICES = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MOVED_PERMANENTLY = <span class="number">301</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MOVED_TEMPORARILY = <span class="number">302</span>;</span><br><span class="line"><span class="keyword">int</span> SC_FOUND = <span class="number">302</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SEE_OTHER = <span class="number">303</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_MODIFIED = <span class="number">304</span>;</span><br><span class="line"><span class="keyword">int</span> SC_USE_PROXY = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">int</span> SC_TEMPORARY_REDIRECT = <span class="number">307</span>;</span><br><span class="line"><span class="keyword">int</span> SC_BAD_REQUEST = <span class="number">400</span>;</span><br><span class="line"><span class="keyword">int</span> SC_UNAUTHORIZED = <span class="number">401</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PAYMENT_REQUIRED = <span class="number">402</span>;</span><br><span class="line"><span class="keyword">int</span> SC_FORBIDDEN = <span class="number">403</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_FOUND = <span class="number">404</span>;</span><br><span class="line"><span class="keyword">int</span> SC_METHOD_NOT_ALLOWED = <span class="number">405</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_ACCEPTABLE = <span class="number">406</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PROXY_AUTHENTICATION_REQUIRED = <span class="number">407</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_TIMEOUT = <span class="number">408</span>;</span><br><span class="line"><span class="keyword">int</span> SC_CONFLICT = <span class="number">409</span>;</span><br><span class="line"><span class="keyword">int</span> SC_GONE = <span class="number">410</span>;</span><br><span class="line"><span class="keyword">int</span> SC_LENGTH_REQUIRED = <span class="number">411</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PRECONDITION_FAILED = <span class="number">412</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_ENTITY_TOO_LARGE = <span class="number">413</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_URI_TOO_LONG = <span class="number">414</span>;</span><br><span class="line"><span class="keyword">int</span> SC_UNSUPPORTED_MEDIA_TYPE = <span class="number">415</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUESTED_RANGE_NOT_SATISFIABLE = <span class="number">416</span>;</span><br><span class="line"><span class="keyword">int</span> SC_EXPECTATION_FAILED = <span class="number">417</span>;</span><br><span class="line"><span class="keyword">int</span> SC_INTERNAL_SERVER_ERROR = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_IMPLEMENTED = <span class="number">501</span>;</span><br><span class="line"><span class="keyword">int</span> SC_BAD_GATEWAY = <span class="number">502</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SERVICE_UNAVAILABLE = <span class="number">503</span>;</span><br><span class="line"><span class="keyword">int</span> SC_GATEWAY_TIMEOUT = <span class="number">504</span>;</span><br><span class="line"><span class="keyword">int</span> SC_HTTP_VERSION_NOT_SUPPORTED = <span class="number">505</span>;</span><br></pre></td></tr></table></figure>
<h3 id="2-下载文件"><a href="#2-下载文件" class="headerlink" title="2. 下载文件"></a>2. 下载文件</h3><ol>
<li>要获取下载文件的路径</li>
<li>下载的文件名是啥？</li>
<li>设置想办法让浏览器能够支持下载我们需要的东西</li>
<li>获取下载文件的输入流</li>
<li>创建缓冲区</li>
<li>获取OutputStream对象</li>
<li>将FileOutputStream流写入到buffer缓冲区</li>
<li>使用OutputStream将缓冲区中的数据输出到客户端！</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取下载文件的路径</span></span><br><span class="line">    String realPath =<span class="string">&quot;/Users/haikez/Desktop/javaweb/javaweb-01-servlet/javaweb-02-servlet/src/main/resources/1.png&quot;</span>;</span><br><span class="line">    <span class="comment">//2.获取要下载的文件名</span></span><br><span class="line">    String filename = realPath.substring(realPath.lastIndexOf(<span class="string">&quot;/&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//3.设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西,中文文件名URLEncoder.encode编码，否则有可能乱码</span></span><br><span class="line">    resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+ URLEncoder.encode(filename,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    <span class="comment">//4.获取下载文件的输入流</span></span><br><span class="line">    FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(realPath));</span><br><span class="line">    <span class="comment">//5.创建缓冲区</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="comment">//6.获取OutputStream对象</span></span><br><span class="line">    ServletOutputStream out = resp.getOutputStream();</span><br><span class="line">    <span class="comment">//7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端！</span></span><br><span class="line">    <span class="keyword">while</span> ((len=in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        out.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">    in.close();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-验证码功能"><a href="#4-验证码功能" class="headerlink" title="4. 验证码功能"></a>4. 验证码功能</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//如何让浏览器3秒自动刷新一次;</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;refresh&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        <span class="comment">//在内存中创建一个图片</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(<span class="number">80</span>,<span class="number">20</span>,BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="comment">//得到图片</span></span><br><span class="line">        Graphics2D g = (Graphics2D) image.getGraphics(); <span class="comment">//笔</span></span><br><span class="line">        <span class="comment">//设置图片的背景颜色</span></span><br><span class="line">        g.setColor(Color.white);</span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">80</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//给图片写数据</span></span><br><span class="line">        g.setColor(Color.BLUE);</span><br><span class="line">        g.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>,Font.BOLD,<span class="number">20</span>));</span><br><span class="line">        g.drawString(makeNum(),<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//告诉浏览器，这个请求用图片的方式打开</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">        <span class="comment">//网站存在缓存，不让浏览器缓存</span></span><br><span class="line">        resp.setDateHeader(<span class="string">&quot;expires&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Cache-Control&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Pragma&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        <span class="comment">//把图片写给浏览器</span></span><br><span class="line">        ImageIO.write(image,<span class="string">&quot;jpg&quot;</span>, resp.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成随机数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">makeNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        String num = random.nextInt(<span class="number">9999999</span>) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>-num.length() ; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        num = sb.toString() + num;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-实现重定向-resp-sendRedirect-“-r-success-jsp”"><a href="#5-实现重定向-resp-sendRedirect-“-r-success-jsp”" class="headerlink" title="5. 实现重定向(resp.sendRedirect(“/r/success.jsp”))"></a>5. 实现重定向(resp.sendRedirect(“/r/success.jsp”))</h3><p><img src="https://gitee.com/xiaoyu-98/blogImage/raw/master/img/image-20210320172123691.png"><br>B一个web资源收到客户端A请求后，B会通知A去访问另外一个web资源C，这个过程叫重定向。<br>常见场景：</p>
<ul>
<li>用户登录</li>
</ul>
<h4 id="重定向和转发的区别？"><a href="#重定向和转发的区别？" class="headerlink" title="重定向和转发的区别？"></a>重定向和转发的区别？</h4><ul>
<li>请求转发url不会产生变化，重定向会发生变化</li>
<li>请求转发可以携带参数，重定向不能携带参数</li>
<li>请求转发只能发送一个请求，重定向至少发送两次请求</li>
</ul>
<h4 id="简单实现登录重定向"><a href="#简单实现登录重定向" class="headerlink" title="简单实现登录重定向:"></a>简单实现登录重定向:</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--这里提交的路径，需要寻找到项目的路径--%&gt;</span><br><span class="line">&lt;%--$&#123;pageContext.request.contextPath&#125;代表当前的项目--%&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//处理请求</span></span><br><span class="line">    String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    String password = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(username+<span class="string">&quot;:&quot;</span>+password);</span><br><span class="line">    <span class="comment">//重定向时候一定要注意，路径问题，否则404；</span></span><br><span class="line">    resp.sendRedirect(<span class="string">&quot;/r/success.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>requset<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.RequestTest<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>requset<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>




<h2 id="六、HttpServletRequest"><a href="#六、HttpServletRequest" class="headerlink" title="六、HttpServletRequest"></a>六、HttpServletRequest</h2><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/req&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReqServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;url路径：&quot;</span>+req.getRequestURL());</span><br><span class="line">        System.out.println(<span class="string">&quot;uri路径：&quot;</span>+req.getRequestURI());</span><br><span class="line">        System.out.println(<span class="string">&quot;context路径：&quot;</span>+req.getContextPath());</span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/file&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/xiaoyu-98/blogImage/raw/master/img/image-20210320180403649.png"></p>
<blockquote>
<p><strong><em><a href="https://www.kuangstudy.com/bbs/1386537787443974146">狂笔记</a></em></strong></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
  </entry>
</search>
